
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000f84  08000f84  00001f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fc4  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00001fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00001fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000fcc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001028  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001028  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000968  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000034b  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00002d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000bf  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cbe  00000000  00000000  00002f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000155d  00000000  00000000  00005bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000977b  00000000  00000000  00007132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000108ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009d4  00000000  00000000  000108f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000112c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f6c 	.word	0x08000f6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000f6c 	.word	0x08000f6c

080001d4 <delay>:

#include <stdint.h>
#include<stdio.h>

void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i<300000 ; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	000493df 	.word	0x000493df

08000200 <main>:

int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0

	uint32_t volatile *const pGPIODModeReg 	= (uint32_t*)(0x40020800);
 8000206:	4b87      	ldr	r3, [pc, #540]	@ (8000424 <main+0x224>)
 8000208:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pInputDataReg 	= (uint32_t*)(0x40020800 + 0x10);
 800020a:	4b87      	ldr	r3, [pc, #540]	@ (8000428 <main+0x228>)
 800020c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pOutputDataReg = (uint32_t*)(0x40020800 + 0x14);
 800020e:	4b87      	ldr	r3, [pc, #540]	@ (800042c <main+0x22c>)
 8000210:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockctrlReg 	= (uint32_t*)(0x40023800 + 0x30);
 8000212:	4b87      	ldr	r3, [pc, #540]	@ (8000430 <main+0x230>)
 8000214:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullupDownReg = (uint32_t*)(0x40020800 + 0x0C);
 8000216:	4b87      	ldr	r3, [pc, #540]	@ (8000434 <main+0x234>)
 8000218:	607b      	str	r3, [r7, #4]

	*pClockctrlReg |= (1 >> 3);
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	601a      	str	r2, [r3, #0]

	*pGPIODModeReg &= ~(0xFF);
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	601a      	str	r2, [r3, #0]
	*pGPIODModeReg |= 0x55;
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	601a      	str	r2, [r3, #0]

	*pGPIODModeReg &= ~(0xFF << 16);
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	601a      	str	r2, [r3, #0]

	*pPullupDownReg &= ~(0xFF << 16);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	*pPullupDownReg |= ~(0x55 << 16);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f463 02aa 	orn	r2, r3, #5570560	@ 0x550000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]


while(1){
	*pOutputDataReg |= 0x0f;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 020f 	orr.w	r2, r3, #15
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

	*pOutputDataReg &= ~( 1 << 0 );
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f023 0201 	bic.w	r2, r3, #1
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]

	if(!(*pInputDataReg & (1 << 8)))
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800027e:	2b00      	cmp	r3, #0
 8000280:	d104      	bne.n	800028c <main+0x8c>
	{
		delay();
 8000282:	f7ff ffa7 	bl	80001d4 <delay>
		printf("1\n");
 8000286:	486c      	ldr	r0, [pc, #432]	@ (8000438 <main+0x238>)
 8000288:	f000 fadc 	bl	8000844 <puts>
	}

	if(!(*pInputDataReg & (1 << 9)))
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000294:	2b00      	cmp	r3, #0
 8000296:	d104      	bne.n	80002a2 <main+0xa2>
	{
		delay();
 8000298:	f7ff ff9c 	bl	80001d4 <delay>
		printf("2\n");
 800029c:	4867      	ldr	r0, [pc, #412]	@ (800043c <main+0x23c>)
 800029e:	f000 fad1 	bl	8000844 <puts>
	}

	if(!(*pInputDataReg & (1 << 10)))
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d104      	bne.n	80002b8 <main+0xb8>
	{
		delay();
 80002ae:	f7ff ff91 	bl	80001d4 <delay>
		printf("3\n");
 80002b2:	4863      	ldr	r0, [pc, #396]	@ (8000440 <main+0x240>)
 80002b4:	f000 fac6 	bl	8000844 <puts>
	}

	if(!(*pInputDataReg & (1 << 11)))
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d104      	bne.n	80002ce <main+0xce>
	{
		delay();
 80002c4:	f7ff ff86 	bl	80001d4 <delay>
		printf("A\n");
 80002c8:	485e      	ldr	r0, [pc, #376]	@ (8000444 <main+0x244>)
 80002ca:	f000 fabb 	bl	8000844 <puts>
	}

	*pOutputDataReg |= 0x0f;
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 020f 	orr.w	r2, r3, #15
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

	*pOutputDataReg &= ~( 1 << 1 );
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 0202 	bic.w	r2, r3, #2
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]

	if(!(*pInputDataReg & (1 << 8)))
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d104      	bne.n	80002fc <main+0xfc>
		{
			delay();
 80002f2:	f7ff ff6f 	bl	80001d4 <delay>
			printf("4\n");
 80002f6:	4854      	ldr	r0, [pc, #336]	@ (8000448 <main+0x248>)
 80002f8:	f000 faa4 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 9)))
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000304:	2b00      	cmp	r3, #0
 8000306:	d104      	bne.n	8000312 <main+0x112>
		{
			delay();
 8000308:	f7ff ff64 	bl	80001d4 <delay>
			printf("5\n");
 800030c:	484f      	ldr	r0, [pc, #316]	@ (800044c <main+0x24c>)
 800030e:	f000 fa99 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 10)))
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800031a:	2b00      	cmp	r3, #0
 800031c:	d104      	bne.n	8000328 <main+0x128>
		{
			delay();
 800031e:	f7ff ff59 	bl	80001d4 <delay>
			printf("6\n");
 8000322:	484b      	ldr	r0, [pc, #300]	@ (8000450 <main+0x250>)
 8000324:	f000 fa8e 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 11)))
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <main+0x13e>
		{
			delay();
 8000334:	f7ff ff4e 	bl	80001d4 <delay>
			printf("B\n");
 8000338:	4846      	ldr	r0, [pc, #280]	@ (8000454 <main+0x254>)
 800033a:	f000 fa83 	bl	8000844 <puts>
		}

		*pOutputDataReg |= 0x0f;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f043 020f 	orr.w	r2, r3, #15
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]

		*pOutputDataReg &= ~( 1 << 2 );
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f023 0204 	bic.w	r2, r3, #4
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]

		if(!(*pInputDataReg & (1 << 8)))
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800035e:	2b00      	cmp	r3, #0
 8000360:	d104      	bne.n	800036c <main+0x16c>
		{
			delay();
 8000362:	f7ff ff37 	bl	80001d4 <delay>
			printf("7\n");
 8000366:	483c      	ldr	r0, [pc, #240]	@ (8000458 <main+0x258>)
 8000368:	f000 fa6c 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 9)))
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000374:	2b00      	cmp	r3, #0
 8000376:	d104      	bne.n	8000382 <main+0x182>
		{
			delay();
 8000378:	f7ff ff2c 	bl	80001d4 <delay>
			printf("8\n");
 800037c:	4837      	ldr	r0, [pc, #220]	@ (800045c <main+0x25c>)
 800037e:	f000 fa61 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 10)))
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800038a:	2b00      	cmp	r3, #0
 800038c:	d104      	bne.n	8000398 <main+0x198>
		{
			delay();
 800038e:	f7ff ff21 	bl	80001d4 <delay>
			printf("9\n");
 8000392:	4833      	ldr	r0, [pc, #204]	@ (8000460 <main+0x260>)
 8000394:	f000 fa56 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 11)))
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d104      	bne.n	80003ae <main+0x1ae>
		{
			delay();
 80003a4:	f7ff ff16 	bl	80001d4 <delay>
			printf("C\n");
 80003a8:	482e      	ldr	r0, [pc, #184]	@ (8000464 <main+0x264>)
 80003aa:	f000 fa4b 	bl	8000844 <puts>
		}


		*pOutputDataReg |= 0x0f;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 020f 	orr.w	r2, r3, #15
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]

		*pOutputDataReg &= ~( 1 << 3 );
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f023 0208 	bic.w	r2, r3, #8
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	601a      	str	r2, [r3, #0]

		if(!(*pInputDataReg & (1 << 8)))
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d104      	bne.n	80003dc <main+0x1dc>
		{
			delay();
 80003d2:	f7ff feff 	bl	80001d4 <delay>
			printf("*\n");
 80003d6:	4824      	ldr	r0, [pc, #144]	@ (8000468 <main+0x268>)
 80003d8:	f000 fa34 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 9)))
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d104      	bne.n	80003f2 <main+0x1f2>
		{
			delay();
 80003e8:	f7ff fef4 	bl	80001d4 <delay>
			printf("0\n");
 80003ec:	481f      	ldr	r0, [pc, #124]	@ (800046c <main+0x26c>)
 80003ee:	f000 fa29 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 10)))
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d104      	bne.n	8000408 <main+0x208>
		{
			delay();
 80003fe:	f7ff fee9 	bl	80001d4 <delay>
			printf("#\n");
 8000402:	481b      	ldr	r0, [pc, #108]	@ (8000470 <main+0x270>)
 8000404:	f000 fa1e 	bl	8000844 <puts>
		}

		if(!(*pInputDataReg & (1 << 11)))
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000410:	2b00      	cmp	r3, #0
 8000412:	f47f af24 	bne.w	800025e <main+0x5e>
		{
			delay();
 8000416:	f7ff fedd 	bl	80001d4 <delay>
			printf("D\n");
 800041a:	4816      	ldr	r0, [pc, #88]	@ (8000474 <main+0x274>)
 800041c:	f000 fa12 	bl	8000844 <puts>
	*pOutputDataReg |= 0x0f;
 8000420:	e71d      	b.n	800025e <main+0x5e>
 8000422:	bf00      	nop
 8000424:	40020800 	.word	0x40020800
 8000428:	40020810 	.word	0x40020810
 800042c:	40020814 	.word	0x40020814
 8000430:	40023830 	.word	0x40023830
 8000434:	4002080c 	.word	0x4002080c
 8000438:	08000f84 	.word	0x08000f84
 800043c:	08000f88 	.word	0x08000f88
 8000440:	08000f8c 	.word	0x08000f8c
 8000444:	08000f90 	.word	0x08000f90
 8000448:	08000f94 	.word	0x08000f94
 800044c:	08000f98 	.word	0x08000f98
 8000450:	08000f9c 	.word	0x08000f9c
 8000454:	08000fa0 	.word	0x08000fa0
 8000458:	08000fa4 	.word	0x08000fa4
 800045c:	08000fa8 	.word	0x08000fa8
 8000460:	08000fac 	.word	0x08000fac
 8000464:	08000fb0 	.word	0x08000fb0
 8000468:	08000fb4 	.word	0x08000fb4
 800046c:	08000fb8 	.word	0x08000fb8
 8000470:	08000fbc 	.word	0x08000fbc
 8000474:	08000fc0 	.word	0x08000fc0

08000478 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	e00a      	b.n	80004a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800048a:	f3af 8000 	nop.w
 800048e:	4601      	mov	r1, r0
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	b2ca      	uxtb	r2, r1
 8000498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf0      	blt.n	800048a <_read+0x12>
  }

  return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b086      	sub	sp, #24
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	e009      	b.n	80004d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	60ba      	str	r2, [r7, #8]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf1      	blt.n	80004c4 <_write+0x12>
  }
  return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_close>:

int _close(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000512:	605a      	str	r2, [r3, #4]
  return 0;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_isatty>:

int _isatty(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <_sbrk+0x5c>)
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <_sbrk+0x60>)
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <_sbrk+0x64>)
 8000572:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <_sbrk+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	429a      	cmp	r2, r3
 8000582:	d207      	bcs.n	8000594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000584:	f000 fa8c 	bl	8000aa0 <__errno>
 8000588:	4603      	mov	r3, r0
 800058a:	220c      	movs	r2, #12
 800058c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e009      	b.n	80005a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <_sbrk+0x64>)
 80005a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20018000 	.word	0x20018000
 80005b4:	00000400 	.word	0x00000400
 80005b8:	20000078 	.word	0x20000078
 80005bc:	200001c8 	.word	0x200001c8

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	@ (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ee:	f000 fa5d 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff fe05 	bl	8000200 <main>

080005f6 <LoopForever>:

LoopForever:
  b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000604:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000608:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800060c:	200001c8 	.word	0x200001c8

08000610 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <std>:
 8000614:	2300      	movs	r3, #0
 8000616:	b510      	push	{r4, lr}
 8000618:	4604      	mov	r4, r0
 800061a:	e9c0 3300 	strd	r3, r3, [r0]
 800061e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000622:	6083      	str	r3, [r0, #8]
 8000624:	8181      	strh	r1, [r0, #12]
 8000626:	6643      	str	r3, [r0, #100]	@ 0x64
 8000628:	81c2      	strh	r2, [r0, #14]
 800062a:	6183      	str	r3, [r0, #24]
 800062c:	4619      	mov	r1, r3
 800062e:	2208      	movs	r2, #8
 8000630:	305c      	adds	r0, #92	@ 0x5c
 8000632:	f000 f9e7 	bl	8000a04 <memset>
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <std+0x58>)
 8000638:	6263      	str	r3, [r4, #36]	@ 0x24
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <std+0x5c>)
 800063c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <std+0x60>)
 8000640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <std+0x64>)
 8000644:	6323      	str	r3, [r4, #48]	@ 0x30
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <std+0x68>)
 8000648:	6224      	str	r4, [r4, #32]
 800064a:	429c      	cmp	r4, r3
 800064c:	d006      	beq.n	800065c <std+0x48>
 800064e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000652:	4294      	cmp	r4, r2
 8000654:	d002      	beq.n	800065c <std+0x48>
 8000656:	33d0      	adds	r3, #208	@ 0xd0
 8000658:	429c      	cmp	r4, r3
 800065a:	d105      	bne.n	8000668 <std+0x54>
 800065c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000664:	f000 ba46 	b.w	8000af4 <__retarget_lock_init_recursive>
 8000668:	bd10      	pop	{r4, pc}
 800066a:	bf00      	nop
 800066c:	08000855 	.word	0x08000855
 8000670:	08000877 	.word	0x08000877
 8000674:	080008af 	.word	0x080008af
 8000678:	080008d3 	.word	0x080008d3
 800067c:	2000007c 	.word	0x2000007c

08000680 <stdio_exit_handler>:
 8000680:	4a02      	ldr	r2, [pc, #8]	@ (800068c <stdio_exit_handler+0xc>)
 8000682:	4903      	ldr	r1, [pc, #12]	@ (8000690 <stdio_exit_handler+0x10>)
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <stdio_exit_handler+0x14>)
 8000686:	f000 b869 	b.w	800075c <_fwalk_sglue>
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	08000df5 	.word	0x08000df5
 8000694:	20000010 	.word	0x20000010

08000698 <cleanup_stdio>:
 8000698:	6841      	ldr	r1, [r0, #4]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <cleanup_stdio+0x34>)
 800069c:	4299      	cmp	r1, r3
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	d001      	beq.n	80006a8 <cleanup_stdio+0x10>
 80006a4:	f000 fba6 	bl	8000df4 <_fflush_r>
 80006a8:	68a1      	ldr	r1, [r4, #8]
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <cleanup_stdio+0x38>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	d002      	beq.n	80006b6 <cleanup_stdio+0x1e>
 80006b0:	4620      	mov	r0, r4
 80006b2:	f000 fb9f 	bl	8000df4 <_fflush_r>
 80006b6:	68e1      	ldr	r1, [r4, #12]
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <cleanup_stdio+0x3c>)
 80006ba:	4299      	cmp	r1, r3
 80006bc:	d004      	beq.n	80006c8 <cleanup_stdio+0x30>
 80006be:	4620      	mov	r0, r4
 80006c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c4:	f000 bb96 	b.w	8000df4 <_fflush_r>
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	200000e4 	.word	0x200000e4
 80006d4:	2000014c 	.word	0x2000014c

080006d8 <global_stdio_init.part.0>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <global_stdio_init.part.0+0x30>)
 80006dc:	4c0b      	ldr	r4, [pc, #44]	@ (800070c <global_stdio_init.part.0+0x34>)
 80006de:	4a0c      	ldr	r2, [pc, #48]	@ (8000710 <global_stdio_init.part.0+0x38>)
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4620      	mov	r0, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	f7ff ff94 	bl	8000614 <std>
 80006ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006f0:	2201      	movs	r2, #1
 80006f2:	2109      	movs	r1, #9
 80006f4:	f7ff ff8e 	bl	8000614 <std>
 80006f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006fc:	2202      	movs	r2, #2
 80006fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000702:	2112      	movs	r1, #18
 8000704:	f7ff bf86 	b.w	8000614 <std>
 8000708:	200001b4 	.word	0x200001b4
 800070c:	2000007c 	.word	0x2000007c
 8000710:	08000681 	.word	0x08000681

08000714 <__sfp_lock_acquire>:
 8000714:	4801      	ldr	r0, [pc, #4]	@ (800071c <__sfp_lock_acquire+0x8>)
 8000716:	f000 b9ee 	b.w	8000af6 <__retarget_lock_acquire_recursive>
 800071a:	bf00      	nop
 800071c:	200001bd 	.word	0x200001bd

08000720 <__sfp_lock_release>:
 8000720:	4801      	ldr	r0, [pc, #4]	@ (8000728 <__sfp_lock_release+0x8>)
 8000722:	f000 b9e9 	b.w	8000af8 <__retarget_lock_release_recursive>
 8000726:	bf00      	nop
 8000728:	200001bd 	.word	0x200001bd

0800072c <__sinit>:
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	f7ff fff0 	bl	8000714 <__sfp_lock_acquire>
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	b11b      	cbz	r3, 8000740 <__sinit+0x14>
 8000738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073c:	f7ff bff0 	b.w	8000720 <__sfp_lock_release>
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <__sinit+0x28>)
 8000742:	6223      	str	r3, [r4, #32]
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__sinit+0x2c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f5      	bne.n	8000738 <__sinit+0xc>
 800074c:	f7ff ffc4 	bl	80006d8 <global_stdio_init.part.0>
 8000750:	e7f2      	b.n	8000738 <__sinit+0xc>
 8000752:	bf00      	nop
 8000754:	08000699 	.word	0x08000699
 8000758:	200001b4 	.word	0x200001b4

0800075c <_fwalk_sglue>:
 800075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000760:	4607      	mov	r7, r0
 8000762:	4688      	mov	r8, r1
 8000764:	4614      	mov	r4, r2
 8000766:	2600      	movs	r6, #0
 8000768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800076c:	f1b9 0901 	subs.w	r9, r9, #1
 8000770:	d505      	bpl.n	800077e <_fwalk_sglue+0x22>
 8000772:	6824      	ldr	r4, [r4, #0]
 8000774:	2c00      	cmp	r4, #0
 8000776:	d1f7      	bne.n	8000768 <_fwalk_sglue+0xc>
 8000778:	4630      	mov	r0, r6
 800077a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800077e:	89ab      	ldrh	r3, [r5, #12]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d907      	bls.n	8000794 <_fwalk_sglue+0x38>
 8000784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	d003      	beq.n	8000794 <_fwalk_sglue+0x38>
 800078c:	4629      	mov	r1, r5
 800078e:	4638      	mov	r0, r7
 8000790:	47c0      	blx	r8
 8000792:	4306      	orrs	r6, r0
 8000794:	3568      	adds	r5, #104	@ 0x68
 8000796:	e7e9      	b.n	800076c <_fwalk_sglue+0x10>

08000798 <_puts_r>:
 8000798:	6a03      	ldr	r3, [r0, #32]
 800079a:	b570      	push	{r4, r5, r6, lr}
 800079c:	6884      	ldr	r4, [r0, #8]
 800079e:	4605      	mov	r5, r0
 80007a0:	460e      	mov	r6, r1
 80007a2:	b90b      	cbnz	r3, 80007a8 <_puts_r+0x10>
 80007a4:	f7ff ffc2 	bl	800072c <__sinit>
 80007a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007aa:	07db      	lsls	r3, r3, #31
 80007ac:	d405      	bmi.n	80007ba <_puts_r+0x22>
 80007ae:	89a3      	ldrh	r3, [r4, #12]
 80007b0:	0598      	lsls	r0, r3, #22
 80007b2:	d402      	bmi.n	80007ba <_puts_r+0x22>
 80007b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007b6:	f000 f99e 	bl	8000af6 <__retarget_lock_acquire_recursive>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	0719      	lsls	r1, r3, #28
 80007be:	d502      	bpl.n	80007c6 <_puts_r+0x2e>
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d135      	bne.n	8000832 <_puts_r+0x9a>
 80007c6:	4621      	mov	r1, r4
 80007c8:	4628      	mov	r0, r5
 80007ca:	f000 f8c5 	bl	8000958 <__swsetup_r>
 80007ce:	b380      	cbz	r0, 8000832 <_puts_r+0x9a>
 80007d0:	f04f 35ff 	mov.w	r5, #4294967295
 80007d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007d6:	07da      	lsls	r2, r3, #31
 80007d8:	d405      	bmi.n	80007e6 <_puts_r+0x4e>
 80007da:	89a3      	ldrh	r3, [r4, #12]
 80007dc:	059b      	lsls	r3, r3, #22
 80007de:	d402      	bmi.n	80007e6 <_puts_r+0x4e>
 80007e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007e2:	f000 f989 	bl	8000af8 <__retarget_lock_release_recursive>
 80007e6:	4628      	mov	r0, r5
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da04      	bge.n	80007f8 <_puts_r+0x60>
 80007ee:	69a2      	ldr	r2, [r4, #24]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dc17      	bgt.n	8000824 <_puts_r+0x8c>
 80007f4:	290a      	cmp	r1, #10
 80007f6:	d015      	beq.n	8000824 <_puts_r+0x8c>
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	6022      	str	r2, [r4, #0]
 80007fe:	7019      	strb	r1, [r3, #0]
 8000800:	68a3      	ldr	r3, [r4, #8]
 8000802:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000806:	3b01      	subs	r3, #1
 8000808:	60a3      	str	r3, [r4, #8]
 800080a:	2900      	cmp	r1, #0
 800080c:	d1ed      	bne.n	80007ea <_puts_r+0x52>
 800080e:	2b00      	cmp	r3, #0
 8000810:	da11      	bge.n	8000836 <_puts_r+0x9e>
 8000812:	4622      	mov	r2, r4
 8000814:	210a      	movs	r1, #10
 8000816:	4628      	mov	r0, r5
 8000818:	f000 f85f 	bl	80008da <__swbuf_r>
 800081c:	3001      	adds	r0, #1
 800081e:	d0d7      	beq.n	80007d0 <_puts_r+0x38>
 8000820:	250a      	movs	r5, #10
 8000822:	e7d7      	b.n	80007d4 <_puts_r+0x3c>
 8000824:	4622      	mov	r2, r4
 8000826:	4628      	mov	r0, r5
 8000828:	f000 f857 	bl	80008da <__swbuf_r>
 800082c:	3001      	adds	r0, #1
 800082e:	d1e7      	bne.n	8000800 <_puts_r+0x68>
 8000830:	e7ce      	b.n	80007d0 <_puts_r+0x38>
 8000832:	3e01      	subs	r6, #1
 8000834:	e7e4      	b.n	8000800 <_puts_r+0x68>
 8000836:	6823      	ldr	r3, [r4, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	6022      	str	r2, [r4, #0]
 800083c:	220a      	movs	r2, #10
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e7ee      	b.n	8000820 <_puts_r+0x88>
	...

08000844 <puts>:
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <puts+0xc>)
 8000846:	4601      	mov	r1, r0
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f7ff bfa5 	b.w	8000798 <_puts_r>
 800084e:	bf00      	nop
 8000850:	2000000c 	.word	0x2000000c

08000854 <__sread>:
 8000854:	b510      	push	{r4, lr}
 8000856:	460c      	mov	r4, r1
 8000858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085c:	f000 f8fc 	bl	8000a58 <_read_r>
 8000860:	2800      	cmp	r0, #0
 8000862:	bfab      	itete	ge
 8000864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000866:	89a3      	ldrhlt	r3, [r4, #12]
 8000868:	181b      	addge	r3, r3, r0
 800086a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800086e:	bfac      	ite	ge
 8000870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000872:	81a3      	strhlt	r3, [r4, #12]
 8000874:	bd10      	pop	{r4, pc}

08000876 <__swrite>:
 8000876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800087a:	461f      	mov	r7, r3
 800087c:	898b      	ldrh	r3, [r1, #12]
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	4605      	mov	r5, r0
 8000882:	460c      	mov	r4, r1
 8000884:	4616      	mov	r6, r2
 8000886:	d505      	bpl.n	8000894 <__swrite+0x1e>
 8000888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800088c:	2302      	movs	r3, #2
 800088e:	2200      	movs	r2, #0
 8000890:	f000 f8d0 	bl	8000a34 <_lseek_r>
 8000894:	89a3      	ldrh	r3, [r4, #12]
 8000896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800089a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800089e:	81a3      	strh	r3, [r4, #12]
 80008a0:	4632      	mov	r2, r6
 80008a2:	463b      	mov	r3, r7
 80008a4:	4628      	mov	r0, r5
 80008a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008aa:	f000 b8e7 	b.w	8000a7c <_write_r>

080008ae <__sseek>:
 80008ae:	b510      	push	{r4, lr}
 80008b0:	460c      	mov	r4, r1
 80008b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b6:	f000 f8bd 	bl	8000a34 <_lseek_r>
 80008ba:	1c43      	adds	r3, r0, #1
 80008bc:	89a3      	ldrh	r3, [r4, #12]
 80008be:	bf15      	itete	ne
 80008c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ca:	81a3      	strheq	r3, [r4, #12]
 80008cc:	bf18      	it	ne
 80008ce:	81a3      	strhne	r3, [r4, #12]
 80008d0:	bd10      	pop	{r4, pc}

080008d2 <__sclose>:
 80008d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d6:	f000 b89d 	b.w	8000a14 <_close_r>

080008da <__swbuf_r>:
 80008da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008dc:	460e      	mov	r6, r1
 80008de:	4614      	mov	r4, r2
 80008e0:	4605      	mov	r5, r0
 80008e2:	b118      	cbz	r0, 80008ec <__swbuf_r+0x12>
 80008e4:	6a03      	ldr	r3, [r0, #32]
 80008e6:	b90b      	cbnz	r3, 80008ec <__swbuf_r+0x12>
 80008e8:	f7ff ff20 	bl	800072c <__sinit>
 80008ec:	69a3      	ldr	r3, [r4, #24]
 80008ee:	60a3      	str	r3, [r4, #8]
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	071a      	lsls	r2, r3, #28
 80008f4:	d501      	bpl.n	80008fa <__swbuf_r+0x20>
 80008f6:	6923      	ldr	r3, [r4, #16]
 80008f8:	b943      	cbnz	r3, 800090c <__swbuf_r+0x32>
 80008fa:	4621      	mov	r1, r4
 80008fc:	4628      	mov	r0, r5
 80008fe:	f000 f82b 	bl	8000958 <__swsetup_r>
 8000902:	b118      	cbz	r0, 800090c <__swbuf_r+0x32>
 8000904:	f04f 37ff 	mov.w	r7, #4294967295
 8000908:	4638      	mov	r0, r7
 800090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	6922      	ldr	r2, [r4, #16]
 8000910:	1a98      	subs	r0, r3, r2
 8000912:	6963      	ldr	r3, [r4, #20]
 8000914:	b2f6      	uxtb	r6, r6
 8000916:	4283      	cmp	r3, r0
 8000918:	4637      	mov	r7, r6
 800091a:	dc05      	bgt.n	8000928 <__swbuf_r+0x4e>
 800091c:	4621      	mov	r1, r4
 800091e:	4628      	mov	r0, r5
 8000920:	f000 fa68 	bl	8000df4 <_fflush_r>
 8000924:	2800      	cmp	r0, #0
 8000926:	d1ed      	bne.n	8000904 <__swbuf_r+0x2a>
 8000928:	68a3      	ldr	r3, [r4, #8]
 800092a:	3b01      	subs	r3, #1
 800092c:	60a3      	str	r3, [r4, #8]
 800092e:	6823      	ldr	r3, [r4, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	6022      	str	r2, [r4, #0]
 8000934:	701e      	strb	r6, [r3, #0]
 8000936:	6962      	ldr	r2, [r4, #20]
 8000938:	1c43      	adds	r3, r0, #1
 800093a:	429a      	cmp	r2, r3
 800093c:	d004      	beq.n	8000948 <__swbuf_r+0x6e>
 800093e:	89a3      	ldrh	r3, [r4, #12]
 8000940:	07db      	lsls	r3, r3, #31
 8000942:	d5e1      	bpl.n	8000908 <__swbuf_r+0x2e>
 8000944:	2e0a      	cmp	r6, #10
 8000946:	d1df      	bne.n	8000908 <__swbuf_r+0x2e>
 8000948:	4621      	mov	r1, r4
 800094a:	4628      	mov	r0, r5
 800094c:	f000 fa52 	bl	8000df4 <_fflush_r>
 8000950:	2800      	cmp	r0, #0
 8000952:	d0d9      	beq.n	8000908 <__swbuf_r+0x2e>
 8000954:	e7d6      	b.n	8000904 <__swbuf_r+0x2a>
	...

08000958 <__swsetup_r>:
 8000958:	b538      	push	{r3, r4, r5, lr}
 800095a:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <__swsetup_r+0xa8>)
 800095c:	4605      	mov	r5, r0
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	460c      	mov	r4, r1
 8000962:	b118      	cbz	r0, 800096c <__swsetup_r+0x14>
 8000964:	6a03      	ldr	r3, [r0, #32]
 8000966:	b90b      	cbnz	r3, 800096c <__swsetup_r+0x14>
 8000968:	f7ff fee0 	bl	800072c <__sinit>
 800096c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000970:	0719      	lsls	r1, r3, #28
 8000972:	d422      	bmi.n	80009ba <__swsetup_r+0x62>
 8000974:	06da      	lsls	r2, r3, #27
 8000976:	d407      	bmi.n	8000988 <__swsetup_r+0x30>
 8000978:	2209      	movs	r2, #9
 800097a:	602a      	str	r2, [r5, #0]
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	81a3      	strh	r3, [r4, #12]
 8000982:	f04f 30ff 	mov.w	r0, #4294967295
 8000986:	e033      	b.n	80009f0 <__swsetup_r+0x98>
 8000988:	0758      	lsls	r0, r3, #29
 800098a:	d512      	bpl.n	80009b2 <__swsetup_r+0x5a>
 800098c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800098e:	b141      	cbz	r1, 80009a2 <__swsetup_r+0x4a>
 8000990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000994:	4299      	cmp	r1, r3
 8000996:	d002      	beq.n	800099e <__swsetup_r+0x46>
 8000998:	4628      	mov	r0, r5
 800099a:	f000 f8af 	bl	8000afc <_free_r>
 800099e:	2300      	movs	r3, #0
 80009a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009a8:	81a3      	strh	r3, [r4, #12]
 80009aa:	2300      	movs	r3, #0
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	6923      	ldr	r3, [r4, #16]
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	81a3      	strh	r3, [r4, #12]
 80009ba:	6923      	ldr	r3, [r4, #16]
 80009bc:	b94b      	cbnz	r3, 80009d2 <__swsetup_r+0x7a>
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009c8:	d003      	beq.n	80009d2 <__swsetup_r+0x7a>
 80009ca:	4621      	mov	r1, r4
 80009cc:	4628      	mov	r0, r5
 80009ce:	f000 fa5f 	bl	8000e90 <__smakebuf_r>
 80009d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009d6:	f013 0201 	ands.w	r2, r3, #1
 80009da:	d00a      	beq.n	80009f2 <__swsetup_r+0x9a>
 80009dc:	2200      	movs	r2, #0
 80009de:	60a2      	str	r2, [r4, #8]
 80009e0:	6962      	ldr	r2, [r4, #20]
 80009e2:	4252      	negs	r2, r2
 80009e4:	61a2      	str	r2, [r4, #24]
 80009e6:	6922      	ldr	r2, [r4, #16]
 80009e8:	b942      	cbnz	r2, 80009fc <__swsetup_r+0xa4>
 80009ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009ee:	d1c5      	bne.n	800097c <__swsetup_r+0x24>
 80009f0:	bd38      	pop	{r3, r4, r5, pc}
 80009f2:	0799      	lsls	r1, r3, #30
 80009f4:	bf58      	it	pl
 80009f6:	6962      	ldrpl	r2, [r4, #20]
 80009f8:	60a2      	str	r2, [r4, #8]
 80009fa:	e7f4      	b.n	80009e6 <__swsetup_r+0x8e>
 80009fc:	2000      	movs	r0, #0
 80009fe:	e7f7      	b.n	80009f0 <__swsetup_r+0x98>
 8000a00:	2000000c 	.word	0x2000000c

08000a04 <memset>:
 8000a04:	4402      	add	r2, r0
 8000a06:	4603      	mov	r3, r0
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d100      	bne.n	8000a0e <memset+0xa>
 8000a0c:	4770      	bx	lr
 8000a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a12:	e7f9      	b.n	8000a08 <memset+0x4>

08000a14 <_close_r>:
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4d06      	ldr	r5, [pc, #24]	@ (8000a30 <_close_r+0x1c>)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	602b      	str	r3, [r5, #0]
 8000a20:	f7ff fd63 	bl	80004ea <_close>
 8000a24:	1c43      	adds	r3, r0, #1
 8000a26:	d102      	bne.n	8000a2e <_close_r+0x1a>
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	b103      	cbz	r3, 8000a2e <_close_r+0x1a>
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
 8000a30:	200001b8 	.word	0x200001b8

08000a34 <_lseek_r>:
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4d07      	ldr	r5, [pc, #28]	@ (8000a54 <_lseek_r+0x20>)
 8000a38:	4604      	mov	r4, r0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	602a      	str	r2, [r5, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f7ff fd78 	bl	8000538 <_lseek>
 8000a48:	1c43      	adds	r3, r0, #1
 8000a4a:	d102      	bne.n	8000a52 <_lseek_r+0x1e>
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	b103      	cbz	r3, 8000a52 <_lseek_r+0x1e>
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
 8000a54:	200001b8 	.word	0x200001b8

08000a58 <_read_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	4d07      	ldr	r5, [pc, #28]	@ (8000a78 <_read_r+0x20>)
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	4611      	mov	r1, r2
 8000a62:	2200      	movs	r2, #0
 8000a64:	602a      	str	r2, [r5, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	f7ff fd06 	bl	8000478 <_read>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	d102      	bne.n	8000a76 <_read_r+0x1e>
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	b103      	cbz	r3, 8000a76 <_read_r+0x1e>
 8000a74:	6023      	str	r3, [r4, #0]
 8000a76:	bd38      	pop	{r3, r4, r5, pc}
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <_write_r>:
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4d07      	ldr	r5, [pc, #28]	@ (8000a9c <_write_r+0x20>)
 8000a80:	4604      	mov	r4, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4611      	mov	r1, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	602a      	str	r2, [r5, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	f7ff fd11 	bl	80004b2 <_write>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	d102      	bne.n	8000a9a <_write_r+0x1e>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	b103      	cbz	r3, 8000a9a <_write_r+0x1e>
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
 8000a9c:	200001b8 	.word	0x200001b8

08000aa0 <__errno>:
 8000aa0:	4b01      	ldr	r3, [pc, #4]	@ (8000aa8 <__errno+0x8>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4d0d      	ldr	r5, [pc, #52]	@ (8000ae4 <__libc_init_array+0x38>)
 8000ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ae8 <__libc_init_array+0x3c>)
 8000ab2:	1b64      	subs	r4, r4, r5
 8000ab4:	10a4      	asrs	r4, r4, #2
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	4d0b      	ldr	r5, [pc, #44]	@ (8000aec <__libc_init_array+0x40>)
 8000abe:	4c0c      	ldr	r4, [pc, #48]	@ (8000af0 <__libc_init_array+0x44>)
 8000ac0:	f000 fa54 	bl	8000f6c <_init>
 8000ac4:	1b64      	subs	r4, r4, r5
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000fc4 	.word	0x08000fc4
 8000ae8:	08000fc4 	.word	0x08000fc4
 8000aec:	08000fc4 	.word	0x08000fc4
 8000af0:	08000fc8 	.word	0x08000fc8

08000af4 <__retarget_lock_init_recursive>:
 8000af4:	4770      	bx	lr

08000af6 <__retarget_lock_acquire_recursive>:
 8000af6:	4770      	bx	lr

08000af8 <__retarget_lock_release_recursive>:
 8000af8:	4770      	bx	lr
	...

08000afc <_free_r>:
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	4605      	mov	r5, r0
 8000b00:	2900      	cmp	r1, #0
 8000b02:	d041      	beq.n	8000b88 <_free_r+0x8c>
 8000b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b08:	1f0c      	subs	r4, r1, #4
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bfb8      	it	lt
 8000b0e:	18e4      	addlt	r4, r4, r3
 8000b10:	f000 f8e0 	bl	8000cd4 <__malloc_lock>
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <_free_r+0x90>)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	b933      	cbnz	r3, 8000b28 <_free_r+0x2c>
 8000b1a:	6063      	str	r3, [r4, #4]
 8000b1c:	6014      	str	r4, [r2, #0]
 8000b1e:	4628      	mov	r0, r5
 8000b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b24:	f000 b8dc 	b.w	8000ce0 <__malloc_unlock>
 8000b28:	42a3      	cmp	r3, r4
 8000b2a:	d908      	bls.n	8000b3e <_free_r+0x42>
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	1821      	adds	r1, r4, r0
 8000b30:	428b      	cmp	r3, r1
 8000b32:	bf01      	itttt	eq
 8000b34:	6819      	ldreq	r1, [r3, #0]
 8000b36:	685b      	ldreq	r3, [r3, #4]
 8000b38:	1809      	addeq	r1, r1, r0
 8000b3a:	6021      	streq	r1, [r4, #0]
 8000b3c:	e7ed      	b.n	8000b1a <_free_r+0x1e>
 8000b3e:	461a      	mov	r2, r3
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	b10b      	cbz	r3, 8000b48 <_free_r+0x4c>
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	d9fa      	bls.n	8000b3e <_free_r+0x42>
 8000b48:	6811      	ldr	r1, [r2, #0]
 8000b4a:	1850      	adds	r0, r2, r1
 8000b4c:	42a0      	cmp	r0, r4
 8000b4e:	d10b      	bne.n	8000b68 <_free_r+0x6c>
 8000b50:	6820      	ldr	r0, [r4, #0]
 8000b52:	4401      	add	r1, r0
 8000b54:	1850      	adds	r0, r2, r1
 8000b56:	4283      	cmp	r3, r0
 8000b58:	6011      	str	r1, [r2, #0]
 8000b5a:	d1e0      	bne.n	8000b1e <_free_r+0x22>
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	6053      	str	r3, [r2, #4]
 8000b62:	4408      	add	r0, r1
 8000b64:	6010      	str	r0, [r2, #0]
 8000b66:	e7da      	b.n	8000b1e <_free_r+0x22>
 8000b68:	d902      	bls.n	8000b70 <_free_r+0x74>
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	602b      	str	r3, [r5, #0]
 8000b6e:	e7d6      	b.n	8000b1e <_free_r+0x22>
 8000b70:	6820      	ldr	r0, [r4, #0]
 8000b72:	1821      	adds	r1, r4, r0
 8000b74:	428b      	cmp	r3, r1
 8000b76:	bf04      	itt	eq
 8000b78:	6819      	ldreq	r1, [r3, #0]
 8000b7a:	685b      	ldreq	r3, [r3, #4]
 8000b7c:	6063      	str	r3, [r4, #4]
 8000b7e:	bf04      	itt	eq
 8000b80:	1809      	addeq	r1, r1, r0
 8000b82:	6021      	streq	r1, [r4, #0]
 8000b84:	6054      	str	r4, [r2, #4]
 8000b86:	e7ca      	b.n	8000b1e <_free_r+0x22>
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c4 	.word	0x200001c4

08000b90 <sbrk_aligned>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	4e0f      	ldr	r6, [pc, #60]	@ (8000bd0 <sbrk_aligned+0x40>)
 8000b94:	460c      	mov	r4, r1
 8000b96:	6831      	ldr	r1, [r6, #0]
 8000b98:	4605      	mov	r5, r0
 8000b9a:	b911      	cbnz	r1, 8000ba2 <sbrk_aligned+0x12>
 8000b9c:	f000 f9d6 	bl	8000f4c <_sbrk_r>
 8000ba0:	6030      	str	r0, [r6, #0]
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f9d1 	bl	8000f4c <_sbrk_r>
 8000baa:	1c43      	adds	r3, r0, #1
 8000bac:	d103      	bne.n	8000bb6 <sbrk_aligned+0x26>
 8000bae:	f04f 34ff 	mov.w	r4, #4294967295
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
 8000bb6:	1cc4      	adds	r4, r0, #3
 8000bb8:	f024 0403 	bic.w	r4, r4, #3
 8000bbc:	42a0      	cmp	r0, r4
 8000bbe:	d0f8      	beq.n	8000bb2 <sbrk_aligned+0x22>
 8000bc0:	1a21      	subs	r1, r4, r0
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	f000 f9c2 	bl	8000f4c <_sbrk_r>
 8000bc8:	3001      	adds	r0, #1
 8000bca:	d1f2      	bne.n	8000bb2 <sbrk_aligned+0x22>
 8000bcc:	e7ef      	b.n	8000bae <sbrk_aligned+0x1e>
 8000bce:	bf00      	nop
 8000bd0:	200001c0 	.word	0x200001c0

08000bd4 <_malloc_r>:
 8000bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd8:	1ccd      	adds	r5, r1, #3
 8000bda:	f025 0503 	bic.w	r5, r5, #3
 8000bde:	3508      	adds	r5, #8
 8000be0:	2d0c      	cmp	r5, #12
 8000be2:	bf38      	it	cc
 8000be4:	250c      	movcc	r5, #12
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	4606      	mov	r6, r0
 8000bea:	db01      	blt.n	8000bf0 <_malloc_r+0x1c>
 8000bec:	42a9      	cmp	r1, r5
 8000bee:	d904      	bls.n	8000bfa <_malloc_r+0x26>
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	6033      	str	r3, [r6, #0]
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cd0 <_malloc_r+0xfc>
 8000bfe:	f000 f869 	bl	8000cd4 <__malloc_lock>
 8000c02:	f8d8 3000 	ldr.w	r3, [r8]
 8000c06:	461c      	mov	r4, r3
 8000c08:	bb44      	cbnz	r4, 8000c5c <_malloc_r+0x88>
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff ffbf 	bl	8000b90 <sbrk_aligned>
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	4604      	mov	r4, r0
 8000c16:	d158      	bne.n	8000cca <_malloc_r+0xf6>
 8000c18:	f8d8 4000 	ldr.w	r4, [r8]
 8000c1c:	4627      	mov	r7, r4
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d143      	bne.n	8000caa <_malloc_r+0xd6>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d04b      	beq.n	8000cbe <_malloc_r+0xea>
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	eb04 0903 	add.w	r9, r4, r3
 8000c30:	f000 f98c 	bl	8000f4c <_sbrk_r>
 8000c34:	4581      	cmp	r9, r0
 8000c36:	d142      	bne.n	8000cbe <_malloc_r+0xea>
 8000c38:	6821      	ldr	r1, [r4, #0]
 8000c3a:	1a6d      	subs	r5, r5, r1
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f7ff ffa6 	bl	8000b90 <sbrk_aligned>
 8000c44:	3001      	adds	r0, #1
 8000c46:	d03a      	beq.n	8000cbe <_malloc_r+0xea>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	442b      	add	r3, r5
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	bb62      	cbnz	r2, 8000cb0 <_malloc_r+0xdc>
 8000c56:	f8c8 7000 	str.w	r7, [r8]
 8000c5a:	e00f      	b.n	8000c7c <_malloc_r+0xa8>
 8000c5c:	6822      	ldr	r2, [r4, #0]
 8000c5e:	1b52      	subs	r2, r2, r5
 8000c60:	d420      	bmi.n	8000ca4 <_malloc_r+0xd0>
 8000c62:	2a0b      	cmp	r2, #11
 8000c64:	d917      	bls.n	8000c96 <_malloc_r+0xc2>
 8000c66:	1961      	adds	r1, r4, r5
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	6025      	str	r5, [r4, #0]
 8000c6c:	bf18      	it	ne
 8000c6e:	6059      	strne	r1, [r3, #4]
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	bf08      	it	eq
 8000c74:	f8c8 1000 	streq.w	r1, [r8]
 8000c78:	5162      	str	r2, [r4, r5]
 8000c7a:	604b      	str	r3, [r1, #4]
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f000 f82f 	bl	8000ce0 <__malloc_unlock>
 8000c82:	f104 000b 	add.w	r0, r4, #11
 8000c86:	1d23      	adds	r3, r4, #4
 8000c88:	f020 0007 	bic.w	r0, r0, #7
 8000c8c:	1ac2      	subs	r2, r0, r3
 8000c8e:	bf1c      	itt	ne
 8000c90:	1a1b      	subne	r3, r3, r0
 8000c92:	50a3      	strne	r3, [r4, r2]
 8000c94:	e7af      	b.n	8000bf6 <_malloc_r+0x22>
 8000c96:	6862      	ldr	r2, [r4, #4]
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	bf0c      	ite	eq
 8000c9c:	f8c8 2000 	streq.w	r2, [r8]
 8000ca0:	605a      	strne	r2, [r3, #4]
 8000ca2:	e7eb      	b.n	8000c7c <_malloc_r+0xa8>
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	6864      	ldr	r4, [r4, #4]
 8000ca8:	e7ae      	b.n	8000c08 <_malloc_r+0x34>
 8000caa:	463c      	mov	r4, r7
 8000cac:	687f      	ldr	r7, [r7, #4]
 8000cae:	e7b6      	b.n	8000c1e <_malloc_r+0x4a>
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d1fb      	bne.n	8000cb0 <_malloc_r+0xdc>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6053      	str	r3, [r2, #4]
 8000cbc:	e7de      	b.n	8000c7c <_malloc_r+0xa8>
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6033      	str	r3, [r6, #0]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f000 f80c 	bl	8000ce0 <__malloc_unlock>
 8000cc8:	e794      	b.n	8000bf4 <_malloc_r+0x20>
 8000cca:	6005      	str	r5, [r0, #0]
 8000ccc:	e7d6      	b.n	8000c7c <_malloc_r+0xa8>
 8000cce:	bf00      	nop
 8000cd0:	200001c4 	.word	0x200001c4

08000cd4 <__malloc_lock>:
 8000cd4:	4801      	ldr	r0, [pc, #4]	@ (8000cdc <__malloc_lock+0x8>)
 8000cd6:	f7ff bf0e 	b.w	8000af6 <__retarget_lock_acquire_recursive>
 8000cda:	bf00      	nop
 8000cdc:	200001bc 	.word	0x200001bc

08000ce0 <__malloc_unlock>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	@ (8000ce8 <__malloc_unlock+0x8>)
 8000ce2:	f7ff bf09 	b.w	8000af8 <__retarget_lock_release_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200001bc 	.word	0x200001bc

08000cec <__sflush_r>:
 8000cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	0716      	lsls	r6, r2, #28
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	d454      	bmi.n	8000da6 <__sflush_r+0xba>
 8000cfc:	684b      	ldr	r3, [r1, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dc02      	bgt.n	8000d08 <__sflush_r+0x1c>
 8000d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	dd48      	ble.n	8000d9a <__sflush_r+0xae>
 8000d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d045      	beq.n	8000d9a <__sflush_r+0xae>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d14:	682f      	ldr	r7, [r5, #0]
 8000d16:	6a21      	ldr	r1, [r4, #32]
 8000d18:	602b      	str	r3, [r5, #0]
 8000d1a:	d030      	beq.n	8000d7e <__sflush_r+0x92>
 8000d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d1e:	89a3      	ldrh	r3, [r4, #12]
 8000d20:	0759      	lsls	r1, r3, #29
 8000d22:	d505      	bpl.n	8000d30 <__sflush_r+0x44>
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d2a:	b10b      	cbz	r3, 8000d30 <__sflush_r+0x44>
 8000d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	2300      	movs	r3, #0
 8000d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d34:	6a21      	ldr	r1, [r4, #32]
 8000d36:	4628      	mov	r0, r5
 8000d38:	47b0      	blx	r6
 8000d3a:	1c43      	adds	r3, r0, #1
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	d106      	bne.n	8000d4e <__sflush_r+0x62>
 8000d40:	6829      	ldr	r1, [r5, #0]
 8000d42:	291d      	cmp	r1, #29
 8000d44:	d82b      	bhi.n	8000d9e <__sflush_r+0xb2>
 8000d46:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <__sflush_r+0x104>)
 8000d48:	410a      	asrs	r2, r1
 8000d4a:	07d6      	lsls	r6, r2, #31
 8000d4c:	d427      	bmi.n	8000d9e <__sflush_r+0xb2>
 8000d4e:	2200      	movs	r2, #0
 8000d50:	6062      	str	r2, [r4, #4]
 8000d52:	04d9      	lsls	r1, r3, #19
 8000d54:	6922      	ldr	r2, [r4, #16]
 8000d56:	6022      	str	r2, [r4, #0]
 8000d58:	d504      	bpl.n	8000d64 <__sflush_r+0x78>
 8000d5a:	1c42      	adds	r2, r0, #1
 8000d5c:	d101      	bne.n	8000d62 <__sflush_r+0x76>
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	b903      	cbnz	r3, 8000d64 <__sflush_r+0x78>
 8000d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d66:	602f      	str	r7, [r5, #0]
 8000d68:	b1b9      	cbz	r1, 8000d9a <__sflush_r+0xae>
 8000d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d002      	beq.n	8000d78 <__sflush_r+0x8c>
 8000d72:	4628      	mov	r0, r5
 8000d74:	f7ff fec2 	bl	8000afc <_free_r>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d7c:	e00d      	b.n	8000d9a <__sflush_r+0xae>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4628      	mov	r0, r5
 8000d82:	47b0      	blx	r6
 8000d84:	4602      	mov	r2, r0
 8000d86:	1c50      	adds	r0, r2, #1
 8000d88:	d1c9      	bne.n	8000d1e <__sflush_r+0x32>
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0c6      	beq.n	8000d1e <__sflush_r+0x32>
 8000d90:	2b1d      	cmp	r3, #29
 8000d92:	d001      	beq.n	8000d98 <__sflush_r+0xac>
 8000d94:	2b16      	cmp	r3, #22
 8000d96:	d11e      	bne.n	8000dd6 <__sflush_r+0xea>
 8000d98:	602f      	str	r7, [r5, #0]
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e022      	b.n	8000de4 <__sflush_r+0xf8>
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	e01b      	b.n	8000dde <__sflush_r+0xf2>
 8000da6:	690f      	ldr	r7, [r1, #16]
 8000da8:	2f00      	cmp	r7, #0
 8000daa:	d0f6      	beq.n	8000d9a <__sflush_r+0xae>
 8000dac:	0793      	lsls	r3, r2, #30
 8000dae:	680e      	ldr	r6, [r1, #0]
 8000db0:	bf08      	it	eq
 8000db2:	694b      	ldreq	r3, [r1, #20]
 8000db4:	600f      	str	r7, [r1, #0]
 8000db6:	bf18      	it	ne
 8000db8:	2300      	movne	r3, #0
 8000dba:	eba6 0807 	sub.w	r8, r6, r7
 8000dbe:	608b      	str	r3, [r1, #8]
 8000dc0:	f1b8 0f00 	cmp.w	r8, #0
 8000dc4:	dde9      	ble.n	8000d9a <__sflush_r+0xae>
 8000dc6:	6a21      	ldr	r1, [r4, #32]
 8000dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000dca:	4643      	mov	r3, r8
 8000dcc:	463a      	mov	r2, r7
 8000dce:	4628      	mov	r0, r5
 8000dd0:	47b0      	blx	r6
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	dc08      	bgt.n	8000de8 <__sflush_r+0xfc>
 8000dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dde:	81a3      	strh	r3, [r4, #12]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000de8:	4407      	add	r7, r0
 8000dea:	eba8 0800 	sub.w	r8, r8, r0
 8000dee:	e7e7      	b.n	8000dc0 <__sflush_r+0xd4>
 8000df0:	dfbffffe 	.word	0xdfbffffe

08000df4 <_fflush_r>:
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	690b      	ldr	r3, [r1, #16]
 8000df8:	4605      	mov	r5, r0
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	b913      	cbnz	r3, 8000e04 <_fflush_r+0x10>
 8000dfe:	2500      	movs	r5, #0
 8000e00:	4628      	mov	r0, r5
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	b118      	cbz	r0, 8000e0e <_fflush_r+0x1a>
 8000e06:	6a03      	ldr	r3, [r0, #32]
 8000e08:	b90b      	cbnz	r3, 8000e0e <_fflush_r+0x1a>
 8000e0a:	f7ff fc8f 	bl	800072c <__sinit>
 8000e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f3      	beq.n	8000dfe <_fflush_r+0xa>
 8000e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e18:	07d0      	lsls	r0, r2, #31
 8000e1a:	d404      	bmi.n	8000e26 <_fflush_r+0x32>
 8000e1c:	0599      	lsls	r1, r3, #22
 8000e1e:	d402      	bmi.n	8000e26 <_fflush_r+0x32>
 8000e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e22:	f7ff fe68 	bl	8000af6 <__retarget_lock_acquire_recursive>
 8000e26:	4628      	mov	r0, r5
 8000e28:	4621      	mov	r1, r4
 8000e2a:	f7ff ff5f 	bl	8000cec <__sflush_r>
 8000e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e30:	07da      	lsls	r2, r3, #31
 8000e32:	4605      	mov	r5, r0
 8000e34:	d4e4      	bmi.n	8000e00 <_fflush_r+0xc>
 8000e36:	89a3      	ldrh	r3, [r4, #12]
 8000e38:	059b      	lsls	r3, r3, #22
 8000e3a:	d4e1      	bmi.n	8000e00 <_fflush_r+0xc>
 8000e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e3e:	f7ff fe5b 	bl	8000af8 <__retarget_lock_release_recursive>
 8000e42:	e7dd      	b.n	8000e00 <_fflush_r+0xc>

08000e44 <__swhatbuf_r>:
 8000e44:	b570      	push	{r4, r5, r6, lr}
 8000e46:	460c      	mov	r4, r1
 8000e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	b096      	sub	sp, #88	@ 0x58
 8000e50:	4615      	mov	r5, r2
 8000e52:	461e      	mov	r6, r3
 8000e54:	da0d      	bge.n	8000e72 <__swhatbuf_r+0x2e>
 8000e56:	89a3      	ldrh	r3, [r4, #12]
 8000e58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2340      	movne	r3, #64	@ 0x40
 8000e64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e68:	2000      	movs	r0, #0
 8000e6a:	6031      	str	r1, [r6, #0]
 8000e6c:	602b      	str	r3, [r5, #0]
 8000e6e:	b016      	add	sp, #88	@ 0x58
 8000e70:	bd70      	pop	{r4, r5, r6, pc}
 8000e72:	466a      	mov	r2, sp
 8000e74:	f000 f848 	bl	8000f08 <_fstat_r>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	dbec      	blt.n	8000e56 <__swhatbuf_r+0x12>
 8000e7c:	9901      	ldr	r1, [sp, #4]
 8000e7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e86:	4259      	negs	r1, r3
 8000e88:	4159      	adcs	r1, r3
 8000e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e8e:	e7eb      	b.n	8000e68 <__swhatbuf_r+0x24>

08000e90 <__smakebuf_r>:
 8000e90:	898b      	ldrh	r3, [r1, #12]
 8000e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e94:	079d      	lsls	r5, r3, #30
 8000e96:	4606      	mov	r6, r0
 8000e98:	460c      	mov	r4, r1
 8000e9a:	d507      	bpl.n	8000eac <__smakebuf_r+0x1c>
 8000e9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	6123      	str	r3, [r4, #16]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	6163      	str	r3, [r4, #20]
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eac:	ab01      	add	r3, sp, #4
 8000eae:	466a      	mov	r2, sp
 8000eb0:	f7ff ffc8 	bl	8000e44 <__swhatbuf_r>
 8000eb4:	9f00      	ldr	r7, [sp, #0]
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	4639      	mov	r1, r7
 8000eba:	4630      	mov	r0, r6
 8000ebc:	f7ff fe8a 	bl	8000bd4 <_malloc_r>
 8000ec0:	b948      	cbnz	r0, 8000ed6 <__smakebuf_r+0x46>
 8000ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ec6:	059a      	lsls	r2, r3, #22
 8000ec8:	d4ee      	bmi.n	8000ea8 <__smakebuf_r+0x18>
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	81a3      	strh	r3, [r4, #12]
 8000ed4:	e7e2      	b.n	8000e9c <__smakebuf_r+0xc>
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	6020      	str	r0, [r4, #0]
 8000eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ede:	81a3      	strh	r3, [r4, #12]
 8000ee0:	9b01      	ldr	r3, [sp, #4]
 8000ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000ee6:	b15b      	cbz	r3, 8000f00 <__smakebuf_r+0x70>
 8000ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eec:	4630      	mov	r0, r6
 8000eee:	f000 f81d 	bl	8000f2c <_isatty_r>
 8000ef2:	b128      	cbz	r0, 8000f00 <__smakebuf_r+0x70>
 8000ef4:	89a3      	ldrh	r3, [r4, #12]
 8000ef6:	f023 0303 	bic.w	r3, r3, #3
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	81a3      	strh	r3, [r4, #12]
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	431d      	orrs	r5, r3
 8000f04:	81a5      	strh	r5, [r4, #12]
 8000f06:	e7cf      	b.n	8000ea8 <__smakebuf_r+0x18>

08000f08 <_fstat_r>:
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4d07      	ldr	r5, [pc, #28]	@ (8000f28 <_fstat_r+0x20>)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	602b      	str	r3, [r5, #0]
 8000f16:	f7ff faf4 	bl	8000502 <_fstat>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	d102      	bne.n	8000f24 <_fstat_r+0x1c>
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	b103      	cbz	r3, 8000f24 <_fstat_r+0x1c>
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	200001b8 	.word	0x200001b8

08000f2c <_isatty_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d06      	ldr	r5, [pc, #24]	@ (8000f48 <_isatty_r+0x1c>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	f7ff faf3 	bl	8000522 <_isatty>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d102      	bne.n	8000f46 <_isatty_r+0x1a>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	b103      	cbz	r3, 8000f46 <_isatty_r+0x1a>
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	200001b8 	.word	0x200001b8

08000f4c <_sbrk_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d06      	ldr	r5, [pc, #24]	@ (8000f68 <_sbrk_r+0x1c>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	602b      	str	r3, [r5, #0]
 8000f58:	f7ff fafc 	bl	8000554 <_sbrk>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d102      	bne.n	8000f66 <_sbrk_r+0x1a>
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	b103      	cbz	r3, 8000f66 <_sbrk_r+0x1a>
 8000f64:	6023      	str	r3, [r4, #0]
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	200001b8 	.word	0x200001b8

08000f6c <_init>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr

08000f78 <_fini>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr
