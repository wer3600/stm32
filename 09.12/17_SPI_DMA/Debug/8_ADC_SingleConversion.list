
8_ADC_SingleConversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a4  080031a4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ac  080031ac  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  0800321c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800321c  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006688  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c4  00000000  00000000  0000b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000546  00000000  00000000  0000d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bb3  00000000  00000000  0000da5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000908d  00000000  00000000  00024611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c309  00000000  00000000  0002d69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b99a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  000b99ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bbdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003134 	.word	0x08003134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003134 	.word	0x08003134

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fcb9 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fcbb 	bl	8000f5e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fc91 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e033      	b.n	80006e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f831 	bl	80006ea <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d118      	bne.n	80006d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80006aa:	f023 0302 	bic.w	r3, r3, #2
 80006ae:	f043 0202 	orr.w	r2, r3, #2
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fa7c 	bl	8000bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0201 	orr.w	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d2:	e001      	b.n	80006d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000712:	2b01      	cmp	r3, #1
 8000714:	d101      	bne.n	800071a <HAL_ADC_Start+0x1a>
 8000716:	2302      	movs	r3, #2
 8000718:	e08a      	b.n	8000830 <HAL_ADC_Start+0x130>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b01      	cmp	r3, #1
 800072e:	d018      	beq.n	8000762 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0201 	orr.w	r2, r2, #1
 800073e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000740:	4b3e      	ldr	r3, [pc, #248]	@ (800083c <HAL_ADC_Start+0x13c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a3e      	ldr	r2, [pc, #248]	@ (8000840 <HAL_ADC_Start+0x140>)
 8000746:	fba2 2303 	umull	r2, r3, r2, r3
 800074a:	0c9a      	lsrs	r2, r3, #18
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000754:	e002      	b.n	800075c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	3b01      	subs	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f9      	bne.n	8000756 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b01      	cmp	r3, #1
 800076e:	d15e      	bne.n	800082e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800078e:	2b00      	cmp	r3, #0
 8000790:	d007      	beq.n	80007a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800079a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007ae:	d106      	bne.n	80007be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b4:	f023 0206 	bic.w	r2, r3, #6
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80007bc:	e002      	b.n	80007c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <HAL_ADC_Start+0x144>)
 80007ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80007d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10f      	bne.n	8000806 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d11c      	bne.n	800082e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e013      	b.n	800082e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0f      	ldr	r2, [pc, #60]	@ (8000848 <HAL_ADC_Start+0x148>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d10e      	bne.n	800082e <HAL_ADC_Start+0x12e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d107      	bne.n	800082e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800082c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	431bde83 	.word	0x431bde83
 8000844:	40012300 	.word	0x40012300
 8000848:	40012000 	.word	0x40012000

0800084c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000868:	d113      	bne.n	8000892 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000878:	d10b      	bne.n	8000892 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f043 0220 	orr.w	r2, r3, #32
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e05c      	b.n	800094c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000892:	f7ff fedb 	bl	800064c <HAL_GetTick>
 8000896:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000898:	e01a      	b.n	80008d0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d016      	beq.n	80008d0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d007      	beq.n	80008b8 <HAL_ADC_PollForConversion+0x6c>
 80008a8:	f7ff fed0 	bl	800064c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d20b      	bcs.n	80008d0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f043 0204 	orr.w	r2, r3, #4
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 80008cc:	2303      	movs	r3, #3
 80008ce:	e03d      	b.n	800094c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d1dd      	bne.n	800089a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f06f 0212 	mvn.w	r2, #18
 80008e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d123      	bne.n	800094a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000906:	2b00      	cmp	r3, #0
 8000908:	d11f      	bne.n	800094a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000910:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000914:	2b00      	cmp	r3, #0
 8000916:	d006      	beq.n	8000926 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000922:	2b00      	cmp	r3, #0
 8000924:	d111      	bne.n	800094a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f043 0201 	orr.w	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <HAL_ADC_ConfigChannel+0x1c>
 8000988:	2302      	movs	r3, #2
 800098a:	e105      	b.n	8000b98 <HAL_ADC_ConfigChannel+0x228>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d925      	bls.n	80009e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68d9      	ldr	r1, [r3, #12]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	461a      	mov	r2, r3
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	3b1e      	subs	r3, #30
 80009b2:	2207      	movs	r2, #7
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43da      	mvns	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	400a      	ands	r2, r1
 80009c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68d9      	ldr	r1, [r3, #12]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4403      	add	r3, r0
 80009da:	3b1e      	subs	r3, #30
 80009dc:	409a      	lsls	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	e022      	b.n	8000a2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6919      	ldr	r1, [r3, #16]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	2207      	movs	r2, #7
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	400a      	ands	r2, r1
 8000a0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6919      	ldr	r1, [r3, #16]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4403      	add	r3, r0
 8000a24:	409a      	lsls	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d824      	bhi.n	8000a80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	3b05      	subs	r3, #5
 8000a48:	221f      	movs	r2, #31
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	3b05      	subs	r3, #5
 8000a72:	fa00 f203 	lsl.w	r2, r0, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a7e:	e04c      	b.n	8000b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	d824      	bhi.n	8000ad2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	3b23      	subs	r3, #35	@ 0x23
 8000a9a:	221f      	movs	r2, #31
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3b23      	subs	r3, #35	@ 0x23
 8000ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ad0:	e023      	b.n	8000b1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3b41      	subs	r3, #65	@ 0x41
 8000ae4:	221f      	movs	r2, #31
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	400a      	ands	r2, r1
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3b41      	subs	r3, #65	@ 0x41
 8000b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <HAL_ADC_ConfigChannel+0x234>)
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a21      	ldr	r2, [pc, #132]	@ (8000ba8 <HAL_ADC_ConfigChannel+0x238>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d109      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x1cc>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b12      	cmp	r3, #18
 8000b2e:	d105      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <HAL_ADC_ConfigChannel+0x238>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d123      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x21e>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	d003      	beq.n	8000b56 <HAL_ADC_ConfigChannel+0x1e6>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b11      	cmp	r3, #17
 8000b54:	d11b      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b10      	cmp	r3, #16
 8000b68:	d111      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <HAL_ADC_ConfigChannel+0x23c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_ADC_ConfigChannel+0x240>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9a      	lsrs	r2, r3, #18
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b80:	e002      	b.n	8000b88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f9      	bne.n	8000b82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40012300 	.word	0x40012300
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	431bde83 	.word	0x431bde83

08000bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bbc:	4b79      	ldr	r3, [pc, #484]	@ (8000da4 <ADC_Init+0x1f0>)
 8000bbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6859      	ldr	r1, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	021a      	lsls	r2, r3, #8
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6859      	ldr	r1, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6899      	ldr	r1, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c46:	4a58      	ldr	r2, [pc, #352]	@ (8000da8 <ADC_Init+0x1f4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d022      	beq.n	8000c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6899      	ldr	r1, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	e00f      	b.n	8000cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0202 	bic.w	r2, r2, #2
 8000cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6899      	ldr	r1, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7e1b      	ldrb	r3, [r3, #24]
 8000ccc:	005a      	lsls	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d01b      	beq.n	8000d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000cee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6859      	ldr	r1, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	035a      	lsls	r2, r3, #13
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	e007      	b.n	8000d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	051a      	lsls	r2, r3, #20
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6899      	ldr	r1, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d6a:	025a      	lsls	r2, r3, #9
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6899      	ldr	r1, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	029a      	lsls	r2, r3, #10
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	609a      	str	r2, [r3, #8]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40012300 	.word	0x40012300
 8000da8:	0f000001 	.word	0x0f000001

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff47 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5c 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb0 	bl	8000ecc <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e159      	b.n	8001248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8148 	bne.w	8001242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_GPIO_Init+0x5a>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	2b11      	cmp	r3, #17
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0xfc>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b12      	cmp	r3, #18
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80a2 	beq.w	8001242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b57      	ldr	r3, [pc, #348]	@ (8001260 <HAL_GPIO_Init+0x2e8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	4a56      	ldr	r2, [pc, #344]	@ (8001260 <HAL_GPIO_Init+0x2e8>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800110c:	6453      	str	r3, [r2, #68]	@ 0x44
 800110e:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <HAL_GPIO_Init+0x2e8>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a52      	ldr	r2, [pc, #328]	@ (8001264 <HAL_GPIO_Init+0x2ec>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	@ (8001268 <HAL_GPIO_Init+0x2f0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x202>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a48      	ldr	r2, [pc, #288]	@ (800126c <HAL_GPIO_Init+0x2f4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x1fe>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a47      	ldr	r2, [pc, #284]	@ (8001270 <HAL_GPIO_Init+0x2f8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a46      	ldr	r2, [pc, #280]	@ (8001274 <HAL_GPIO_Init+0x2fc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x1f6>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a45      	ldr	r2, [pc, #276]	@ (8001278 <HAL_GPIO_Init+0x300>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x1f2>
 8001166:	2304      	movs	r3, #4
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x204>
 800116a:	2307      	movs	r3, #7
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x204>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x204>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x204>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x204>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	@ (8001264 <HAL_GPIO_Init+0x2ec>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119a:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_GPIO_Init+0x304>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011be:	4a2f      	ldr	r2, [pc, #188]	@ (800127c <HAL_GPIO_Init+0x304>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_GPIO_Init+0x304>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e8:	4a24      	ldr	r2, [pc, #144]	@ (800127c <HAL_GPIO_Init+0x304>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_GPIO_Init+0x304>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a1a      	ldr	r2, [pc, #104]	@ (800127c <HAL_GPIO_Init+0x304>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_GPIO_Init+0x304>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <HAL_GPIO_Init+0x304>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f aea2 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_RCC_GetHCLKFreq+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800129c:	f7ff fff0 	bl	8001280 <HAL_RCC_GetHCLKFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	0a9b      	lsrs	r3, r3, #10
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	4903      	ldr	r1, [pc, #12]	@ (80012bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	08003168 	.word	0x08003168

080012c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012c4:	f7ff ffdc 	bl	8001280 <HAL_RCC_GetHCLKFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	0b5b      	lsrs	r3, r3, #13
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	08003168 	.word	0x08003168

080012e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e03f      	b.n	800137a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f837 	bl	8001382 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	@ 0x24
 8001318:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800132a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f915 	bl	800155c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b088      	sub	sp, #32
 800139a:	af02      	add	r7, sp, #8
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	f040 8083 	bne.w	80014be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_UART_Transmit+0x2e>
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e07b      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_UART_Transmit+0x40>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e074      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2221      	movs	r2, #33	@ 0x21
 80013e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80013ec:	f7ff f92e 	bl	800064c <HAL_GetTick>
 80013f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	88fa      	ldrh	r2, [r7, #6]
 80013f6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8001406:	e042      	b.n	800148e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800141e:	d122      	bne.n	8001466 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2200      	movs	r2, #0
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f84c 	bl	80014c8 <UART_WaitOnFlagUntilTimeout>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e042      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800144c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3302      	adds	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	e017      	b.n	800148e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	e013      	b.n	800148e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f829 	bl	80014c8 <UART_WaitOnFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e01f      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1b7      	bne.n	8001408 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2200      	movs	r2, #0
 80014a0:	2140      	movs	r1, #64	@ 0x40
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f810 	bl	80014c8 <UART_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e006      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2220      	movs	r2, #32
 80014b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014d8:	e02c      	b.n	8001534 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d028      	beq.n	8001534 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80014e8:	f7ff f8b0 	bl	800064c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d21d      	bcs.n	8001534 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8001506:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e00f      	b.n	8001554 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4013      	ands	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	429a      	cmp	r2, r3
 8001550:	d0c3      	beq.n	80014da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001564:	af00      	add	r7, sp, #0
 8001566:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800156a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001576:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800157a:	68d9      	ldr	r1, [r3, #12]
 800157c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	ea40 0301 	orr.w	r3, r0, r1
 8001586:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001588:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	431a      	orrs	r2, r3
 8001596:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	431a      	orrs	r2, r3
 800159e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80015aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80015b6:	f021 010c 	bic.w	r1, r1, #12
 80015ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80015c4:	430b      	orrs	r3, r1
 80015c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80015d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015d8:	6999      	ldr	r1, [r3, #24]
 80015da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	ea40 0301 	orr.w	r3, r0, r1
 80015e4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015f0:	f040 824a 	bne.w	8001a88 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b96      	ldr	r3, [pc, #600]	@ (8001854 <UART_SetConfig+0x2f8>)
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d006      	beq.n	800160e <UART_SetConfig+0xb2>
 8001600:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b94      	ldr	r3, [pc, #592]	@ (8001858 <UART_SetConfig+0x2fc>)
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8129 	bne.w	8001860 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800160e:	f7ff fe57 	bl	80012c0 <HAL_RCC_GetPCLK2Freq>
 8001612:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001616:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800161a:	2200      	movs	r2, #0
 800161c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8001620:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8001624:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8001628:	4622      	mov	r2, r4
 800162a:	462b      	mov	r3, r5
 800162c:	1891      	adds	r1, r2, r2
 800162e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8001632:	415b      	adcs	r3, r3
 8001634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001638:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800163c:	4621      	mov	r1, r4
 800163e:	1851      	adds	r1, r2, r1
 8001640:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8001644:	4629      	mov	r1, r5
 8001646:	414b      	adcs	r3, r1
 8001648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8001658:	4649      	mov	r1, r9
 800165a:	00cb      	lsls	r3, r1, #3
 800165c:	4641      	mov	r1, r8
 800165e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001662:	4641      	mov	r1, r8
 8001664:	00ca      	lsls	r2, r1, #3
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	4603      	mov	r3, r0
 800166c:	4622      	mov	r2, r4
 800166e:	189b      	adds	r3, r3, r2
 8001670:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001674:	462b      	mov	r3, r5
 8001676:	460a      	mov	r2, r1
 8001678:	eb42 0303 	adc.w	r3, r2, r3
 800167c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001680:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800168c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001690:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8001694:	460b      	mov	r3, r1
 8001696:	18db      	adds	r3, r3, r3
 8001698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800169c:	4613      	mov	r3, r2
 800169e:	eb42 0303 	adc.w	r3, r2, r3
 80016a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80016a6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80016aa:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80016ae:	f7fe fde7 	bl	8000280 <__aeabi_uldivmod>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4b69      	ldr	r3, [pc, #420]	@ (800185c <UART_SetConfig+0x300>)
 80016b8:	fba3 2302 	umull	r2, r3, r3, r2
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	011c      	lsls	r4, r3, #4
 80016c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016c4:	2200      	movs	r2, #0
 80016c6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80016ca:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80016ce:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80016d2:	4642      	mov	r2, r8
 80016d4:	464b      	mov	r3, r9
 80016d6:	1891      	adds	r1, r2, r2
 80016d8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80016dc:	415b      	adcs	r3, r3
 80016de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80016e2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80016e6:	4641      	mov	r1, r8
 80016e8:	1851      	adds	r1, r2, r1
 80016ea:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80016ee:	4649      	mov	r1, r9
 80016f0:	414b      	adcs	r3, r1
 80016f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8001702:	4659      	mov	r1, fp
 8001704:	00cb      	lsls	r3, r1, #3
 8001706:	4651      	mov	r1, sl
 8001708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800170c:	4651      	mov	r1, sl
 800170e:	00ca      	lsls	r2, r1, #3
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	4603      	mov	r3, r0
 8001716:	4642      	mov	r2, r8
 8001718:	189b      	adds	r3, r3, r2
 800171a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800171e:	464b      	mov	r3, r9
 8001720:	460a      	mov	r2, r1
 8001722:	eb42 0303 	adc.w	r3, r2, r3
 8001726:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800172a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001736:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800173a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800173e:	460b      	mov	r3, r1
 8001740:	18db      	adds	r3, r3, r3
 8001742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001746:	4613      	mov	r3, r2
 8001748:	eb42 0303 	adc.w	r3, r2, r3
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001750:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001754:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8001758:	f7fe fd92 	bl	8000280 <__aeabi_uldivmod>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4611      	mov	r1, r2
 8001762:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <UART_SetConfig+0x300>)
 8001764:	fba3 2301 	umull	r2, r3, r3, r1
 8001768:	095b      	lsrs	r3, r3, #5
 800176a:	2264      	movs	r2, #100	@ 0x64
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	1acb      	subs	r3, r1, r3
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <UART_SetConfig+0x300>)
 800177a:	fba3 2302 	umull	r2, r3, r3, r2
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001786:	441c      	add	r4, r3
 8001788:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800178c:	2200      	movs	r2, #0
 800178e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001792:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001796:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800179a:	4642      	mov	r2, r8
 800179c:	464b      	mov	r3, r9
 800179e:	1891      	adds	r1, r2, r2
 80017a0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80017a4:	415b      	adcs	r3, r3
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80017aa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80017ae:	4641      	mov	r1, r8
 80017b0:	1851      	adds	r1, r2, r1
 80017b2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80017b6:	4649      	mov	r1, r9
 80017b8:	414b      	adcs	r3, r1
 80017ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80017ca:	4659      	mov	r1, fp
 80017cc:	00cb      	lsls	r3, r1, #3
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017d4:	4651      	mov	r1, sl
 80017d6:	00ca      	lsls	r2, r1, #3
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	4603      	mov	r3, r0
 80017de:	4642      	mov	r2, r8
 80017e0:	189b      	adds	r3, r3, r2
 80017e2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80017e6:	464b      	mov	r3, r9
 80017e8:	460a      	mov	r2, r1
 80017ea:	eb42 0303 	adc.w	r3, r2, r3
 80017ee:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80017f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80017fe:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001802:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8001806:	460b      	mov	r3, r1
 8001808:	18db      	adds	r3, r3, r3
 800180a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800180e:	4613      	mov	r3, r2
 8001810:	eb42 0303 	adc.w	r3, r2, r3
 8001814:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001818:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800181c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001820:	f7fe fd2e 	bl	8000280 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <UART_SetConfig+0x300>)
 800182a:	fba3 1302 	umull	r1, r3, r3, r2
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2164      	movs	r1, #100	@ 0x64
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	3332      	adds	r3, #50	@ 0x32
 800183c:	4a07      	ldr	r2, [pc, #28]	@ (800185c <UART_SetConfig+0x300>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	f003 0207 	and.w	r2, r3, #7
 8001848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4422      	add	r2, r4
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	e34a      	b.n	8001eea <UART_SetConfig+0x98e>
 8001854:	40011000 	.word	0x40011000
 8001858:	40011400 	.word	0x40011400
 800185c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001860:	f7ff fd1a 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
 8001864:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001868:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800186c:	2200      	movs	r2, #0
 800186e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001872:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8001876:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	1891      	adds	r1, r2, r2
 8001880:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001884:	415b      	adcs	r3, r3
 8001886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800188a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800188e:	4621      	mov	r1, r4
 8001890:	eb12 0a01 	adds.w	sl, r2, r1
 8001894:	4629      	mov	r1, r5
 8001896:	eb43 0b01 	adc.w	fp, r3, r1
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018ae:	4692      	mov	sl, r2
 80018b0:	469b      	mov	fp, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	eb1a 0303 	adds.w	r3, sl, r3
 80018b8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018bc:	462b      	mov	r3, r5
 80018be:	eb4b 0303 	adc.w	r3, fp, r3
 80018c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80018d2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80018d6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80018da:	460b      	mov	r3, r1
 80018dc:	18db      	adds	r3, r3, r3
 80018de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018e2:	4613      	mov	r3, r2
 80018e4:	eb42 0303 	adc.w	r3, r2, r3
 80018e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80018f0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80018f4:	f7fe fcc4 	bl	8000280 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <UART_SetConfig+0x528>)
 80018fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	011c      	lsls	r4, r3, #4
 8001906:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800190a:	2200      	movs	r2, #0
 800190c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001910:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8001914:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8001918:	4642      	mov	r2, r8
 800191a:	464b      	mov	r3, r9
 800191c:	1891      	adds	r1, r2, r2
 800191e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001920:	415b      	adcs	r3, r3
 8001922:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001924:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001928:	4641      	mov	r1, r8
 800192a:	1851      	adds	r1, r2, r1
 800192c:	6739      	str	r1, [r7, #112]	@ 0x70
 800192e:	4649      	mov	r1, r9
 8001930:	414b      	adcs	r3, r1
 8001932:	677b      	str	r3, [r7, #116]	@ 0x74
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8001940:	4659      	mov	r1, fp
 8001942:	00cb      	lsls	r3, r1, #3
 8001944:	4651      	mov	r1, sl
 8001946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800194a:	4651      	mov	r1, sl
 800194c:	00ca      	lsls	r2, r1, #3
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	4603      	mov	r3, r0
 8001954:	4642      	mov	r2, r8
 8001956:	189b      	adds	r3, r3, r2
 8001958:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800195c:	464b      	mov	r3, r9
 800195e:	460a      	mov	r2, r1
 8001960:	eb42 0303 	adc.w	r3, r2, r3
 8001964:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001968:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001974:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001978:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800197c:	460b      	mov	r3, r1
 800197e:	18db      	adds	r3, r3, r3
 8001980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001982:	4613      	mov	r3, r2
 8001984:	eb42 0303 	adc.w	r3, r2, r3
 8001988:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800198a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800198e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001992:	f7fe fc75 	bl	8000280 <__aeabi_uldivmod>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4611      	mov	r1, r2
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <UART_SetConfig+0x528>)
 800199e:	fba3 2301 	umull	r2, r3, r3, r1
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2264      	movs	r2, #100	@ 0x64
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	1acb      	subs	r3, r1, r3
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <UART_SetConfig+0x528>)
 80019b4:	fba3 2302 	umull	r2, r3, r3, r2
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80019c0:	441c      	add	r4, r3
 80019c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80019cc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80019d0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80019d4:	4642      	mov	r2, r8
 80019d6:	464b      	mov	r3, r9
 80019d8:	1891      	adds	r1, r2, r2
 80019da:	6639      	str	r1, [r7, #96]	@ 0x60
 80019dc:	415b      	adcs	r3, r3
 80019de:	667b      	str	r3, [r7, #100]	@ 0x64
 80019e0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019e4:	4641      	mov	r1, r8
 80019e6:	1851      	adds	r1, r2, r1
 80019e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80019ea:	4649      	mov	r1, r9
 80019ec:	414b      	adcs	r3, r1
 80019ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80019fc:	4659      	mov	r1, fp
 80019fe:	00cb      	lsls	r3, r1, #3
 8001a00:	4651      	mov	r1, sl
 8001a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a06:	4651      	mov	r1, sl
 8001a08:	00ca      	lsls	r2, r1, #3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4642      	mov	r2, r8
 8001a12:	189b      	adds	r3, r3, r2
 8001a14:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001a18:	464b      	mov	r3, r9
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	eb42 0303 	adc.w	r3, r2, r3
 8001a20:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001a24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001a30:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001a34:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8001a38:	460b      	mov	r3, r1
 8001a3a:	18db      	adds	r3, r3, r3
 8001a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a3e:	4613      	mov	r3, r2
 8001a40:	eb42 0303 	adc.w	r3, r2, r3
 8001a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a4a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8001a4e:	f7fe fc17 	bl	8000280 <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <UART_SetConfig+0x528>)
 8001a58:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	2164      	movs	r1, #100	@ 0x64
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	3332      	adds	r3, #50	@ 0x32
 8001a6a:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <UART_SetConfig+0x528>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4422      	add	r2, r4
 8001a7e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001a80:	e233      	b.n	8001eea <UART_SetConfig+0x98e>
 8001a82:	bf00      	nop
 8001a84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc4 <UART_SetConfig+0x768>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d006      	beq.n	8001aa2 <UART_SetConfig+0x546>
 8001a94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc8 <UART_SetConfig+0x76c>)
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8117 	bne.w	8001cd0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001aa2:	f7ff fc0d 	bl	80012c0 <HAL_RCC_GetPCLK2Freq>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001aaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001ab4:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8001ab8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001abc:	4622      	mov	r2, r4
 8001abe:	462b      	mov	r3, r5
 8001ac0:	1891      	adds	r1, r2, r2
 8001ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ac4:	415b      	adcs	r3, r3
 8001ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001acc:	4621      	mov	r1, r4
 8001ace:	eb12 0801 	adds.w	r8, r2, r1
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	eb43 0901 	adc.w	r9, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aec:	4690      	mov	r8, r2
 8001aee:	4699      	mov	r9, r3
 8001af0:	4623      	mov	r3, r4
 8001af2:	eb18 0303 	adds.w	r3, r8, r3
 8001af6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001afa:	462b      	mov	r3, r5
 8001afc:	eb49 0303 	adc.w	r3, r9, r3
 8001b00:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b10:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8001b20:	4629      	mov	r1, r5
 8001b22:	008b      	lsls	r3, r1, #2
 8001b24:	4621      	mov	r1, r4
 8001b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	008a      	lsls	r2, r1, #2
 8001b2e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8001b32:	f7fe fba5 	bl	8000280 <__aeabi_uldivmod>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4b64      	ldr	r3, [pc, #400]	@ (8001ccc <UART_SetConfig+0x770>)
 8001b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	011c      	lsls	r4, r3, #4
 8001b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001b4e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b52:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8001b56:	4642      	mov	r2, r8
 8001b58:	464b      	mov	r3, r9
 8001b5a:	1891      	adds	r1, r2, r2
 8001b5c:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b5e:	415b      	adcs	r3, r3
 8001b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b66:	4641      	mov	r1, r8
 8001b68:	1851      	adds	r1, r2, r1
 8001b6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	414b      	adcs	r3, r1
 8001b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8001b7e:	4659      	mov	r1, fp
 8001b80:	00cb      	lsls	r3, r1, #3
 8001b82:	4651      	mov	r1, sl
 8001b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b88:	4651      	mov	r1, sl
 8001b8a:	00ca      	lsls	r2, r1, #3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	4642      	mov	r2, r8
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	eb42 0303 	adc.w	r3, r2, r3
 8001ba2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001ba6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001bb2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	008b      	lsls	r3, r1, #2
 8001bc6:	4641      	mov	r1, r8
 8001bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bcc:	4641      	mov	r1, r8
 8001bce:	008a      	lsls	r2, r1, #2
 8001bd0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001bd4:	f7fe fb54 	bl	8000280 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ccc <UART_SetConfig+0x770>)
 8001be0:	fba3 2301 	umull	r2, r3, r3, r1
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	2264      	movs	r2, #100	@ 0x64
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	1acb      	subs	r3, r1, r3
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	3332      	adds	r3, #50	@ 0x32
 8001bf2:	4a36      	ldr	r2, [pc, #216]	@ (8001ccc <UART_SetConfig+0x770>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfe:	441c      	add	r4, r3
 8001c00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c04:	2200      	movs	r2, #0
 8001c06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001c0a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001c0e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8001c12:	4642      	mov	r2, r8
 8001c14:	464b      	mov	r3, r9
 8001c16:	1891      	adds	r1, r2, r2
 8001c18:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c1a:	415b      	adcs	r3, r3
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c22:	4641      	mov	r1, r8
 8001c24:	1851      	adds	r1, r2, r1
 8001c26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c28:	4649      	mov	r1, r9
 8001c2a:	414b      	adcs	r3, r1
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8001c3a:	4659      	mov	r1, fp
 8001c3c:	00cb      	lsls	r3, r1, #3
 8001c3e:	4651      	mov	r1, sl
 8001c40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c44:	4651      	mov	r1, sl
 8001c46:	00ca      	lsls	r2, r1, #3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4642      	mov	r2, r8
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c56:	464b      	mov	r3, r9
 8001c58:	460a      	mov	r2, r1
 8001c5a:	eb42 0303 	adc.w	r3, r2, r3
 8001c5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001c62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c6e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8001c7e:	4649      	mov	r1, r9
 8001c80:	008b      	lsls	r3, r1, #2
 8001c82:	4641      	mov	r1, r8
 8001c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c88:	4641      	mov	r1, r8
 8001c8a:	008a      	lsls	r2, r1, #2
 8001c8c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001c90:	f7fe faf6 	bl	8000280 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <UART_SetConfig+0x770>)
 8001c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2164      	movs	r1, #100	@ 0x64
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	3332      	adds	r3, #50	@ 0x32
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <UART_SetConfig+0x770>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4422      	add	r2, r4
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	e112      	b.n	8001eea <UART_SetConfig+0x98e>
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40011400 	.word	0x40011400
 8001ccc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cd0:	f7ff fae2 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
 8001cd4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001ce2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ce6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8001cea:	4642      	mov	r2, r8
 8001cec:	464b      	mov	r3, r9
 8001cee:	1891      	adds	r1, r2, r2
 8001cf0:	6239      	str	r1, [r7, #32]
 8001cf2:	415b      	adcs	r3, r3
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	1854      	adds	r4, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb43 0501 	adc.w	r5, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	00eb      	lsls	r3, r5, #3
 8001d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d12:	00e2      	lsls	r2, r4, #3
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	4643      	mov	r3, r8
 8001d1a:	18e3      	adds	r3, r4, r3
 8001d1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001d20:	464b      	mov	r3, r9
 8001d22:	eb45 0303 	adc.w	r3, r5, r3
 8001d26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001d2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001d36:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001d46:	4629      	mov	r1, r5
 8001d48:	008b      	lsls	r3, r1, #2
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d50:	4621      	mov	r1, r4
 8001d52:	008a      	lsls	r2, r1, #2
 8001d54:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001d58:	f7fe fa92 	bl	8000280 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <UART_SetConfig+0x99c>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011c      	lsls	r4, r3, #4
 8001d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001d74:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001d78:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	464b      	mov	r3, r9
 8001d80:	1891      	adds	r1, r2, r2
 8001d82:	61b9      	str	r1, [r7, #24]
 8001d84:	415b      	adcs	r3, r3
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	1851      	adds	r1, r2, r1
 8001d90:	6139      	str	r1, [r7, #16]
 8001d92:	4649      	mov	r1, r9
 8001d94:	414b      	adcs	r3, r1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da4:	4659      	mov	r1, fp
 8001da6:	00cb      	lsls	r3, r1, #3
 8001da8:	4651      	mov	r1, sl
 8001daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dae:	4651      	mov	r1, sl
 8001db0:	00ca      	lsls	r2, r1, #3
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	4642      	mov	r2, r8
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001dc0:	464b      	mov	r3, r9
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	eb42 0303 	adc.w	r3, r2, r3
 8001dc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001dcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001dd8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001de8:	4649      	mov	r1, r9
 8001dea:	008b      	lsls	r3, r1, #2
 8001dec:	4641      	mov	r1, r8
 8001dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001df2:	4641      	mov	r1, r8
 8001df4:	008a      	lsls	r2, r1, #2
 8001df6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001dfa:	f7fe fa41 	bl	8000280 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef8 <UART_SetConfig+0x99c>)
 8001e06:	fba3 2301 	umull	r2, r3, r3, r1
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2264      	movs	r2, #100	@ 0x64
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	1acb      	subs	r3, r1, r3
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	3332      	adds	r3, #50	@ 0x32
 8001e18:	4a37      	ldr	r2, [pc, #220]	@ (8001ef8 <UART_SetConfig+0x99c>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e24:	441c      	add	r4, r3
 8001e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e30:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e34:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001e38:	4642      	mov	r2, r8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	1891      	adds	r1, r2, r2
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	415b      	adcs	r3, r3
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e48:	4641      	mov	r1, r8
 8001e4a:	1851      	adds	r1, r2, r1
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	4649      	mov	r1, r9
 8001e50:	414b      	adcs	r3, r1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e60:	4659      	mov	r1, fp
 8001e62:	00cb      	lsls	r3, r1, #3
 8001e64:	4651      	mov	r1, sl
 8001e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	00ca      	lsls	r2, r1, #3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	4642      	mov	r2, r8
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e7c:	464b      	mov	r3, r9
 8001e7e:	460a      	mov	r2, r1
 8001e80:	eb42 0303 	adc.w	r3, r2, r3
 8001e84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	008b      	lsls	r3, r1, #2
 8001ea8:	4641      	mov	r1, r8
 8001eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eae:	4641      	mov	r1, r8
 8001eb0:	008a      	lsls	r2, r1, #2
 8001eb2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001eb6:	f7fe f9e3 	bl	8000280 <__aeabi_uldivmod>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <UART_SetConfig+0x99c>)
 8001ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	2164      	movs	r1, #100	@ 0x64
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	3332      	adds	r3, #50	@ 0x32
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <UART_SetConfig+0x99c>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4422      	add	r2, r4
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	e7ff      	b.n	8001eea <UART_SetConfig+0x98e>
 8001eea:	bf00      	nop
 8001eec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ef6:	bf00      	nop
 8001ef8:	51eb851f 	.word	0x51eb851f

08001efc <pa0_adc_read>:

static void adc_pa0_continous_conv_init(void);


uint32_t pa0_adc_read(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <pa0_adc_read+0x10>)
 8001f02:	f7fe fd27 	bl	8000954 <HAL_ADC_GetValue>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000088 	.word	0x20000088

08001f10 <adc_pa0_single_conv_init>:


}

void adc_pa0_single_conv_init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
	//Configure pa0 as analog pin

	GPIO_InitTypeDef 		GPIO_InitStruct = {0};
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef 	sConfig 		= {0};
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin 		= GPIO_PIN_0;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_ANALOG;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull		= GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4824      	ldr	r0, [pc, #144]	@ (8001ff4 <adc_pa0_single_conv_init+0xe4>)
 8001f64:	f7ff f808 	bl	8000f78 <HAL_GPIO_Init>


	//Configure adc module for continuous conversion

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f76:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <adc_pa0_single_conv_init+0xe0>)
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance 						= ADC1;
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <adc_pa0_single_conv_init+0xec>)
 8001f88:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler 			= ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution				= ADC_RESOLUTION_12B;
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode		= DISABLE;
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode	= DISABLE;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv			= ADC_SOFTWARE_START;
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <adc_pa0_single_conv_init+0xf0>)
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion			= 1;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests	= DISABLE;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection				= ADC_EOC_SINGLE_CONV;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8001fca:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fcc:	f7fe fb4a 	bl	8000664 <HAL_ADC_Init>

	sConfig.Channel		 = ADC_CHANNEL_0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
	sConfig.Rank   		 = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <adc_pa0_single_conv_init+0xe8>)
 8001fe4:	f7fe fcc4 	bl	8000970 <HAL_ADC_ConfigChannel>



}
 8001fe8:	bf00      	nop
 8001fea:	3730      	adds	r7, #48	@ 0x30
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	20000088 	.word	0x20000088
 8001ffc:	40012000 	.word	0x40012000
 8002000:	0f000001 	.word	0x0f000001

08002004 <main>:


uint32_t sensor_value;

int main()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8002008:	f7fe fab2 	bl	8000570 <HAL_Init>
	uart_init() ;
 800200c:	f000 f8d8 	bl	80021c0 <uart_init>
	adc_pa0_single_conv_init();
 8002010:	f7ff ff7e 	bl	8001f10 <adc_pa0_single_conv_init>

	while(1)
	{

		//1. Start ADC
		HAL_ADC_Start(&hadc1);
 8002014:	4809      	ldr	r0, [pc, #36]	@ (800203c <main+0x38>)
 8002016:	f7fe fb73 	bl	8000700 <HAL_ADC_Start>

		//2. Poll for conversion
		HAL_ADC_PollForConversion(&hadc1, 1);
 800201a:	2101      	movs	r1, #1
 800201c:	4807      	ldr	r0, [pc, #28]	@ (800203c <main+0x38>)
 800201e:	f7fe fc15 	bl	800084c <HAL_ADC_PollForConversion>

		//3. Get conversion
		sensor_value = pa0_adc_read();
 8002022:	f7ff ff6b 	bl	8001efc <pa0_adc_read>
 8002026:	4603      	mov	r3, r0
 8002028:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <main+0x3c>)
 800202a:	6013      	str	r3, [r2, #0]

		printf("The sensor value : %d \n\r", (int)sensor_value) ;
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <main+0x3c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <main+0x40>)
 8002034:	f000 fa10 	bl	8002458 <iprintf>
		HAL_ADC_Start(&hadc1);
 8002038:	bf00      	nop
 800203a:	e7eb      	b.n	8002014 <main+0x10>
 800203c:	20000088 	.word	0x20000088
 8002040:	200000d0 	.word	0x200000d0
 8002044:	0800314c 	.word	0x0800314c

08002048 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 800204c:	f7fe faea 	bl	8000624 <HAL_IncTick>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00a      	b.n	800207c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002066:	f3af 8000 	nop.w
 800206a:	4601      	mov	r1, r0
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf0      	blt.n	8002066 <_read+0x12>
  }

  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f877 	bl	800219c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbf1      	blt.n	80020a0 <_write+0x12>
  }
  return len;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_close>:

int _close(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ee:	605a      	str	r2, [r3, #4]
  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_isatty>:

int _isatty(int file)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f000 fa1e 	bl	80025a0 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20018000 	.word	0x20018000
 8002190:	00000400 	.word	0x00000400
 8002194:	200000d4 	.word	0x200000d4
 8002198:	20000268 	.word	0x20000268

0800219c <__io_putchar>:
UART_HandleTypeDef huart2 ;



int __io_putchar(int ch)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 80021a4:	1d39      	adds	r1, r7, #4
 80021a6:	230a      	movs	r3, #10
 80021a8:	2201      	movs	r2, #1
 80021aa:	4804      	ldr	r0, [pc, #16]	@ (80021bc <__io_putchar+0x20>)
 80021ac:	f7ff f8f3 	bl	8001396 <HAL_UART_Transmit>
	return ch ;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200000d8 	.word	0x200000d8

080021c0 <uart_init>:

void uart_init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <uart_init+0xb0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <uart_init+0xb0>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <uart_init+0xb0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <uart_init+0xb0>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002270 <uart_init+0xb0>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	6413      	str	r3, [r2, #64]	@ 0x40
 8002202:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <uart_init+0xb0>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 800220e:	230c      	movs	r3, #12
 8002210:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8002212:	2302      	movs	r3, #2
 8002214:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 8002216:	2307      	movs	r3, #7
 8002218:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 800221e:	2303      	movs	r3, #3
 8002220:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4812      	ldr	r0, [pc, #72]	@ (8002274 <uart_init+0xb4>)
 800222a:	f7fe fea5 	bl	8000f78 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <uart_init+0xb8>)
 8002230:	4a12      	ldr	r2, [pc, #72]	@ (800227c <uart_init+0xbc>)
 8002232:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 8002234:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <uart_init+0xb8>)
 8002236:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800223a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <uart_init+0xb8>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <uart_init+0xb8>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <uart_init+0xb8>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <uart_init+0xb8>)
 8002250:	2208      	movs	r2, #8
 8002252:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <uart_init+0xb8>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <uart_init+0xb8>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <uart_init+0xb8>)
 8002262:	f7ff f841 	bl	80012e8 <HAL_UART_Init>




}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	200000d8 	.word	0x200000d8
 800227c:	40004400 	.word	0x40004400

08002280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002280:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <LoopForever+0x6>)
  ldr r1, =_edata
 800228a:	490d      	ldr	r1, [pc, #52]	@ (80022c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <LoopForever+0xe>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <LoopForever+0x16>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022ae:	f000 f97d 	bl	80025ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022b2:	f7ff fea7 	bl	8002004 <main>

080022b6 <LoopForever>:

LoopForever:
  b LoopForever
 80022b6:	e7fe      	b.n	80022b6 <LoopForever>
  ldr   r0, =_estack
 80022b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80022c4:	080031b4 	.word	0x080031b4
  ldr r2, =_sbss
 80022c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80022cc:	20000264 	.word	0x20000264

080022d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>
	...

080022d4 <std>:
 80022d4:	2300      	movs	r3, #0
 80022d6:	b510      	push	{r4, lr}
 80022d8:	4604      	mov	r4, r0
 80022da:	e9c0 3300 	strd	r3, r3, [r0]
 80022de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022e2:	6083      	str	r3, [r0, #8]
 80022e4:	8181      	strh	r1, [r0, #12]
 80022e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80022e8:	81c2      	strh	r2, [r0, #14]
 80022ea:	6183      	str	r3, [r0, #24]
 80022ec:	4619      	mov	r1, r3
 80022ee:	2208      	movs	r2, #8
 80022f0:	305c      	adds	r0, #92	@ 0x5c
 80022f2:	f000 f906 	bl	8002502 <memset>
 80022f6:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <std+0x58>)
 80022f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <std+0x5c>)
 80022fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <std+0x60>)
 8002300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <std+0x64>)
 8002304:	6323      	str	r3, [r4, #48]	@ 0x30
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <std+0x68>)
 8002308:	6224      	str	r4, [r4, #32]
 800230a:	429c      	cmp	r4, r3
 800230c:	d006      	beq.n	800231c <std+0x48>
 800230e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002312:	4294      	cmp	r4, r2
 8002314:	d002      	beq.n	800231c <std+0x48>
 8002316:	33d0      	adds	r3, #208	@ 0xd0
 8002318:	429c      	cmp	r4, r3
 800231a:	d105      	bne.n	8002328 <std+0x54>
 800231c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002324:	f000 b966 	b.w	80025f4 <__retarget_lock_init_recursive>
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	0800247d 	.word	0x0800247d
 8002330:	0800249f 	.word	0x0800249f
 8002334:	080024d7 	.word	0x080024d7
 8002338:	080024fb 	.word	0x080024fb
 800233c:	20000118 	.word	0x20000118

08002340 <stdio_exit_handler>:
 8002340:	4a02      	ldr	r2, [pc, #8]	@ (800234c <stdio_exit_handler+0xc>)
 8002342:	4903      	ldr	r1, [pc, #12]	@ (8002350 <stdio_exit_handler+0x10>)
 8002344:	4803      	ldr	r0, [pc, #12]	@ (8002354 <stdio_exit_handler+0x14>)
 8002346:	f000 b869 	b.w	800241c <_fwalk_sglue>
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c
 8002350:	08002e95 	.word	0x08002e95
 8002354:	2000001c 	.word	0x2000001c

08002358 <cleanup_stdio>:
 8002358:	6841      	ldr	r1, [r0, #4]
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <cleanup_stdio+0x34>)
 800235c:	4299      	cmp	r1, r3
 800235e:	b510      	push	{r4, lr}
 8002360:	4604      	mov	r4, r0
 8002362:	d001      	beq.n	8002368 <cleanup_stdio+0x10>
 8002364:	f000 fd96 	bl	8002e94 <_fflush_r>
 8002368:	68a1      	ldr	r1, [r4, #8]
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <cleanup_stdio+0x38>)
 800236c:	4299      	cmp	r1, r3
 800236e:	d002      	beq.n	8002376 <cleanup_stdio+0x1e>
 8002370:	4620      	mov	r0, r4
 8002372:	f000 fd8f 	bl	8002e94 <_fflush_r>
 8002376:	68e1      	ldr	r1, [r4, #12]
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <cleanup_stdio+0x3c>)
 800237a:	4299      	cmp	r1, r3
 800237c:	d004      	beq.n	8002388 <cleanup_stdio+0x30>
 800237e:	4620      	mov	r0, r4
 8002380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002384:	f000 bd86 	b.w	8002e94 <_fflush_r>
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	20000118 	.word	0x20000118
 8002390:	20000180 	.word	0x20000180
 8002394:	200001e8 	.word	0x200001e8

08002398 <global_stdio_init.part.0>:
 8002398:	b510      	push	{r4, lr}
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <global_stdio_init.part.0+0x30>)
 800239c:	4c0b      	ldr	r4, [pc, #44]	@ (80023cc <global_stdio_init.part.0+0x34>)
 800239e:	4a0c      	ldr	r2, [pc, #48]	@ (80023d0 <global_stdio_init.part.0+0x38>)
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	4620      	mov	r0, r4
 80023a4:	2200      	movs	r2, #0
 80023a6:	2104      	movs	r1, #4
 80023a8:	f7ff ff94 	bl	80022d4 <std>
 80023ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80023b0:	2201      	movs	r2, #1
 80023b2:	2109      	movs	r1, #9
 80023b4:	f7ff ff8e 	bl	80022d4 <std>
 80023b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80023bc:	2202      	movs	r2, #2
 80023be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c2:	2112      	movs	r1, #18
 80023c4:	f7ff bf86 	b.w	80022d4 <std>
 80023c8:	20000250 	.word	0x20000250
 80023cc:	20000118 	.word	0x20000118
 80023d0:	08002341 	.word	0x08002341

080023d4 <__sfp_lock_acquire>:
 80023d4:	4801      	ldr	r0, [pc, #4]	@ (80023dc <__sfp_lock_acquire+0x8>)
 80023d6:	f000 b90e 	b.w	80025f6 <__retarget_lock_acquire_recursive>
 80023da:	bf00      	nop
 80023dc:	20000259 	.word	0x20000259

080023e0 <__sfp_lock_release>:
 80023e0:	4801      	ldr	r0, [pc, #4]	@ (80023e8 <__sfp_lock_release+0x8>)
 80023e2:	f000 b909 	b.w	80025f8 <__retarget_lock_release_recursive>
 80023e6:	bf00      	nop
 80023e8:	20000259 	.word	0x20000259

080023ec <__sinit>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	f7ff fff0 	bl	80023d4 <__sfp_lock_acquire>
 80023f4:	6a23      	ldr	r3, [r4, #32]
 80023f6:	b11b      	cbz	r3, 8002400 <__sinit+0x14>
 80023f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023fc:	f7ff bff0 	b.w	80023e0 <__sfp_lock_release>
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__sinit+0x28>)
 8002402:	6223      	str	r3, [r4, #32]
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__sinit+0x2c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f5      	bne.n	80023f8 <__sinit+0xc>
 800240c:	f7ff ffc4 	bl	8002398 <global_stdio_init.part.0>
 8002410:	e7f2      	b.n	80023f8 <__sinit+0xc>
 8002412:	bf00      	nop
 8002414:	08002359 	.word	0x08002359
 8002418:	20000250 	.word	0x20000250

0800241c <_fwalk_sglue>:
 800241c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002420:	4607      	mov	r7, r0
 8002422:	4688      	mov	r8, r1
 8002424:	4614      	mov	r4, r2
 8002426:	2600      	movs	r6, #0
 8002428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800242c:	f1b9 0901 	subs.w	r9, r9, #1
 8002430:	d505      	bpl.n	800243e <_fwalk_sglue+0x22>
 8002432:	6824      	ldr	r4, [r4, #0]
 8002434:	2c00      	cmp	r4, #0
 8002436:	d1f7      	bne.n	8002428 <_fwalk_sglue+0xc>
 8002438:	4630      	mov	r0, r6
 800243a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800243e:	89ab      	ldrh	r3, [r5, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d907      	bls.n	8002454 <_fwalk_sglue+0x38>
 8002444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002448:	3301      	adds	r3, #1
 800244a:	d003      	beq.n	8002454 <_fwalk_sglue+0x38>
 800244c:	4629      	mov	r1, r5
 800244e:	4638      	mov	r0, r7
 8002450:	47c0      	blx	r8
 8002452:	4306      	orrs	r6, r0
 8002454:	3568      	adds	r5, #104	@ 0x68
 8002456:	e7e9      	b.n	800242c <_fwalk_sglue+0x10>

08002458 <iprintf>:
 8002458:	b40f      	push	{r0, r1, r2, r3}
 800245a:	b507      	push	{r0, r1, r2, lr}
 800245c:	4906      	ldr	r1, [pc, #24]	@ (8002478 <iprintf+0x20>)
 800245e:	ab04      	add	r3, sp, #16
 8002460:	6808      	ldr	r0, [r1, #0]
 8002462:	f853 2b04 	ldr.w	r2, [r3], #4
 8002466:	6881      	ldr	r1, [r0, #8]
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	f000 f9e9 	bl	8002840 <_vfiprintf_r>
 800246e:	b003      	add	sp, #12
 8002470:	f85d eb04 	ldr.w	lr, [sp], #4
 8002474:	b004      	add	sp, #16
 8002476:	4770      	bx	lr
 8002478:	20000018 	.word	0x20000018

0800247c <__sread>:
 800247c:	b510      	push	{r4, lr}
 800247e:	460c      	mov	r4, r1
 8002480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002484:	f000 f868 	bl	8002558 <_read_r>
 8002488:	2800      	cmp	r0, #0
 800248a:	bfab      	itete	ge
 800248c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800248e:	89a3      	ldrhlt	r3, [r4, #12]
 8002490:	181b      	addge	r3, r3, r0
 8002492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002496:	bfac      	ite	ge
 8002498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800249a:	81a3      	strhlt	r3, [r4, #12]
 800249c:	bd10      	pop	{r4, pc}

0800249e <__swrite>:
 800249e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a2:	461f      	mov	r7, r3
 80024a4:	898b      	ldrh	r3, [r1, #12]
 80024a6:	05db      	lsls	r3, r3, #23
 80024a8:	4605      	mov	r5, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	4616      	mov	r6, r2
 80024ae:	d505      	bpl.n	80024bc <__swrite+0x1e>
 80024b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b4:	2302      	movs	r3, #2
 80024b6:	2200      	movs	r2, #0
 80024b8:	f000 f83c 	bl	8002534 <_lseek_r>
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024c6:	81a3      	strh	r3, [r4, #12]
 80024c8:	4632      	mov	r2, r6
 80024ca:	463b      	mov	r3, r7
 80024cc:	4628      	mov	r0, r5
 80024ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024d2:	f000 b853 	b.w	800257c <_write_r>

080024d6 <__sseek>:
 80024d6:	b510      	push	{r4, lr}
 80024d8:	460c      	mov	r4, r1
 80024da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024de:	f000 f829 	bl	8002534 <_lseek_r>
 80024e2:	1c43      	adds	r3, r0, #1
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	bf15      	itete	ne
 80024e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024f2:	81a3      	strheq	r3, [r4, #12]
 80024f4:	bf18      	it	ne
 80024f6:	81a3      	strhne	r3, [r4, #12]
 80024f8:	bd10      	pop	{r4, pc}

080024fa <__sclose>:
 80024fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fe:	f000 b809 	b.w	8002514 <_close_r>

08002502 <memset>:
 8002502:	4402      	add	r2, r0
 8002504:	4603      	mov	r3, r0
 8002506:	4293      	cmp	r3, r2
 8002508:	d100      	bne.n	800250c <memset+0xa>
 800250a:	4770      	bx	lr
 800250c:	f803 1b01 	strb.w	r1, [r3], #1
 8002510:	e7f9      	b.n	8002506 <memset+0x4>
	...

08002514 <_close_r>:
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4d06      	ldr	r5, [pc, #24]	@ (8002530 <_close_r+0x1c>)
 8002518:	2300      	movs	r3, #0
 800251a:	4604      	mov	r4, r0
 800251c:	4608      	mov	r0, r1
 800251e:	602b      	str	r3, [r5, #0]
 8002520:	f7ff fdd1 	bl	80020c6 <_close>
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	d102      	bne.n	800252e <_close_r+0x1a>
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	b103      	cbz	r3, 800252e <_close_r+0x1a>
 800252c:	6023      	str	r3, [r4, #0]
 800252e:	bd38      	pop	{r3, r4, r5, pc}
 8002530:	20000254 	.word	0x20000254

08002534 <_lseek_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4d07      	ldr	r5, [pc, #28]	@ (8002554 <_lseek_r+0x20>)
 8002538:	4604      	mov	r4, r0
 800253a:	4608      	mov	r0, r1
 800253c:	4611      	mov	r1, r2
 800253e:	2200      	movs	r2, #0
 8002540:	602a      	str	r2, [r5, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f7ff fde6 	bl	8002114 <_lseek>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_lseek_r+0x1e>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b103      	cbz	r3, 8002552 <_lseek_r+0x1e>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000254 	.word	0x20000254

08002558 <_read_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d07      	ldr	r5, [pc, #28]	@ (8002578 <_read_r+0x20>)
 800255c:	4604      	mov	r4, r0
 800255e:	4608      	mov	r0, r1
 8002560:	4611      	mov	r1, r2
 8002562:	2200      	movs	r2, #0
 8002564:	602a      	str	r2, [r5, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	f7ff fd74 	bl	8002054 <_read>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d102      	bne.n	8002576 <_read_r+0x1e>
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	b103      	cbz	r3, 8002576 <_read_r+0x1e>
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	bd38      	pop	{r3, r4, r5, pc}
 8002578:	20000254 	.word	0x20000254

0800257c <_write_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4d07      	ldr	r5, [pc, #28]	@ (800259c <_write_r+0x20>)
 8002580:	4604      	mov	r4, r0
 8002582:	4608      	mov	r0, r1
 8002584:	4611      	mov	r1, r2
 8002586:	2200      	movs	r2, #0
 8002588:	602a      	str	r2, [r5, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f7ff fd7f 	bl	800208e <_write>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d102      	bne.n	800259a <_write_r+0x1e>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	b103      	cbz	r3, 800259a <_write_r+0x1e>
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	20000254 	.word	0x20000254

080025a0 <__errno>:
 80025a0:	4b01      	ldr	r3, [pc, #4]	@ (80025a8 <__errno+0x8>)
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000018 	.word	0x20000018

080025ac <__libc_init_array>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	4d0d      	ldr	r5, [pc, #52]	@ (80025e4 <__libc_init_array+0x38>)
 80025b0:	4c0d      	ldr	r4, [pc, #52]	@ (80025e8 <__libc_init_array+0x3c>)
 80025b2:	1b64      	subs	r4, r4, r5
 80025b4:	10a4      	asrs	r4, r4, #2
 80025b6:	2600      	movs	r6, #0
 80025b8:	42a6      	cmp	r6, r4
 80025ba:	d109      	bne.n	80025d0 <__libc_init_array+0x24>
 80025bc:	4d0b      	ldr	r5, [pc, #44]	@ (80025ec <__libc_init_array+0x40>)
 80025be:	4c0c      	ldr	r4, [pc, #48]	@ (80025f0 <__libc_init_array+0x44>)
 80025c0:	f000 fdb8 	bl	8003134 <_init>
 80025c4:	1b64      	subs	r4, r4, r5
 80025c6:	10a4      	asrs	r4, r4, #2
 80025c8:	2600      	movs	r6, #0
 80025ca:	42a6      	cmp	r6, r4
 80025cc:	d105      	bne.n	80025da <__libc_init_array+0x2e>
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
 80025d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d4:	4798      	blx	r3
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7ee      	b.n	80025b8 <__libc_init_array+0xc>
 80025da:	f855 3b04 	ldr.w	r3, [r5], #4
 80025de:	4798      	blx	r3
 80025e0:	3601      	adds	r6, #1
 80025e2:	e7f2      	b.n	80025ca <__libc_init_array+0x1e>
 80025e4:	080031ac 	.word	0x080031ac
 80025e8:	080031ac 	.word	0x080031ac
 80025ec:	080031ac 	.word	0x080031ac
 80025f0:	080031b0 	.word	0x080031b0

080025f4 <__retarget_lock_init_recursive>:
 80025f4:	4770      	bx	lr

080025f6 <__retarget_lock_acquire_recursive>:
 80025f6:	4770      	bx	lr

080025f8 <__retarget_lock_release_recursive>:
 80025f8:	4770      	bx	lr
	...

080025fc <_free_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4605      	mov	r5, r0
 8002600:	2900      	cmp	r1, #0
 8002602:	d041      	beq.n	8002688 <_free_r+0x8c>
 8002604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002608:	1f0c      	subs	r4, r1, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfb8      	it	lt
 800260e:	18e4      	addlt	r4, r4, r3
 8002610:	f000 f8e0 	bl	80027d4 <__malloc_lock>
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <_free_r+0x90>)
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	b933      	cbnz	r3, 8002628 <_free_r+0x2c>
 800261a:	6063      	str	r3, [r4, #4]
 800261c:	6014      	str	r4, [r2, #0]
 800261e:	4628      	mov	r0, r5
 8002620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002624:	f000 b8dc 	b.w	80027e0 <__malloc_unlock>
 8002628:	42a3      	cmp	r3, r4
 800262a:	d908      	bls.n	800263e <_free_r+0x42>
 800262c:	6820      	ldr	r0, [r4, #0]
 800262e:	1821      	adds	r1, r4, r0
 8002630:	428b      	cmp	r3, r1
 8002632:	bf01      	itttt	eq
 8002634:	6819      	ldreq	r1, [r3, #0]
 8002636:	685b      	ldreq	r3, [r3, #4]
 8002638:	1809      	addeq	r1, r1, r0
 800263a:	6021      	streq	r1, [r4, #0]
 800263c:	e7ed      	b.n	800261a <_free_r+0x1e>
 800263e:	461a      	mov	r2, r3
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b10b      	cbz	r3, 8002648 <_free_r+0x4c>
 8002644:	42a3      	cmp	r3, r4
 8002646:	d9fa      	bls.n	800263e <_free_r+0x42>
 8002648:	6811      	ldr	r1, [r2, #0]
 800264a:	1850      	adds	r0, r2, r1
 800264c:	42a0      	cmp	r0, r4
 800264e:	d10b      	bne.n	8002668 <_free_r+0x6c>
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	4401      	add	r1, r0
 8002654:	1850      	adds	r0, r2, r1
 8002656:	4283      	cmp	r3, r0
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	d1e0      	bne.n	800261e <_free_r+0x22>
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	6053      	str	r3, [r2, #4]
 8002662:	4408      	add	r0, r1
 8002664:	6010      	str	r0, [r2, #0]
 8002666:	e7da      	b.n	800261e <_free_r+0x22>
 8002668:	d902      	bls.n	8002670 <_free_r+0x74>
 800266a:	230c      	movs	r3, #12
 800266c:	602b      	str	r3, [r5, #0]
 800266e:	e7d6      	b.n	800261e <_free_r+0x22>
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	1821      	adds	r1, r4, r0
 8002674:	428b      	cmp	r3, r1
 8002676:	bf04      	itt	eq
 8002678:	6819      	ldreq	r1, [r3, #0]
 800267a:	685b      	ldreq	r3, [r3, #4]
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	bf04      	itt	eq
 8002680:	1809      	addeq	r1, r1, r0
 8002682:	6021      	streq	r1, [r4, #0]
 8002684:	6054      	str	r4, [r2, #4]
 8002686:	e7ca      	b.n	800261e <_free_r+0x22>
 8002688:	bd38      	pop	{r3, r4, r5, pc}
 800268a:	bf00      	nop
 800268c:	20000260 	.word	0x20000260

08002690 <sbrk_aligned>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	4e0f      	ldr	r6, [pc, #60]	@ (80026d0 <sbrk_aligned+0x40>)
 8002694:	460c      	mov	r4, r1
 8002696:	6831      	ldr	r1, [r6, #0]
 8002698:	4605      	mov	r5, r0
 800269a:	b911      	cbnz	r1, 80026a2 <sbrk_aligned+0x12>
 800269c:	f000 fcb6 	bl	800300c <_sbrk_r>
 80026a0:	6030      	str	r0, [r6, #0]
 80026a2:	4621      	mov	r1, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f000 fcb1 	bl	800300c <_sbrk_r>
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d103      	bne.n	80026b6 <sbrk_aligned+0x26>
 80026ae:	f04f 34ff 	mov.w	r4, #4294967295
 80026b2:	4620      	mov	r0, r4
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	1cc4      	adds	r4, r0, #3
 80026b8:	f024 0403 	bic.w	r4, r4, #3
 80026bc:	42a0      	cmp	r0, r4
 80026be:	d0f8      	beq.n	80026b2 <sbrk_aligned+0x22>
 80026c0:	1a21      	subs	r1, r4, r0
 80026c2:	4628      	mov	r0, r5
 80026c4:	f000 fca2 	bl	800300c <_sbrk_r>
 80026c8:	3001      	adds	r0, #1
 80026ca:	d1f2      	bne.n	80026b2 <sbrk_aligned+0x22>
 80026cc:	e7ef      	b.n	80026ae <sbrk_aligned+0x1e>
 80026ce:	bf00      	nop
 80026d0:	2000025c 	.word	0x2000025c

080026d4 <_malloc_r>:
 80026d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d8:	1ccd      	adds	r5, r1, #3
 80026da:	f025 0503 	bic.w	r5, r5, #3
 80026de:	3508      	adds	r5, #8
 80026e0:	2d0c      	cmp	r5, #12
 80026e2:	bf38      	it	cc
 80026e4:	250c      	movcc	r5, #12
 80026e6:	2d00      	cmp	r5, #0
 80026e8:	4606      	mov	r6, r0
 80026ea:	db01      	blt.n	80026f0 <_malloc_r+0x1c>
 80026ec:	42a9      	cmp	r1, r5
 80026ee:	d904      	bls.n	80026fa <_malloc_r+0x26>
 80026f0:	230c      	movs	r3, #12
 80026f2:	6033      	str	r3, [r6, #0]
 80026f4:	2000      	movs	r0, #0
 80026f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027d0 <_malloc_r+0xfc>
 80026fe:	f000 f869 	bl	80027d4 <__malloc_lock>
 8002702:	f8d8 3000 	ldr.w	r3, [r8]
 8002706:	461c      	mov	r4, r3
 8002708:	bb44      	cbnz	r4, 800275c <_malloc_r+0x88>
 800270a:	4629      	mov	r1, r5
 800270c:	4630      	mov	r0, r6
 800270e:	f7ff ffbf 	bl	8002690 <sbrk_aligned>
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	4604      	mov	r4, r0
 8002716:	d158      	bne.n	80027ca <_malloc_r+0xf6>
 8002718:	f8d8 4000 	ldr.w	r4, [r8]
 800271c:	4627      	mov	r7, r4
 800271e:	2f00      	cmp	r7, #0
 8002720:	d143      	bne.n	80027aa <_malloc_r+0xd6>
 8002722:	2c00      	cmp	r4, #0
 8002724:	d04b      	beq.n	80027be <_malloc_r+0xea>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	4639      	mov	r1, r7
 800272a:	4630      	mov	r0, r6
 800272c:	eb04 0903 	add.w	r9, r4, r3
 8002730:	f000 fc6c 	bl	800300c <_sbrk_r>
 8002734:	4581      	cmp	r9, r0
 8002736:	d142      	bne.n	80027be <_malloc_r+0xea>
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	1a6d      	subs	r5, r5, r1
 800273c:	4629      	mov	r1, r5
 800273e:	4630      	mov	r0, r6
 8002740:	f7ff ffa6 	bl	8002690 <sbrk_aligned>
 8002744:	3001      	adds	r0, #1
 8002746:	d03a      	beq.n	80027be <_malloc_r+0xea>
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	442b      	add	r3, r5
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	f8d8 3000 	ldr.w	r3, [r8]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	bb62      	cbnz	r2, 80027b0 <_malloc_r+0xdc>
 8002756:	f8c8 7000 	str.w	r7, [r8]
 800275a:	e00f      	b.n	800277c <_malloc_r+0xa8>
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	1b52      	subs	r2, r2, r5
 8002760:	d420      	bmi.n	80027a4 <_malloc_r+0xd0>
 8002762:	2a0b      	cmp	r2, #11
 8002764:	d917      	bls.n	8002796 <_malloc_r+0xc2>
 8002766:	1961      	adds	r1, r4, r5
 8002768:	42a3      	cmp	r3, r4
 800276a:	6025      	str	r5, [r4, #0]
 800276c:	bf18      	it	ne
 800276e:	6059      	strne	r1, [r3, #4]
 8002770:	6863      	ldr	r3, [r4, #4]
 8002772:	bf08      	it	eq
 8002774:	f8c8 1000 	streq.w	r1, [r8]
 8002778:	5162      	str	r2, [r4, r5]
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	4630      	mov	r0, r6
 800277e:	f000 f82f 	bl	80027e0 <__malloc_unlock>
 8002782:	f104 000b 	add.w	r0, r4, #11
 8002786:	1d23      	adds	r3, r4, #4
 8002788:	f020 0007 	bic.w	r0, r0, #7
 800278c:	1ac2      	subs	r2, r0, r3
 800278e:	bf1c      	itt	ne
 8002790:	1a1b      	subne	r3, r3, r0
 8002792:	50a3      	strne	r3, [r4, r2]
 8002794:	e7af      	b.n	80026f6 <_malloc_r+0x22>
 8002796:	6862      	ldr	r2, [r4, #4]
 8002798:	42a3      	cmp	r3, r4
 800279a:	bf0c      	ite	eq
 800279c:	f8c8 2000 	streq.w	r2, [r8]
 80027a0:	605a      	strne	r2, [r3, #4]
 80027a2:	e7eb      	b.n	800277c <_malloc_r+0xa8>
 80027a4:	4623      	mov	r3, r4
 80027a6:	6864      	ldr	r4, [r4, #4]
 80027a8:	e7ae      	b.n	8002708 <_malloc_r+0x34>
 80027aa:	463c      	mov	r4, r7
 80027ac:	687f      	ldr	r7, [r7, #4]
 80027ae:	e7b6      	b.n	800271e <_malloc_r+0x4a>
 80027b0:	461a      	mov	r2, r3
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	42a3      	cmp	r3, r4
 80027b6:	d1fb      	bne.n	80027b0 <_malloc_r+0xdc>
 80027b8:	2300      	movs	r3, #0
 80027ba:	6053      	str	r3, [r2, #4]
 80027bc:	e7de      	b.n	800277c <_malloc_r+0xa8>
 80027be:	230c      	movs	r3, #12
 80027c0:	6033      	str	r3, [r6, #0]
 80027c2:	4630      	mov	r0, r6
 80027c4:	f000 f80c 	bl	80027e0 <__malloc_unlock>
 80027c8:	e794      	b.n	80026f4 <_malloc_r+0x20>
 80027ca:	6005      	str	r5, [r0, #0]
 80027cc:	e7d6      	b.n	800277c <_malloc_r+0xa8>
 80027ce:	bf00      	nop
 80027d0:	20000260 	.word	0x20000260

080027d4 <__malloc_lock>:
 80027d4:	4801      	ldr	r0, [pc, #4]	@ (80027dc <__malloc_lock+0x8>)
 80027d6:	f7ff bf0e 	b.w	80025f6 <__retarget_lock_acquire_recursive>
 80027da:	bf00      	nop
 80027dc:	20000258 	.word	0x20000258

080027e0 <__malloc_unlock>:
 80027e0:	4801      	ldr	r0, [pc, #4]	@ (80027e8 <__malloc_unlock+0x8>)
 80027e2:	f7ff bf09 	b.w	80025f8 <__retarget_lock_release_recursive>
 80027e6:	bf00      	nop
 80027e8:	20000258 	.word	0x20000258

080027ec <__sfputc_r>:
 80027ec:	6893      	ldr	r3, [r2, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	b410      	push	{r4}
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	da08      	bge.n	800280a <__sfputc_r+0x1e>
 80027f8:	6994      	ldr	r4, [r2, #24]
 80027fa:	42a3      	cmp	r3, r4
 80027fc:	db01      	blt.n	8002802 <__sfputc_r+0x16>
 80027fe:	290a      	cmp	r1, #10
 8002800:	d103      	bne.n	800280a <__sfputc_r+0x1e>
 8002802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002806:	f000 bb6d 	b.w	8002ee4 <__swbuf_r>
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	1c58      	adds	r0, r3, #1
 800280e:	6010      	str	r0, [r2, #0]
 8002810:	7019      	strb	r1, [r3, #0]
 8002812:	4608      	mov	r0, r1
 8002814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002818:	4770      	bx	lr

0800281a <__sfputs_r>:
 800281a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281c:	4606      	mov	r6, r0
 800281e:	460f      	mov	r7, r1
 8002820:	4614      	mov	r4, r2
 8002822:	18d5      	adds	r5, r2, r3
 8002824:	42ac      	cmp	r4, r5
 8002826:	d101      	bne.n	800282c <__sfputs_r+0x12>
 8002828:	2000      	movs	r0, #0
 800282a:	e007      	b.n	800283c <__sfputs_r+0x22>
 800282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002830:	463a      	mov	r2, r7
 8002832:	4630      	mov	r0, r6
 8002834:	f7ff ffda 	bl	80027ec <__sfputc_r>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d1f3      	bne.n	8002824 <__sfputs_r+0xa>
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002840 <_vfiprintf_r>:
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002844:	460d      	mov	r5, r1
 8002846:	b09d      	sub	sp, #116	@ 0x74
 8002848:	4614      	mov	r4, r2
 800284a:	4698      	mov	r8, r3
 800284c:	4606      	mov	r6, r0
 800284e:	b118      	cbz	r0, 8002858 <_vfiprintf_r+0x18>
 8002850:	6a03      	ldr	r3, [r0, #32]
 8002852:	b90b      	cbnz	r3, 8002858 <_vfiprintf_r+0x18>
 8002854:	f7ff fdca 	bl	80023ec <__sinit>
 8002858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800285a:	07d9      	lsls	r1, r3, #31
 800285c:	d405      	bmi.n	800286a <_vfiprintf_r+0x2a>
 800285e:	89ab      	ldrh	r3, [r5, #12]
 8002860:	059a      	lsls	r2, r3, #22
 8002862:	d402      	bmi.n	800286a <_vfiprintf_r+0x2a>
 8002864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002866:	f7ff fec6 	bl	80025f6 <__retarget_lock_acquire_recursive>
 800286a:	89ab      	ldrh	r3, [r5, #12]
 800286c:	071b      	lsls	r3, r3, #28
 800286e:	d501      	bpl.n	8002874 <_vfiprintf_r+0x34>
 8002870:	692b      	ldr	r3, [r5, #16]
 8002872:	b99b      	cbnz	r3, 800289c <_vfiprintf_r+0x5c>
 8002874:	4629      	mov	r1, r5
 8002876:	4630      	mov	r0, r6
 8002878:	f000 fb72 	bl	8002f60 <__swsetup_r>
 800287c:	b170      	cbz	r0, 800289c <_vfiprintf_r+0x5c>
 800287e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002880:	07dc      	lsls	r4, r3, #31
 8002882:	d504      	bpl.n	800288e <_vfiprintf_r+0x4e>
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	b01d      	add	sp, #116	@ 0x74
 800288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288e:	89ab      	ldrh	r3, [r5, #12]
 8002890:	0598      	lsls	r0, r3, #22
 8002892:	d4f7      	bmi.n	8002884 <_vfiprintf_r+0x44>
 8002894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002896:	f7ff feaf 	bl	80025f8 <__retarget_lock_release_recursive>
 800289a:	e7f3      	b.n	8002884 <_vfiprintf_r+0x44>
 800289c:	2300      	movs	r3, #0
 800289e:	9309      	str	r3, [sp, #36]	@ 0x24
 80028a0:	2320      	movs	r3, #32
 80028a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80028a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80028aa:	2330      	movs	r3, #48	@ 0x30
 80028ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002a5c <_vfiprintf_r+0x21c>
 80028b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028b4:	f04f 0901 	mov.w	r9, #1
 80028b8:	4623      	mov	r3, r4
 80028ba:	469a      	mov	sl, r3
 80028bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028c0:	b10a      	cbz	r2, 80028c6 <_vfiprintf_r+0x86>
 80028c2:	2a25      	cmp	r2, #37	@ 0x25
 80028c4:	d1f9      	bne.n	80028ba <_vfiprintf_r+0x7a>
 80028c6:	ebba 0b04 	subs.w	fp, sl, r4
 80028ca:	d00b      	beq.n	80028e4 <_vfiprintf_r+0xa4>
 80028cc:	465b      	mov	r3, fp
 80028ce:	4622      	mov	r2, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	4630      	mov	r0, r6
 80028d4:	f7ff ffa1 	bl	800281a <__sfputs_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	f000 80a7 	beq.w	8002a2c <_vfiprintf_r+0x1ec>
 80028de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028e0:	445a      	add	r2, fp
 80028e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80028e4:	f89a 3000 	ldrb.w	r3, [sl]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 809f 	beq.w	8002a2c <_vfiprintf_r+0x1ec>
 80028ee:	2300      	movs	r3, #0
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f8:	f10a 0a01 	add.w	sl, sl, #1
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	9307      	str	r3, [sp, #28]
 8002900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002904:	931a      	str	r3, [sp, #104]	@ 0x68
 8002906:	4654      	mov	r4, sl
 8002908:	2205      	movs	r2, #5
 800290a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800290e:	4853      	ldr	r0, [pc, #332]	@ (8002a5c <_vfiprintf_r+0x21c>)
 8002910:	f7fd fc66 	bl	80001e0 <memchr>
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	b9d8      	cbnz	r0, 8002950 <_vfiprintf_r+0x110>
 8002918:	06d1      	lsls	r1, r2, #27
 800291a:	bf44      	itt	mi
 800291c:	2320      	movmi	r3, #32
 800291e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002922:	0713      	lsls	r3, r2, #28
 8002924:	bf44      	itt	mi
 8002926:	232b      	movmi	r3, #43	@ 0x2b
 8002928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800292c:	f89a 3000 	ldrb.w	r3, [sl]
 8002930:	2b2a      	cmp	r3, #42	@ 0x2a
 8002932:	d015      	beq.n	8002960 <_vfiprintf_r+0x120>
 8002934:	9a07      	ldr	r2, [sp, #28]
 8002936:	4654      	mov	r4, sl
 8002938:	2000      	movs	r0, #0
 800293a:	f04f 0c0a 	mov.w	ip, #10
 800293e:	4621      	mov	r1, r4
 8002940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002944:	3b30      	subs	r3, #48	@ 0x30
 8002946:	2b09      	cmp	r3, #9
 8002948:	d94b      	bls.n	80029e2 <_vfiprintf_r+0x1a2>
 800294a:	b1b0      	cbz	r0, 800297a <_vfiprintf_r+0x13a>
 800294c:	9207      	str	r2, [sp, #28]
 800294e:	e014      	b.n	800297a <_vfiprintf_r+0x13a>
 8002950:	eba0 0308 	sub.w	r3, r0, r8
 8002954:	fa09 f303 	lsl.w	r3, r9, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	9304      	str	r3, [sp, #16]
 800295c:	46a2      	mov	sl, r4
 800295e:	e7d2      	b.n	8002906 <_vfiprintf_r+0xc6>
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	1d19      	adds	r1, r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	9103      	str	r1, [sp, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	bfbb      	ittet	lt
 800296c:	425b      	neglt	r3, r3
 800296e:	f042 0202 	orrlt.w	r2, r2, #2
 8002972:	9307      	strge	r3, [sp, #28]
 8002974:	9307      	strlt	r3, [sp, #28]
 8002976:	bfb8      	it	lt
 8002978:	9204      	strlt	r2, [sp, #16]
 800297a:	7823      	ldrb	r3, [r4, #0]
 800297c:	2b2e      	cmp	r3, #46	@ 0x2e
 800297e:	d10a      	bne.n	8002996 <_vfiprintf_r+0x156>
 8002980:	7863      	ldrb	r3, [r4, #1]
 8002982:	2b2a      	cmp	r3, #42	@ 0x2a
 8002984:	d132      	bne.n	80029ec <_vfiprintf_r+0x1ac>
 8002986:	9b03      	ldr	r3, [sp, #12]
 8002988:	1d1a      	adds	r2, r3, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	9203      	str	r2, [sp, #12]
 800298e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002992:	3402      	adds	r4, #2
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002a6c <_vfiprintf_r+0x22c>
 800299a:	7821      	ldrb	r1, [r4, #0]
 800299c:	2203      	movs	r2, #3
 800299e:	4650      	mov	r0, sl
 80029a0:	f7fd fc1e 	bl	80001e0 <memchr>
 80029a4:	b138      	cbz	r0, 80029b6 <_vfiprintf_r+0x176>
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	eba0 000a 	sub.w	r0, r0, sl
 80029ac:	2240      	movs	r2, #64	@ 0x40
 80029ae:	4082      	lsls	r2, r0
 80029b0:	4313      	orrs	r3, r2
 80029b2:	3401      	adds	r4, #1
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ba:	4829      	ldr	r0, [pc, #164]	@ (8002a60 <_vfiprintf_r+0x220>)
 80029bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80029c0:	2206      	movs	r2, #6
 80029c2:	f7fd fc0d 	bl	80001e0 <memchr>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d03f      	beq.n	8002a4a <_vfiprintf_r+0x20a>
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <_vfiprintf_r+0x224>)
 80029cc:	bb1b      	cbnz	r3, 8002a16 <_vfiprintf_r+0x1d6>
 80029ce:	9b03      	ldr	r3, [sp, #12]
 80029d0:	3307      	adds	r3, #7
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	3308      	adds	r3, #8
 80029d8:	9303      	str	r3, [sp, #12]
 80029da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029dc:	443b      	add	r3, r7
 80029de:	9309      	str	r3, [sp, #36]	@ 0x24
 80029e0:	e76a      	b.n	80028b8 <_vfiprintf_r+0x78>
 80029e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e6:	460c      	mov	r4, r1
 80029e8:	2001      	movs	r0, #1
 80029ea:	e7a8      	b.n	800293e <_vfiprintf_r+0xfe>
 80029ec:	2300      	movs	r3, #0
 80029ee:	3401      	adds	r4, #1
 80029f0:	9305      	str	r3, [sp, #20]
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 0c0a 	mov.w	ip, #10
 80029f8:	4620      	mov	r0, r4
 80029fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029fe:	3a30      	subs	r2, #48	@ 0x30
 8002a00:	2a09      	cmp	r2, #9
 8002a02:	d903      	bls.n	8002a0c <_vfiprintf_r+0x1cc>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0c6      	beq.n	8002996 <_vfiprintf_r+0x156>
 8002a08:	9105      	str	r1, [sp, #20]
 8002a0a:	e7c4      	b.n	8002996 <_vfiprintf_r+0x156>
 8002a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a10:	4604      	mov	r4, r0
 8002a12:	2301      	movs	r3, #1
 8002a14:	e7f0      	b.n	80029f8 <_vfiprintf_r+0x1b8>
 8002a16:	ab03      	add	r3, sp, #12
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	462a      	mov	r2, r5
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <_vfiprintf_r+0x228>)
 8002a1e:	a904      	add	r1, sp, #16
 8002a20:	4630      	mov	r0, r6
 8002a22:	f3af 8000 	nop.w
 8002a26:	4607      	mov	r7, r0
 8002a28:	1c78      	adds	r0, r7, #1
 8002a2a:	d1d6      	bne.n	80029da <_vfiprintf_r+0x19a>
 8002a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a2e:	07d9      	lsls	r1, r3, #31
 8002a30:	d405      	bmi.n	8002a3e <_vfiprintf_r+0x1fe>
 8002a32:	89ab      	ldrh	r3, [r5, #12]
 8002a34:	059a      	lsls	r2, r3, #22
 8002a36:	d402      	bmi.n	8002a3e <_vfiprintf_r+0x1fe>
 8002a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a3a:	f7ff fddd 	bl	80025f8 <__retarget_lock_release_recursive>
 8002a3e:	89ab      	ldrh	r3, [r5, #12]
 8002a40:	065b      	lsls	r3, r3, #25
 8002a42:	f53f af1f 	bmi.w	8002884 <_vfiprintf_r+0x44>
 8002a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a48:	e71e      	b.n	8002888 <_vfiprintf_r+0x48>
 8002a4a:	ab03      	add	r3, sp, #12
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	462a      	mov	r2, r5
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <_vfiprintf_r+0x228>)
 8002a52:	a904      	add	r1, sp, #16
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f879 	bl	8002b4c <_printf_i>
 8002a5a:	e7e4      	b.n	8002a26 <_vfiprintf_r+0x1e6>
 8002a5c:	08003170 	.word	0x08003170
 8002a60:	0800317a 	.word	0x0800317a
 8002a64:	00000000 	.word	0x00000000
 8002a68:	0800281b 	.word	0x0800281b
 8002a6c:	08003176 	.word	0x08003176

08002a70 <_printf_common>:
 8002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a74:	4616      	mov	r6, r2
 8002a76:	4698      	mov	r8, r3
 8002a78:	688a      	ldr	r2, [r1, #8]
 8002a7a:	690b      	ldr	r3, [r1, #16]
 8002a7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bfb8      	it	lt
 8002a84:	4613      	movlt	r3, r2
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	b10a      	cbz	r2, 8002a96 <_printf_common+0x26>
 8002a92:	3301      	adds	r3, #1
 8002a94:	6033      	str	r3, [r6, #0]
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	0699      	lsls	r1, r3, #26
 8002a9a:	bf42      	ittt	mi
 8002a9c:	6833      	ldrmi	r3, [r6, #0]
 8002a9e:	3302      	addmi	r3, #2
 8002aa0:	6033      	strmi	r3, [r6, #0]
 8002aa2:	6825      	ldr	r5, [r4, #0]
 8002aa4:	f015 0506 	ands.w	r5, r5, #6
 8002aa8:	d106      	bne.n	8002ab8 <_printf_common+0x48>
 8002aaa:	f104 0a19 	add.w	sl, r4, #25
 8002aae:	68e3      	ldr	r3, [r4, #12]
 8002ab0:	6832      	ldr	r2, [r6, #0]
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	42ab      	cmp	r3, r5
 8002ab6:	dc26      	bgt.n	8002b06 <_printf_common+0x96>
 8002ab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	3b00      	subs	r3, #0
 8002ac0:	bf18      	it	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	0692      	lsls	r2, r2, #26
 8002ac6:	d42b      	bmi.n	8002b20 <_printf_common+0xb0>
 8002ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002acc:	4641      	mov	r1, r8
 8002ace:	4638      	mov	r0, r7
 8002ad0:	47c8      	blx	r9
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d01e      	beq.n	8002b14 <_printf_common+0xa4>
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	f003 0306 	and.w	r3, r3, #6
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf02      	ittt	eq
 8002ae2:	68e5      	ldreq	r5, [r4, #12]
 8002ae4:	6833      	ldreq	r3, [r6, #0]
 8002ae6:	1aed      	subeq	r5, r5, r3
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	bf0c      	ite	eq
 8002aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af0:	2500      	movne	r5, #0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfc4      	itt	gt
 8002af6:	1a9b      	subgt	r3, r3, r2
 8002af8:	18ed      	addgt	r5, r5, r3
 8002afa:	2600      	movs	r6, #0
 8002afc:	341a      	adds	r4, #26
 8002afe:	42b5      	cmp	r5, r6
 8002b00:	d11a      	bne.n	8002b38 <_printf_common+0xc8>
 8002b02:	2000      	movs	r0, #0
 8002b04:	e008      	b.n	8002b18 <_printf_common+0xa8>
 8002b06:	2301      	movs	r3, #1
 8002b08:	4652      	mov	r2, sl
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	47c8      	blx	r9
 8002b10:	3001      	adds	r0, #1
 8002b12:	d103      	bne.n	8002b1c <_printf_common+0xac>
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1c:	3501      	adds	r5, #1
 8002b1e:	e7c6      	b.n	8002aae <_printf_common+0x3e>
 8002b20:	18e1      	adds	r1, r4, r3
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	2030      	movs	r0, #48	@ 0x30
 8002b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b2a:	4422      	add	r2, r4
 8002b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b34:	3302      	adds	r3, #2
 8002b36:	e7c7      	b.n	8002ac8 <_printf_common+0x58>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	4638      	mov	r0, r7
 8002b40:	47c8      	blx	r9
 8002b42:	3001      	adds	r0, #1
 8002b44:	d0e6      	beq.n	8002b14 <_printf_common+0xa4>
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7d9      	b.n	8002afe <_printf_common+0x8e>
	...

08002b4c <_printf_i>:
 8002b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	7e0f      	ldrb	r7, [r1, #24]
 8002b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b54:	2f78      	cmp	r7, #120	@ 0x78
 8002b56:	4691      	mov	r9, r2
 8002b58:	4680      	mov	r8, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	469a      	mov	sl, r3
 8002b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b62:	d807      	bhi.n	8002b74 <_printf_i+0x28>
 8002b64:	2f62      	cmp	r7, #98	@ 0x62
 8002b66:	d80a      	bhi.n	8002b7e <_printf_i+0x32>
 8002b68:	2f00      	cmp	r7, #0
 8002b6a:	f000 80d2 	beq.w	8002d12 <_printf_i+0x1c6>
 8002b6e:	2f58      	cmp	r7, #88	@ 0x58
 8002b70:	f000 80b9 	beq.w	8002ce6 <_printf_i+0x19a>
 8002b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b7c:	e03a      	b.n	8002bf4 <_printf_i+0xa8>
 8002b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b82:	2b15      	cmp	r3, #21
 8002b84:	d8f6      	bhi.n	8002b74 <_printf_i+0x28>
 8002b86:	a101      	add	r1, pc, #4	@ (adr r1, 8002b8c <_printf_i+0x40>)
 8002b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b8c:	08002be5 	.word	0x08002be5
 8002b90:	08002bf9 	.word	0x08002bf9
 8002b94:	08002b75 	.word	0x08002b75
 8002b98:	08002b75 	.word	0x08002b75
 8002b9c:	08002b75 	.word	0x08002b75
 8002ba0:	08002b75 	.word	0x08002b75
 8002ba4:	08002bf9 	.word	0x08002bf9
 8002ba8:	08002b75 	.word	0x08002b75
 8002bac:	08002b75 	.word	0x08002b75
 8002bb0:	08002b75 	.word	0x08002b75
 8002bb4:	08002b75 	.word	0x08002b75
 8002bb8:	08002cf9 	.word	0x08002cf9
 8002bbc:	08002c23 	.word	0x08002c23
 8002bc0:	08002cb3 	.word	0x08002cb3
 8002bc4:	08002b75 	.word	0x08002b75
 8002bc8:	08002b75 	.word	0x08002b75
 8002bcc:	08002d1b 	.word	0x08002d1b
 8002bd0:	08002b75 	.word	0x08002b75
 8002bd4:	08002c23 	.word	0x08002c23
 8002bd8:	08002b75 	.word	0x08002b75
 8002bdc:	08002b75 	.word	0x08002b75
 8002be0:	08002cbb 	.word	0x08002cbb
 8002be4:	6833      	ldr	r3, [r6, #0]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6032      	str	r2, [r6, #0]
 8002bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e09d      	b.n	8002d34 <_printf_i+0x1e8>
 8002bf8:	6833      	ldr	r3, [r6, #0]
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	1d19      	adds	r1, r3, #4
 8002bfe:	6031      	str	r1, [r6, #0]
 8002c00:	0606      	lsls	r6, r0, #24
 8002c02:	d501      	bpl.n	8002c08 <_printf_i+0xbc>
 8002c04:	681d      	ldr	r5, [r3, #0]
 8002c06:	e003      	b.n	8002c10 <_printf_i+0xc4>
 8002c08:	0645      	lsls	r5, r0, #25
 8002c0a:	d5fb      	bpl.n	8002c04 <_printf_i+0xb8>
 8002c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	da03      	bge.n	8002c1c <_printf_i+0xd0>
 8002c14:	232d      	movs	r3, #45	@ 0x2d
 8002c16:	426d      	negs	r5, r5
 8002c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c1c:	4859      	ldr	r0, [pc, #356]	@ (8002d84 <_printf_i+0x238>)
 8002c1e:	230a      	movs	r3, #10
 8002c20:	e011      	b.n	8002c46 <_printf_i+0xfa>
 8002c22:	6821      	ldr	r1, [r4, #0]
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	0608      	lsls	r0, r1, #24
 8002c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c2c:	d402      	bmi.n	8002c34 <_printf_i+0xe8>
 8002c2e:	0649      	lsls	r1, r1, #25
 8002c30:	bf48      	it	mi
 8002c32:	b2ad      	uxthmi	r5, r5
 8002c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c36:	4853      	ldr	r0, [pc, #332]	@ (8002d84 <_printf_i+0x238>)
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	bf14      	ite	ne
 8002c3c:	230a      	movne	r3, #10
 8002c3e:	2308      	moveq	r3, #8
 8002c40:	2100      	movs	r1, #0
 8002c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c46:	6866      	ldr	r6, [r4, #4]
 8002c48:	60a6      	str	r6, [r4, #8]
 8002c4a:	2e00      	cmp	r6, #0
 8002c4c:	bfa2      	ittt	ge
 8002c4e:	6821      	ldrge	r1, [r4, #0]
 8002c50:	f021 0104 	bicge.w	r1, r1, #4
 8002c54:	6021      	strge	r1, [r4, #0]
 8002c56:	b90d      	cbnz	r5, 8002c5c <_printf_i+0x110>
 8002c58:	2e00      	cmp	r6, #0
 8002c5a:	d04b      	beq.n	8002cf4 <_printf_i+0x1a8>
 8002c5c:	4616      	mov	r6, r2
 8002c5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c62:	fb03 5711 	mls	r7, r3, r1, r5
 8002c66:	5dc7      	ldrb	r7, [r0, r7]
 8002c68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c6c:	462f      	mov	r7, r5
 8002c6e:	42bb      	cmp	r3, r7
 8002c70:	460d      	mov	r5, r1
 8002c72:	d9f4      	bls.n	8002c5e <_printf_i+0x112>
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d10b      	bne.n	8002c90 <_printf_i+0x144>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	07df      	lsls	r7, r3, #31
 8002c7c:	d508      	bpl.n	8002c90 <_printf_i+0x144>
 8002c7e:	6923      	ldr	r3, [r4, #16]
 8002c80:	6861      	ldr	r1, [r4, #4]
 8002c82:	4299      	cmp	r1, r3
 8002c84:	bfde      	ittt	le
 8002c86:	2330      	movle	r3, #48	@ 0x30
 8002c88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c90:	1b92      	subs	r2, r2, r6
 8002c92:	6122      	str	r2, [r4, #16]
 8002c94:	f8cd a000 	str.w	sl, [sp]
 8002c98:	464b      	mov	r3, r9
 8002c9a:	aa03      	add	r2, sp, #12
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	f7ff fee6 	bl	8002a70 <_printf_common>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d14a      	bne.n	8002d3e <_printf_i+0x1f2>
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	b004      	add	sp, #16
 8002cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f043 0320 	orr.w	r3, r3, #32
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	4833      	ldr	r0, [pc, #204]	@ (8002d88 <_printf_i+0x23c>)
 8002cbc:	2778      	movs	r7, #120	@ 0x78
 8002cbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	6831      	ldr	r1, [r6, #0]
 8002cc6:	061f      	lsls	r7, r3, #24
 8002cc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ccc:	d402      	bmi.n	8002cd4 <_printf_i+0x188>
 8002cce:	065f      	lsls	r7, r3, #25
 8002cd0:	bf48      	it	mi
 8002cd2:	b2ad      	uxthmi	r5, r5
 8002cd4:	6031      	str	r1, [r6, #0]
 8002cd6:	07d9      	lsls	r1, r3, #31
 8002cd8:	bf44      	itt	mi
 8002cda:	f043 0320 	orrmi.w	r3, r3, #32
 8002cde:	6023      	strmi	r3, [r4, #0]
 8002ce0:	b11d      	cbz	r5, 8002cea <_printf_i+0x19e>
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	e7ac      	b.n	8002c40 <_printf_i+0xf4>
 8002ce6:	4827      	ldr	r0, [pc, #156]	@ (8002d84 <_printf_i+0x238>)
 8002ce8:	e7e9      	b.n	8002cbe <_printf_i+0x172>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f023 0320 	bic.w	r3, r3, #32
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	e7f6      	b.n	8002ce2 <_printf_i+0x196>
 8002cf4:	4616      	mov	r6, r2
 8002cf6:	e7bd      	b.n	8002c74 <_printf_i+0x128>
 8002cf8:	6833      	ldr	r3, [r6, #0]
 8002cfa:	6825      	ldr	r5, [r4, #0]
 8002cfc:	6961      	ldr	r1, [r4, #20]
 8002cfe:	1d18      	adds	r0, r3, #4
 8002d00:	6030      	str	r0, [r6, #0]
 8002d02:	062e      	lsls	r6, r5, #24
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	d501      	bpl.n	8002d0c <_printf_i+0x1c0>
 8002d08:	6019      	str	r1, [r3, #0]
 8002d0a:	e002      	b.n	8002d12 <_printf_i+0x1c6>
 8002d0c:	0668      	lsls	r0, r5, #25
 8002d0e:	d5fb      	bpl.n	8002d08 <_printf_i+0x1bc>
 8002d10:	8019      	strh	r1, [r3, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	6123      	str	r3, [r4, #16]
 8002d16:	4616      	mov	r6, r2
 8002d18:	e7bc      	b.n	8002c94 <_printf_i+0x148>
 8002d1a:	6833      	ldr	r3, [r6, #0]
 8002d1c:	1d1a      	adds	r2, r3, #4
 8002d1e:	6032      	str	r2, [r6, #0]
 8002d20:	681e      	ldr	r6, [r3, #0]
 8002d22:	6862      	ldr	r2, [r4, #4]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4630      	mov	r0, r6
 8002d28:	f7fd fa5a 	bl	80001e0 <memchr>
 8002d2c:	b108      	cbz	r0, 8002d32 <_printf_i+0x1e6>
 8002d2e:	1b80      	subs	r0, r0, r6
 8002d30:	6060      	str	r0, [r4, #4]
 8002d32:	6863      	ldr	r3, [r4, #4]
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	2300      	movs	r3, #0
 8002d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d3c:	e7aa      	b.n	8002c94 <_printf_i+0x148>
 8002d3e:	6923      	ldr	r3, [r4, #16]
 8002d40:	4632      	mov	r2, r6
 8002d42:	4649      	mov	r1, r9
 8002d44:	4640      	mov	r0, r8
 8002d46:	47d0      	blx	sl
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d0ad      	beq.n	8002ca8 <_printf_i+0x15c>
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	079b      	lsls	r3, r3, #30
 8002d50:	d413      	bmi.n	8002d7a <_printf_i+0x22e>
 8002d52:	68e0      	ldr	r0, [r4, #12]
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	4298      	cmp	r0, r3
 8002d58:	bfb8      	it	lt
 8002d5a:	4618      	movlt	r0, r3
 8002d5c:	e7a6      	b.n	8002cac <_printf_i+0x160>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4632      	mov	r2, r6
 8002d62:	4649      	mov	r1, r9
 8002d64:	4640      	mov	r0, r8
 8002d66:	47d0      	blx	sl
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d09d      	beq.n	8002ca8 <_printf_i+0x15c>
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	68e3      	ldr	r3, [r4, #12]
 8002d70:	9903      	ldr	r1, [sp, #12]
 8002d72:	1a5b      	subs	r3, r3, r1
 8002d74:	42ab      	cmp	r3, r5
 8002d76:	dcf2      	bgt.n	8002d5e <_printf_i+0x212>
 8002d78:	e7eb      	b.n	8002d52 <_printf_i+0x206>
 8002d7a:	2500      	movs	r5, #0
 8002d7c:	f104 0619 	add.w	r6, r4, #25
 8002d80:	e7f5      	b.n	8002d6e <_printf_i+0x222>
 8002d82:	bf00      	nop
 8002d84:	08003181 	.word	0x08003181
 8002d88:	08003192 	.word	0x08003192

08002d8c <__sflush_r>:
 8002d8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d94:	0716      	lsls	r6, r2, #28
 8002d96:	4605      	mov	r5, r0
 8002d98:	460c      	mov	r4, r1
 8002d9a:	d454      	bmi.n	8002e46 <__sflush_r+0xba>
 8002d9c:	684b      	ldr	r3, [r1, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dc02      	bgt.n	8002da8 <__sflush_r+0x1c>
 8002da2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	dd48      	ble.n	8002e3a <__sflush_r+0xae>
 8002da8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002daa:	2e00      	cmp	r6, #0
 8002dac:	d045      	beq.n	8002e3a <__sflush_r+0xae>
 8002dae:	2300      	movs	r3, #0
 8002db0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002db4:	682f      	ldr	r7, [r5, #0]
 8002db6:	6a21      	ldr	r1, [r4, #32]
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	d030      	beq.n	8002e1e <__sflush_r+0x92>
 8002dbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	0759      	lsls	r1, r3, #29
 8002dc2:	d505      	bpl.n	8002dd0 <__sflush_r+0x44>
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002dca:	b10b      	cbz	r3, 8002dd0 <__sflush_r+0x44>
 8002dcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dce:	1ad2      	subs	r2, r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002dd4:	6a21      	ldr	r1, [r4, #32]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	47b0      	blx	r6
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	d106      	bne.n	8002dee <__sflush_r+0x62>
 8002de0:	6829      	ldr	r1, [r5, #0]
 8002de2:	291d      	cmp	r1, #29
 8002de4:	d82b      	bhi.n	8002e3e <__sflush_r+0xb2>
 8002de6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <__sflush_r+0x104>)
 8002de8:	410a      	asrs	r2, r1
 8002dea:	07d6      	lsls	r6, r2, #31
 8002dec:	d427      	bmi.n	8002e3e <__sflush_r+0xb2>
 8002dee:	2200      	movs	r2, #0
 8002df0:	6062      	str	r2, [r4, #4]
 8002df2:	04d9      	lsls	r1, r3, #19
 8002df4:	6922      	ldr	r2, [r4, #16]
 8002df6:	6022      	str	r2, [r4, #0]
 8002df8:	d504      	bpl.n	8002e04 <__sflush_r+0x78>
 8002dfa:	1c42      	adds	r2, r0, #1
 8002dfc:	d101      	bne.n	8002e02 <__sflush_r+0x76>
 8002dfe:	682b      	ldr	r3, [r5, #0]
 8002e00:	b903      	cbnz	r3, 8002e04 <__sflush_r+0x78>
 8002e02:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e06:	602f      	str	r7, [r5, #0]
 8002e08:	b1b9      	cbz	r1, 8002e3a <__sflush_r+0xae>
 8002e0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d002      	beq.n	8002e18 <__sflush_r+0x8c>
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7ff fbf2 	bl	80025fc <_free_r>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e1c:	e00d      	b.n	8002e3a <__sflush_r+0xae>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	4628      	mov	r0, r5
 8002e22:	47b0      	blx	r6
 8002e24:	4602      	mov	r2, r0
 8002e26:	1c50      	adds	r0, r2, #1
 8002e28:	d1c9      	bne.n	8002dbe <__sflush_r+0x32>
 8002e2a:	682b      	ldr	r3, [r5, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0c6      	beq.n	8002dbe <__sflush_r+0x32>
 8002e30:	2b1d      	cmp	r3, #29
 8002e32:	d001      	beq.n	8002e38 <__sflush_r+0xac>
 8002e34:	2b16      	cmp	r3, #22
 8002e36:	d11e      	bne.n	8002e76 <__sflush_r+0xea>
 8002e38:	602f      	str	r7, [r5, #0]
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e022      	b.n	8002e84 <__sflush_r+0xf8>
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	e01b      	b.n	8002e7e <__sflush_r+0xf2>
 8002e46:	690f      	ldr	r7, [r1, #16]
 8002e48:	2f00      	cmp	r7, #0
 8002e4a:	d0f6      	beq.n	8002e3a <__sflush_r+0xae>
 8002e4c:	0793      	lsls	r3, r2, #30
 8002e4e:	680e      	ldr	r6, [r1, #0]
 8002e50:	bf08      	it	eq
 8002e52:	694b      	ldreq	r3, [r1, #20]
 8002e54:	600f      	str	r7, [r1, #0]
 8002e56:	bf18      	it	ne
 8002e58:	2300      	movne	r3, #0
 8002e5a:	eba6 0807 	sub.w	r8, r6, r7
 8002e5e:	608b      	str	r3, [r1, #8]
 8002e60:	f1b8 0f00 	cmp.w	r8, #0
 8002e64:	dde9      	ble.n	8002e3a <__sflush_r+0xae>
 8002e66:	6a21      	ldr	r1, [r4, #32]
 8002e68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002e6a:	4643      	mov	r3, r8
 8002e6c:	463a      	mov	r2, r7
 8002e6e:	4628      	mov	r0, r5
 8002e70:	47b0      	blx	r6
 8002e72:	2800      	cmp	r0, #0
 8002e74:	dc08      	bgt.n	8002e88 <__sflush_r+0xfc>
 8002e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e88:	4407      	add	r7, r0
 8002e8a:	eba8 0800 	sub.w	r8, r8, r0
 8002e8e:	e7e7      	b.n	8002e60 <__sflush_r+0xd4>
 8002e90:	dfbffffe 	.word	0xdfbffffe

08002e94 <_fflush_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	690b      	ldr	r3, [r1, #16]
 8002e98:	4605      	mov	r5, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	b913      	cbnz	r3, 8002ea4 <_fflush_r+0x10>
 8002e9e:	2500      	movs	r5, #0
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	b118      	cbz	r0, 8002eae <_fflush_r+0x1a>
 8002ea6:	6a03      	ldr	r3, [r0, #32]
 8002ea8:	b90b      	cbnz	r3, 8002eae <_fflush_r+0x1a>
 8002eaa:	f7ff fa9f 	bl	80023ec <__sinit>
 8002eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f3      	beq.n	8002e9e <_fflush_r+0xa>
 8002eb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002eb8:	07d0      	lsls	r0, r2, #31
 8002eba:	d404      	bmi.n	8002ec6 <_fflush_r+0x32>
 8002ebc:	0599      	lsls	r1, r3, #22
 8002ebe:	d402      	bmi.n	8002ec6 <_fflush_r+0x32>
 8002ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ec2:	f7ff fb98 	bl	80025f6 <__retarget_lock_acquire_recursive>
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f7ff ff5f 	bl	8002d8c <__sflush_r>
 8002ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ed0:	07da      	lsls	r2, r3, #31
 8002ed2:	4605      	mov	r5, r0
 8002ed4:	d4e4      	bmi.n	8002ea0 <_fflush_r+0xc>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	059b      	lsls	r3, r3, #22
 8002eda:	d4e1      	bmi.n	8002ea0 <_fflush_r+0xc>
 8002edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ede:	f7ff fb8b 	bl	80025f8 <__retarget_lock_release_recursive>
 8002ee2:	e7dd      	b.n	8002ea0 <_fflush_r+0xc>

08002ee4 <__swbuf_r>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	460e      	mov	r6, r1
 8002ee8:	4614      	mov	r4, r2
 8002eea:	4605      	mov	r5, r0
 8002eec:	b118      	cbz	r0, 8002ef6 <__swbuf_r+0x12>
 8002eee:	6a03      	ldr	r3, [r0, #32]
 8002ef0:	b90b      	cbnz	r3, 8002ef6 <__swbuf_r+0x12>
 8002ef2:	f7ff fa7b 	bl	80023ec <__sinit>
 8002ef6:	69a3      	ldr	r3, [r4, #24]
 8002ef8:	60a3      	str	r3, [r4, #8]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	071a      	lsls	r2, r3, #28
 8002efe:	d501      	bpl.n	8002f04 <__swbuf_r+0x20>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	b943      	cbnz	r3, 8002f16 <__swbuf_r+0x32>
 8002f04:	4621      	mov	r1, r4
 8002f06:	4628      	mov	r0, r5
 8002f08:	f000 f82a 	bl	8002f60 <__swsetup_r>
 8002f0c:	b118      	cbz	r0, 8002f16 <__swbuf_r+0x32>
 8002f0e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f12:	4638      	mov	r0, r7
 8002f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	6922      	ldr	r2, [r4, #16]
 8002f1a:	1a98      	subs	r0, r3, r2
 8002f1c:	6963      	ldr	r3, [r4, #20]
 8002f1e:	b2f6      	uxtb	r6, r6
 8002f20:	4283      	cmp	r3, r0
 8002f22:	4637      	mov	r7, r6
 8002f24:	dc05      	bgt.n	8002f32 <__swbuf_r+0x4e>
 8002f26:	4621      	mov	r1, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f7ff ffb3 	bl	8002e94 <_fflush_r>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d1ed      	bne.n	8002f0e <__swbuf_r+0x2a>
 8002f32:	68a3      	ldr	r3, [r4, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60a3      	str	r3, [r4, #8]
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	6022      	str	r2, [r4, #0]
 8002f3e:	701e      	strb	r6, [r3, #0]
 8002f40:	6962      	ldr	r2, [r4, #20]
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d004      	beq.n	8002f52 <__swbuf_r+0x6e>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	07db      	lsls	r3, r3, #31
 8002f4c:	d5e1      	bpl.n	8002f12 <__swbuf_r+0x2e>
 8002f4e:	2e0a      	cmp	r6, #10
 8002f50:	d1df      	bne.n	8002f12 <__swbuf_r+0x2e>
 8002f52:	4621      	mov	r1, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	f7ff ff9d 	bl	8002e94 <_fflush_r>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d0d9      	beq.n	8002f12 <__swbuf_r+0x2e>
 8002f5e:	e7d6      	b.n	8002f0e <__swbuf_r+0x2a>

08002f60 <__swsetup_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <__swsetup_r+0xa8>)
 8002f64:	4605      	mov	r5, r0
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	460c      	mov	r4, r1
 8002f6a:	b118      	cbz	r0, 8002f74 <__swsetup_r+0x14>
 8002f6c:	6a03      	ldr	r3, [r0, #32]
 8002f6e:	b90b      	cbnz	r3, 8002f74 <__swsetup_r+0x14>
 8002f70:	f7ff fa3c 	bl	80023ec <__sinit>
 8002f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f78:	0719      	lsls	r1, r3, #28
 8002f7a:	d422      	bmi.n	8002fc2 <__swsetup_r+0x62>
 8002f7c:	06da      	lsls	r2, r3, #27
 8002f7e:	d407      	bmi.n	8002f90 <__swsetup_r+0x30>
 8002f80:	2209      	movs	r2, #9
 8002f82:	602a      	str	r2, [r5, #0]
 8002f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8e:	e033      	b.n	8002ff8 <__swsetup_r+0x98>
 8002f90:	0758      	lsls	r0, r3, #29
 8002f92:	d512      	bpl.n	8002fba <__swsetup_r+0x5a>
 8002f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f96:	b141      	cbz	r1, 8002faa <__swsetup_r+0x4a>
 8002f98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <__swsetup_r+0x46>
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7ff fb2b 	bl	80025fc <_free_r>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	b94b      	cbnz	r3, 8002fda <__swsetup_r+0x7a>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd0:	d003      	beq.n	8002fda <__swsetup_r+0x7a>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f000 f84f 	bl	8003078 <__smakebuf_r>
 8002fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fde:	f013 0201 	ands.w	r2, r3, #1
 8002fe2:	d00a      	beq.n	8002ffa <__swsetup_r+0x9a>
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60a2      	str	r2, [r4, #8]
 8002fe8:	6962      	ldr	r2, [r4, #20]
 8002fea:	4252      	negs	r2, r2
 8002fec:	61a2      	str	r2, [r4, #24]
 8002fee:	6922      	ldr	r2, [r4, #16]
 8002ff0:	b942      	cbnz	r2, 8003004 <__swsetup_r+0xa4>
 8002ff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ff6:	d1c5      	bne.n	8002f84 <__swsetup_r+0x24>
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
 8002ffa:	0799      	lsls	r1, r3, #30
 8002ffc:	bf58      	it	pl
 8002ffe:	6962      	ldrpl	r2, [r4, #20]
 8003000:	60a2      	str	r2, [r4, #8]
 8003002:	e7f4      	b.n	8002fee <__swsetup_r+0x8e>
 8003004:	2000      	movs	r0, #0
 8003006:	e7f7      	b.n	8002ff8 <__swsetup_r+0x98>
 8003008:	20000018 	.word	0x20000018

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d06      	ldr	r5, [pc, #24]	@ (8003028 <_sbrk_r+0x1c>)
 8003010:	2300      	movs	r3, #0
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7ff f88a 	bl	8002130 <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000254 	.word	0x20000254

0800302c <__swhatbuf_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	460c      	mov	r4, r1
 8003030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003034:	2900      	cmp	r1, #0
 8003036:	b096      	sub	sp, #88	@ 0x58
 8003038:	4615      	mov	r5, r2
 800303a:	461e      	mov	r6, r3
 800303c:	da0d      	bge.n	800305a <__swhatbuf_r+0x2e>
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	bf14      	ite	ne
 800304a:	2340      	movne	r3, #64	@ 0x40
 800304c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003050:	2000      	movs	r0, #0
 8003052:	6031      	str	r1, [r6, #0]
 8003054:	602b      	str	r3, [r5, #0]
 8003056:	b016      	add	sp, #88	@ 0x58
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	466a      	mov	r2, sp
 800305c:	f000 f848 	bl	80030f0 <_fstat_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	dbec      	blt.n	800303e <__swhatbuf_r+0x12>
 8003064:	9901      	ldr	r1, [sp, #4]
 8003066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800306a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800306e:	4259      	negs	r1, r3
 8003070:	4159      	adcs	r1, r3
 8003072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003076:	e7eb      	b.n	8003050 <__swhatbuf_r+0x24>

08003078 <__smakebuf_r>:
 8003078:	898b      	ldrh	r3, [r1, #12]
 800307a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800307c:	079d      	lsls	r5, r3, #30
 800307e:	4606      	mov	r6, r0
 8003080:	460c      	mov	r4, r1
 8003082:	d507      	bpl.n	8003094 <__smakebuf_r+0x1c>
 8003084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	2301      	movs	r3, #1
 800308e:	6163      	str	r3, [r4, #20]
 8003090:	b003      	add	sp, #12
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003094:	ab01      	add	r3, sp, #4
 8003096:	466a      	mov	r2, sp
 8003098:	f7ff ffc8 	bl	800302c <__swhatbuf_r>
 800309c:	9f00      	ldr	r7, [sp, #0]
 800309e:	4605      	mov	r5, r0
 80030a0:	4639      	mov	r1, r7
 80030a2:	4630      	mov	r0, r6
 80030a4:	f7ff fb16 	bl	80026d4 <_malloc_r>
 80030a8:	b948      	cbnz	r0, 80030be <__smakebuf_r+0x46>
 80030aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ae:	059a      	lsls	r2, r3, #22
 80030b0:	d4ee      	bmi.n	8003090 <__smakebuf_r+0x18>
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	e7e2      	b.n	8003084 <__smakebuf_r+0xc>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	6020      	str	r0, [r4, #0]
 80030c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	9b01      	ldr	r3, [sp, #4]
 80030ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80030ce:	b15b      	cbz	r3, 80030e8 <__smakebuf_r+0x70>
 80030d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030d4:	4630      	mov	r0, r6
 80030d6:	f000 f81d 	bl	8003114 <_isatty_r>
 80030da:	b128      	cbz	r0, 80030e8 <__smakebuf_r+0x70>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	81a3      	strh	r3, [r4, #12]
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	431d      	orrs	r5, r3
 80030ec:	81a5      	strh	r5, [r4, #12]
 80030ee:	e7cf      	b.n	8003090 <__smakebuf_r+0x18>

080030f0 <_fstat_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4d07      	ldr	r5, [pc, #28]	@ (8003110 <_fstat_r+0x20>)
 80030f4:	2300      	movs	r3, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f7fe ffee 	bl	80020de <_fstat>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d102      	bne.n	800310c <_fstat_r+0x1c>
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	b103      	cbz	r3, 800310c <_fstat_r+0x1c>
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	bf00      	nop
 8003110:	20000254 	.word	0x20000254

08003114 <_isatty_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4d06      	ldr	r5, [pc, #24]	@ (8003130 <_isatty_r+0x1c>)
 8003118:	2300      	movs	r3, #0
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fe ffed 	bl	80020fe <_isatty>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_isatty_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_isatty_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	20000254 	.word	0x20000254

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
