
6_Multiple GPIO_Interrupts_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000292c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002acc  08002acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b38  08002b38  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b40  08002b40  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002b48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000068  08002bb0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08002bb0  00004218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ff1  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135f  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000483  00000000  00000000  0000aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016810  00000000  00000000  0000ae9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075cd  00000000  00000000  000216ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bed2  00000000  00000000  00028c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc4  00000000  00000000  000b4b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b6b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002ab4 	.word	0x08002ab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002ab4 	.word	0x08002ab4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f933 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f943 	bl	800086e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90b 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	@ (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	@ (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	@ 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f7ff ff8e 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff29 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff3e 	bl	80006ac <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff31 	bl	80006c8 <__NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffa2 	bl	80007c0 <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e159      	b.n	8000b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008a4:	2201      	movs	r2, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	429a      	cmp	r2, r3
 80008be:	f040 8148 	bne.w	8000b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d00b      	beq.n	80008e2 <HAL_GPIO_Init+0x5a>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d007      	beq.n	80008e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	2b11      	cmp	r3, #17
 80008d8:	d003      	beq.n	80008e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d130      	bne.n	8000944 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4013      	ands	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	68da      	ldr	r2, [r3, #12]
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4313      	orrs	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000918:	2201      	movs	r2, #1
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4013      	ands	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	f003 0201 	and.w	r2, r3, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4313      	orrs	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0xfc>
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d123      	bne.n	80009cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	08da      	lsrs	r2, r3, #3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3208      	adds	r2, #8
 800098c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	691a      	ldr	r2, [r3, #16]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	08da      	lsrs	r2, r3, #3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3208      	adds	r2, #8
 80009c6:	69b9      	ldr	r1, [r7, #24]
 80009c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0203 	and.w	r2, r3, #3
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 80a2 	beq.w	8000b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b57      	ldr	r3, [pc, #348]	@ (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a56      	ldr	r2, [pc, #344]	@ (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b54      	ldr	r3, [pc, #336]	@ (8000b70 <HAL_GPIO_Init+0x2e8>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a2a:	4a52      	ldr	r2, [pc, #328]	@ (8000b74 <HAL_GPIO_Init+0x2ec>)
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a49      	ldr	r2, [pc, #292]	@ (8000b78 <HAL_GPIO_Init+0x2f0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d019      	beq.n	8000a8a <HAL_GPIO_Init+0x202>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a48      	ldr	r2, [pc, #288]	@ (8000b7c <HAL_GPIO_Init+0x2f4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d013      	beq.n	8000a86 <HAL_GPIO_Init+0x1fe>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a47      	ldr	r2, [pc, #284]	@ (8000b80 <HAL_GPIO_Init+0x2f8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00d      	beq.n	8000a82 <HAL_GPIO_Init+0x1fa>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a46      	ldr	r2, [pc, #280]	@ (8000b84 <HAL_GPIO_Init+0x2fc>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d007      	beq.n	8000a7e <HAL_GPIO_Init+0x1f6>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a45      	ldr	r2, [pc, #276]	@ (8000b88 <HAL_GPIO_Init+0x300>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_GPIO_Init+0x1f2>
 8000a76:	2304      	movs	r3, #4
 8000a78:	e008      	b.n	8000a8c <HAL_GPIO_Init+0x204>
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x204>
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e004      	b.n	8000a8c <HAL_GPIO_Init+0x204>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e002      	b.n	8000a8c <HAL_GPIO_Init+0x204>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x204>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	f002 0203 	and.w	r2, r2, #3
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	4093      	lsls	r3, r2
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9c:	4935      	ldr	r1, [pc, #212]	@ (8000b74 <HAL_GPIO_Init+0x2ec>)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ace:	4a2f      	ldr	r2, [pc, #188]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000af8:	4a24      	ldr	r2, [pc, #144]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b22:	4a1a      	ldr	r2, [pc, #104]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	f67f aea2 	bls.w	80008a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40013c00 	.word	0x40013c00

08000b90 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d104      	bne.n	8000bb4 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bb4:	887a      	ldrh	r2, [r7, #2]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	619a      	str	r2, [r3, #24]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fec2 	bl	8001970 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013c00 	.word	0x40013c00

08000bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c14:	f7ff fff0 	bl	8000bf8 <HAL_RCC_GetHCLKFreq>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	0a9b      	lsrs	r3, r3, #10
 8000c20:	f003 0307 	and.w	r3, r3, #7
 8000c24:	4903      	ldr	r1, [pc, #12]	@ (8000c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c26:	5ccb      	ldrb	r3, [r1, r3]
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	08002afc 	.word	0x08002afc

08000c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c3c:	f7ff ffdc 	bl	8000bf8 <HAL_RCC_GetHCLKFreq>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	0b5b      	lsrs	r3, r3, #13
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	4903      	ldr	r1, [pc, #12]	@ (8000c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	08002afc 	.word	0x08002afc

08000c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e03f      	b.n	8000cf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f837 	bl	8000cfa <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f915 	bl	8000ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2220      	movs	r2, #32
 8000cec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b088      	sub	sp, #32
 8000d12:	af02      	add	r7, sp, #8
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b20      	cmp	r3, #32
 8000d2c:	f040 8083 	bne.w	8000e36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_UART_Transmit+0x2e>
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e07b      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_UART_Transmit+0x40>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e074      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2221      	movs	r2, #33	@ 0x21
 8000d60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000d64:	f7ff fc72 	bl	800064c <HAL_GetTick>
 8000d68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	88fa      	ldrh	r2, [r7, #6]
 8000d74:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8000d7e:	e042      	b.n	8000e06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	3b01      	subs	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d96:	d122      	bne.n	8000dde <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f84c 	bl	8000e40 <UART_WaitOnFlagUntilTimeout>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e042      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e017      	b.n	8000e06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	e013      	b.n	8000e06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2200      	movs	r2, #0
 8000de6:	2180      	movs	r1, #128	@ 0x80
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f829 	bl	8000e40 <UART_WaitOnFlagUntilTimeout>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e01f      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1b7      	bne.n	8000d80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2200      	movs	r2, #0
 8000e18:	2140      	movs	r1, #64	@ 0x40
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 f810 	bl	8000e40 <UART_WaitOnFlagUntilTimeout>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e006      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000e36:	2302      	movs	r3, #2
  }
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e50:	e02c      	b.n	8000eac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d028      	beq.n	8000eac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8000e60:	f7ff fbf4 	bl	800064c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d21d      	bcs.n	8000eac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8000e7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2220      	movs	r2, #32
 8000e94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e00f      	b.n	8000ecc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d0c3      	beq.n	8000e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ed8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ee2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8000eee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000ef2:	68d9      	ldr	r1, [r3, #12]
 8000ef4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	ea40 0301 	orr.w	r3, r0, r1
 8000efe:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8000f2e:	f021 010c 	bic.w	r1, r1, #12
 8000f32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8000f4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f50:	6999      	ldr	r1, [r3, #24]
 8000f52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	ea40 0301 	orr.w	r3, r0, r1
 8000f5c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f68:	f040 824a 	bne.w	8001400 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b96      	ldr	r3, [pc, #600]	@ (80011cc <UART_SetConfig+0x2f8>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d006      	beq.n	8000f86 <UART_SetConfig+0xb2>
 8000f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b94      	ldr	r3, [pc, #592]	@ (80011d0 <UART_SetConfig+0x2fc>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8129 	bne.w	80011d8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f86:	f7ff fe57 	bl	8000c38 <HAL_RCC_GetPCLK2Freq>
 8000f8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8000f98:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8000f9c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	462b      	mov	r3, r5
 8000fa4:	1891      	adds	r1, r2, r2
 8000fa6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8000faa:	415b      	adcs	r3, r3
 8000fac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fb0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	1851      	adds	r1, r2, r1
 8000fb8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	414b      	adcs	r3, r1
 8000fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	00cb      	lsls	r3, r1, #3
 8000fd4:	4641      	mov	r1, r8
 8000fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000fda:	4641      	mov	r1, r8
 8000fdc:	00ca      	lsls	r2, r1, #3
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000fec:	462b      	mov	r3, r5
 8000fee:	460a      	mov	r2, r1
 8000ff0:	eb42 0303 	adc.w	r3, r2, r3
 8000ff4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8000ff8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001004:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001008:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 800100c:	460b      	mov	r3, r1
 800100e:	18db      	adds	r3, r3, r3
 8001010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001014:	4613      	mov	r3, r2
 8001016:	eb42 0303 	adc.w	r3, r2, r3
 800101a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800101e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001022:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001026:	f7ff f92b 	bl	8000280 <__aeabi_uldivmod>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4b69      	ldr	r3, [pc, #420]	@ (80011d4 <UART_SetConfig+0x300>)
 8001030:	fba3 2302 	umull	r2, r3, r3, r2
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	011c      	lsls	r4, r3, #4
 8001038:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800103c:	2200      	movs	r2, #0
 800103e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001042:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001046:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800104a:	4642      	mov	r2, r8
 800104c:	464b      	mov	r3, r9
 800104e:	1891      	adds	r1, r2, r2
 8001050:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001054:	415b      	adcs	r3, r3
 8001056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800105a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800105e:	4641      	mov	r1, r8
 8001060:	1851      	adds	r1, r2, r1
 8001062:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001066:	4649      	mov	r1, r9
 8001068:	414b      	adcs	r3, r1
 800106a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800107a:	4659      	mov	r1, fp
 800107c:	00cb      	lsls	r3, r1, #3
 800107e:	4651      	mov	r1, sl
 8001080:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001084:	4651      	mov	r1, sl
 8001086:	00ca      	lsls	r2, r1, #3
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	4603      	mov	r3, r0
 800108e:	4642      	mov	r2, r8
 8001090:	189b      	adds	r3, r3, r2
 8001092:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001096:	464b      	mov	r3, r9
 8001098:	460a      	mov	r2, r1
 800109a:	eb42 0303 	adc.w	r3, r2, r3
 800109e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80010a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80010ae:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80010b2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80010b6:	460b      	mov	r3, r1
 80010b8:	18db      	adds	r3, r3, r3
 80010ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80010be:	4613      	mov	r3, r2
 80010c0:	eb42 0303 	adc.w	r3, r2, r3
 80010c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010c8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80010cc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80010d0:	f7ff f8d6 	bl	8000280 <__aeabi_uldivmod>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <UART_SetConfig+0x300>)
 80010dc:	fba3 2301 	umull	r2, r3, r3, r1
 80010e0:	095b      	lsrs	r3, r3, #5
 80010e2:	2264      	movs	r2, #100	@ 0x64
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80010f0:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <UART_SetConfig+0x300>)
 80010f2:	fba3 2302 	umull	r2, r3, r3, r2
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80010fe:	441c      	add	r4, r3
 8001100:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001104:	2200      	movs	r2, #0
 8001106:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800110a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800110e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001112:	4642      	mov	r2, r8
 8001114:	464b      	mov	r3, r9
 8001116:	1891      	adds	r1, r2, r2
 8001118:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800111c:	415b      	adcs	r3, r3
 800111e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001122:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001126:	4641      	mov	r1, r8
 8001128:	1851      	adds	r1, r2, r1
 800112a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800112e:	4649      	mov	r1, r9
 8001130:	414b      	adcs	r3, r1
 8001132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8001142:	4659      	mov	r1, fp
 8001144:	00cb      	lsls	r3, r1, #3
 8001146:	4651      	mov	r1, sl
 8001148:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800114c:	4651      	mov	r1, sl
 800114e:	00ca      	lsls	r2, r1, #3
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	4603      	mov	r3, r0
 8001156:	4642      	mov	r2, r8
 8001158:	189b      	adds	r3, r3, r2
 800115a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800115e:	464b      	mov	r3, r9
 8001160:	460a      	mov	r2, r1
 8001162:	eb42 0303 	adc.w	r3, r2, r3
 8001166:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800116a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001176:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800117a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800117e:	460b      	mov	r3, r1
 8001180:	18db      	adds	r3, r3, r3
 8001182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001186:	4613      	mov	r3, r2
 8001188:	eb42 0303 	adc.w	r3, r2, r3
 800118c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001190:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001194:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8001198:	f7ff f872 	bl	8000280 <__aeabi_uldivmod>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <UART_SetConfig+0x300>)
 80011a2:	fba3 1302 	umull	r1, r3, r3, r2
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2164      	movs	r1, #100	@ 0x64
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	3332      	adds	r3, #50	@ 0x32
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <UART_SetConfig+0x300>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	f003 0207 	and.w	r2, r3, #7
 80011c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4422      	add	r2, r4
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	e34a      	b.n	8001862 <UART_SetConfig+0x98e>
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80011d8:	f7ff fd1a 	bl	8000c10 <HAL_RCC_GetPCLK1Freq>
 80011dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80011ea:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80011ee:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80011f2:	4622      	mov	r2, r4
 80011f4:	462b      	mov	r3, r5
 80011f6:	1891      	adds	r1, r2, r2
 80011f8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80011fc:	415b      	adcs	r3, r3
 80011fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001202:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001206:	4621      	mov	r1, r4
 8001208:	eb12 0a01 	adds.w	sl, r2, r1
 800120c:	4629      	mov	r1, r5
 800120e:	eb43 0b01 	adc.w	fp, r3, r1
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800121e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001226:	4692      	mov	sl, r2
 8001228:	469b      	mov	fp, r3
 800122a:	4623      	mov	r3, r4
 800122c:	eb1a 0303 	adds.w	r3, sl, r3
 8001230:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001234:	462b      	mov	r3, r5
 8001236:	eb4b 0303 	adc.w	r3, fp, r3
 800123a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800123e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800124a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800124e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8001252:	460b      	mov	r3, r1
 8001254:	18db      	adds	r3, r3, r3
 8001256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800125a:	4613      	mov	r3, r2
 800125c:	eb42 0303 	adc.w	r3, r2, r3
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001264:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001268:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800126c:	f7ff f808 	bl	8000280 <__aeabi_uldivmod>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4b61      	ldr	r3, [pc, #388]	@ (80013fc <UART_SetConfig+0x528>)
 8001276:	fba3 2302 	umull	r2, r3, r3, r2
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	011c      	lsls	r4, r3, #4
 800127e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001282:	2200      	movs	r2, #0
 8001284:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001288:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800128c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8001290:	4642      	mov	r2, r8
 8001292:	464b      	mov	r3, r9
 8001294:	1891      	adds	r1, r2, r2
 8001296:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001298:	415b      	adcs	r3, r3
 800129a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800129c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80012a0:	4641      	mov	r1, r8
 80012a2:	1851      	adds	r1, r2, r1
 80012a4:	6739      	str	r1, [r7, #112]	@ 0x70
 80012a6:	4649      	mov	r1, r9
 80012a8:	414b      	adcs	r3, r1
 80012aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80012b8:	4659      	mov	r1, fp
 80012ba:	00cb      	lsls	r3, r1, #3
 80012bc:	4651      	mov	r1, sl
 80012be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012c2:	4651      	mov	r1, sl
 80012c4:	00ca      	lsls	r2, r1, #3
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	4642      	mov	r2, r8
 80012ce:	189b      	adds	r3, r3, r2
 80012d0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80012d4:	464b      	mov	r3, r9
 80012d6:	460a      	mov	r2, r1
 80012d8:	eb42 0303 	adc.w	r3, r2, r3
 80012dc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80012e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80012ec:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80012f0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80012f4:	460b      	mov	r3, r1
 80012f6:	18db      	adds	r3, r3, r3
 80012f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012fa:	4613      	mov	r3, r2
 80012fc:	eb42 0303 	adc.w	r3, r2, r3
 8001300:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001302:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001306:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800130a:	f7fe ffb9 	bl	8000280 <__aeabi_uldivmod>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4611      	mov	r1, r2
 8001314:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <UART_SetConfig+0x528>)
 8001316:	fba3 2301 	umull	r2, r3, r3, r1
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2264      	movs	r2, #100	@ 0x64
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	1acb      	subs	r3, r1, r3
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800132a:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <UART_SetConfig+0x528>)
 800132c:	fba3 2302 	umull	r2, r3, r3, r2
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001338:	441c      	add	r4, r3
 800133a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800133e:	2200      	movs	r2, #0
 8001340:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001344:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001348:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 800134c:	4642      	mov	r2, r8
 800134e:	464b      	mov	r3, r9
 8001350:	1891      	adds	r1, r2, r2
 8001352:	6639      	str	r1, [r7, #96]	@ 0x60
 8001354:	415b      	adcs	r3, r3
 8001356:	667b      	str	r3, [r7, #100]	@ 0x64
 8001358:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800135c:	4641      	mov	r1, r8
 800135e:	1851      	adds	r1, r2, r1
 8001360:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001362:	4649      	mov	r1, r9
 8001364:	414b      	adcs	r3, r1
 8001366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8001374:	4659      	mov	r1, fp
 8001376:	00cb      	lsls	r3, r1, #3
 8001378:	4651      	mov	r1, sl
 800137a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800137e:	4651      	mov	r1, sl
 8001380:	00ca      	lsls	r2, r1, #3
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	4603      	mov	r3, r0
 8001388:	4642      	mov	r2, r8
 800138a:	189b      	adds	r3, r3, r2
 800138c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001390:	464b      	mov	r3, r9
 8001392:	460a      	mov	r2, r1
 8001394:	eb42 0303 	adc.w	r3, r2, r3
 8001398:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800139c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80013a8:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80013ac:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80013b0:	460b      	mov	r3, r1
 80013b2:	18db      	adds	r3, r3, r3
 80013b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80013b6:	4613      	mov	r3, r2
 80013b8:	eb42 0303 	adc.w	r3, r2, r3
 80013bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80013be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013c2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80013c6:	f7fe ff5b 	bl	8000280 <__aeabi_uldivmod>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <UART_SetConfig+0x528>)
 80013d0:	fba3 1302 	umull	r1, r3, r3, r2
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	2164      	movs	r1, #100	@ 0x64
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	3332      	adds	r3, #50	@ 0x32
 80013e2:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <UART_SetConfig+0x528>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	f003 0207 	and.w	r2, r3, #7
 80013ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4422      	add	r2, r4
 80013f6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80013f8:	e233      	b.n	8001862 <UART_SetConfig+0x98e>
 80013fa:	bf00      	nop
 80013fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001400:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b8d      	ldr	r3, [pc, #564]	@ (800163c <UART_SetConfig+0x768>)
 8001408:	429a      	cmp	r2, r3
 800140a:	d006      	beq.n	800141a <UART_SetConfig+0x546>
 800140c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <UART_SetConfig+0x76c>)
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8117 	bne.w	8001648 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800141a:	f7ff fc0d 	bl	8000c38 <HAL_RCC_GetPCLK2Freq>
 800141e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001426:	2200      	movs	r2, #0
 8001428:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800142c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8001430:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001434:	4622      	mov	r2, r4
 8001436:	462b      	mov	r3, r5
 8001438:	1891      	adds	r1, r2, r2
 800143a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800143c:	415b      	adcs	r3, r3
 800143e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001444:	4621      	mov	r1, r4
 8001446:	eb12 0801 	adds.w	r8, r2, r1
 800144a:	4629      	mov	r1, r5
 800144c:	eb43 0901 	adc.w	r9, r3, r1
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800145c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001460:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	4623      	mov	r3, r4
 800146a:	eb18 0303 	adds.w	r3, r8, r3
 800146e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001472:	462b      	mov	r3, r5
 8001474:	eb49 0303 	adc.w	r3, r9, r3
 8001478:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800147c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001488:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8001498:	4629      	mov	r1, r5
 800149a:	008b      	lsls	r3, r1, #2
 800149c:	4621      	mov	r1, r4
 800149e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014a2:	4621      	mov	r1, r4
 80014a4:	008a      	lsls	r2, r1, #2
 80014a6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80014aa:	f7fe fee9 	bl	8000280 <__aeabi_uldivmod>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4b64      	ldr	r3, [pc, #400]	@ (8001644 <UART_SetConfig+0x770>)
 80014b4:	fba3 2302 	umull	r2, r3, r3, r2
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	011c      	lsls	r4, r3, #4
 80014bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80014c6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80014ca:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80014ce:	4642      	mov	r2, r8
 80014d0:	464b      	mov	r3, r9
 80014d2:	1891      	adds	r1, r2, r2
 80014d4:	6439      	str	r1, [r7, #64]	@ 0x40
 80014d6:	415b      	adcs	r3, r3
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80014da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80014de:	4641      	mov	r1, r8
 80014e0:	1851      	adds	r1, r2, r1
 80014e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014e4:	4649      	mov	r1, r9
 80014e6:	414b      	adcs	r3, r1
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80014f6:	4659      	mov	r1, fp
 80014f8:	00cb      	lsls	r3, r1, #3
 80014fa:	4651      	mov	r1, sl
 80014fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001500:	4651      	mov	r1, sl
 8001502:	00ca      	lsls	r2, r1, #3
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	4603      	mov	r3, r0
 800150a:	4642      	mov	r2, r8
 800150c:	189b      	adds	r3, r3, r2
 800150e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001512:	464b      	mov	r3, r9
 8001514:	460a      	mov	r2, r1
 8001516:	eb42 0303 	adc.w	r3, r2, r3
 800151a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800151e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800152a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800153a:	4649      	mov	r1, r9
 800153c:	008b      	lsls	r3, r1, #2
 800153e:	4641      	mov	r1, r8
 8001540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001544:	4641      	mov	r1, r8
 8001546:	008a      	lsls	r2, r1, #2
 8001548:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800154c:	f7fe fe98 	bl	8000280 <__aeabi_uldivmod>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4611      	mov	r1, r2
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <UART_SetConfig+0x770>)
 8001558:	fba3 2301 	umull	r2, r3, r3, r1
 800155c:	095b      	lsrs	r3, r3, #5
 800155e:	2264      	movs	r2, #100	@ 0x64
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	1acb      	subs	r3, r1, r3
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	3332      	adds	r3, #50	@ 0x32
 800156a:	4a36      	ldr	r2, [pc, #216]	@ (8001644 <UART_SetConfig+0x770>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	095b      	lsrs	r3, r3, #5
 8001572:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001576:	441c      	add	r4, r3
 8001578:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800157c:	2200      	movs	r2, #0
 800157e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001582:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001586:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 800158a:	4642      	mov	r2, r8
 800158c:	464b      	mov	r3, r9
 800158e:	1891      	adds	r1, r2, r2
 8001590:	6339      	str	r1, [r7, #48]	@ 0x30
 8001592:	415b      	adcs	r3, r3
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800159a:	4641      	mov	r1, r8
 800159c:	1851      	adds	r1, r2, r1
 800159e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015a0:	4649      	mov	r1, r9
 80015a2:	414b      	adcs	r3, r1
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80015b2:	4659      	mov	r1, fp
 80015b4:	00cb      	lsls	r3, r1, #3
 80015b6:	4651      	mov	r1, sl
 80015b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015bc:	4651      	mov	r1, sl
 80015be:	00ca      	lsls	r2, r1, #3
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	4642      	mov	r2, r8
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80015ce:	464b      	mov	r3, r9
 80015d0:	460a      	mov	r2, r1
 80015d2:	eb42 0303 	adc.w	r3, r2, r3
 80015d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015e6:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80015f6:	4649      	mov	r1, r9
 80015f8:	008b      	lsls	r3, r1, #2
 80015fa:	4641      	mov	r1, r8
 80015fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001600:	4641      	mov	r1, r8
 8001602:	008a      	lsls	r2, r1, #2
 8001604:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001608:	f7fe fe3a 	bl	8000280 <__aeabi_uldivmod>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <UART_SetConfig+0x770>)
 8001612:	fba3 1302 	umull	r1, r3, r3, r2
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2164      	movs	r1, #100	@ 0x64
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	3332      	adds	r3, #50	@ 0x32
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <UART_SetConfig+0x770>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	f003 020f 	and.w	r2, r3, #15
 8001630:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4422      	add	r2, r4
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	e112      	b.n	8001862 <UART_SetConfig+0x98e>
 800163c:	40011000 	.word	0x40011000
 8001640:	40011400 	.word	0x40011400
 8001644:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001648:	f7ff fae2 	bl	8000c10 <HAL_RCC_GetPCLK1Freq>
 800164c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001650:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001654:	2200      	movs	r2, #0
 8001656:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800165a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800165e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8001662:	4642      	mov	r2, r8
 8001664:	464b      	mov	r3, r9
 8001666:	1891      	adds	r1, r2, r2
 8001668:	6239      	str	r1, [r7, #32]
 800166a:	415b      	adcs	r3, r3
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
 800166e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001672:	4641      	mov	r1, r8
 8001674:	1854      	adds	r4, r2, r1
 8001676:	4649      	mov	r1, r9
 8001678:	eb43 0501 	adc.w	r5, r3, r1
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	00eb      	lsls	r3, r5, #3
 8001686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800168a:	00e2      	lsls	r2, r4, #3
 800168c:	4614      	mov	r4, r2
 800168e:	461d      	mov	r5, r3
 8001690:	4643      	mov	r3, r8
 8001692:	18e3      	adds	r3, r4, r3
 8001694:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001698:	464b      	mov	r3, r9
 800169a:	eb45 0303 	adc.w	r3, r5, r3
 800169e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80016a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80016ae:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80016be:	4629      	mov	r1, r5
 80016c0:	008b      	lsls	r3, r1, #2
 80016c2:	4621      	mov	r1, r4
 80016c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016c8:	4621      	mov	r1, r4
 80016ca:	008a      	lsls	r2, r1, #2
 80016cc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80016d0:	f7fe fdd6 	bl	8000280 <__aeabi_uldivmod>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <UART_SetConfig+0x99c>)
 80016da:	fba3 2302 	umull	r2, r3, r3, r2
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	011c      	lsls	r4, r3, #4
 80016e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016ec:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80016f0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80016f4:	4642      	mov	r2, r8
 80016f6:	464b      	mov	r3, r9
 80016f8:	1891      	adds	r1, r2, r2
 80016fa:	61b9      	str	r1, [r7, #24]
 80016fc:	415b      	adcs	r3, r3
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001704:	4641      	mov	r1, r8
 8001706:	1851      	adds	r1, r2, r1
 8001708:	6139      	str	r1, [r7, #16]
 800170a:	4649      	mov	r1, r9
 800170c:	414b      	adcs	r3, r1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800171c:	4659      	mov	r1, fp
 800171e:	00cb      	lsls	r3, r1, #3
 8001720:	4651      	mov	r1, sl
 8001722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001726:	4651      	mov	r1, sl
 8001728:	00ca      	lsls	r2, r1, #3
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	4603      	mov	r3, r0
 8001730:	4642      	mov	r2, r8
 8001732:	189b      	adds	r3, r3, r2
 8001734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001738:	464b      	mov	r3, r9
 800173a:	460a      	mov	r2, r1
 800173c:	eb42 0303 	adc.w	r3, r2, r3
 8001740:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001744:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001750:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001760:	4649      	mov	r1, r9
 8001762:	008b      	lsls	r3, r1, #2
 8001764:	4641      	mov	r1, r8
 8001766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800176a:	4641      	mov	r1, r8
 800176c:	008a      	lsls	r2, r1, #2
 800176e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001772:	f7fe fd85 	bl	8000280 <__aeabi_uldivmod>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4611      	mov	r1, r2
 800177c:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <UART_SetConfig+0x99c>)
 800177e:	fba3 2301 	umull	r2, r3, r3, r1
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2264      	movs	r2, #100	@ 0x64
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	1acb      	subs	r3, r1, r3
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	3332      	adds	r3, #50	@ 0x32
 8001790:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <UART_SetConfig+0x99c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800179c:	441c      	add	r4, r3
 800179e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017a8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017ac:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017b0:	4642      	mov	r2, r8
 80017b2:	464b      	mov	r3, r9
 80017b4:	1891      	adds	r1, r2, r2
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	415b      	adcs	r3, r3
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017c0:	4641      	mov	r1, r8
 80017c2:	1851      	adds	r1, r2, r1
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	4649      	mov	r1, r9
 80017c8:	414b      	adcs	r3, r1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017d8:	4659      	mov	r1, fp
 80017da:	00cb      	lsls	r3, r1, #3
 80017dc:	4651      	mov	r1, sl
 80017de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017e2:	4651      	mov	r1, sl
 80017e4:	00ca      	lsls	r2, r1, #3
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	4642      	mov	r2, r8
 80017ee:	189b      	adds	r3, r3, r2
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80017f4:	464b      	mov	r3, r9
 80017f6:	460a      	mov	r2, r1
 80017f8:	eb42 0303 	adc.w	r3, r2, r3
 80017fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001800:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800180c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800181c:	4649      	mov	r1, r9
 800181e:	008b      	lsls	r3, r1, #2
 8001820:	4641      	mov	r1, r8
 8001822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001826:	4641      	mov	r1, r8
 8001828:	008a      	lsls	r2, r1, #2
 800182a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800182e:	f7fe fd27 	bl	8000280 <__aeabi_uldivmod>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <UART_SetConfig+0x99c>)
 8001838:	fba3 1302 	umull	r1, r3, r3, r2
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	2164      	movs	r1, #100	@ 0x64
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	3332      	adds	r3, #50	@ 0x32
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <UART_SetConfig+0x99c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	f003 020f 	and.w	r2, r3, #15
 8001856:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4422      	add	r2, r4
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	e7ff      	b.n	8001862 <UART_SetConfig+0x98e>
 8001862:	bf00      	nop
 8001864:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001868:	46bd      	mov	sp, r7
 800186a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186e:	bf00      	nop
 8001870:	51eb851f 	.word	0x51eb851f

08001874 <main>:


void gpio_pc13_interrupt_init(void);

int main()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

	HAL_Init();
 8001878:	f7fe fe7a 	bl	8000570 <HAL_Init>

	gpio_pc13_interrupt_init();
 800187c:	f000 f80a 	bl	8001894 <gpio_pc13_interrupt_init>
	uart_init();
 8001880:	f000 f95e 	bl	8001b40 <uart_init>

	while(1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <main+0x10>

08001888 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800188c:	f7fe feca 	bl	8000624 <HAL_IncTick>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <gpio_pc13_interrupt_init>:


void gpio_pc13_interrupt_init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a24      	ldr	r2, [pc, #144]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <gpio_pc13_interrupt_init+0xcc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]


	//Configure PC13

	GPIO_InitStruct.Pin		= GPIO_PIN_13;
 80018e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode	= GPIO_MODE_IT_RISING;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <gpio_pc13_interrupt_init+0xd0>)
 80018ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	481b      	ldr	r0, [pc, #108]	@ (8001968 <gpio_pc13_interrupt_init+0xd4>)
 80018fc:	f7fe ffc4 	bl	8000888 <HAL_GPIO_Init>

	//Configure PA0
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
 8001900:	2301      	movs	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode	= GPIO_MODE_IT_RISING;
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <gpio_pc13_interrupt_init+0xd0>)
 8001906:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull	= GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	4815      	ldr	r0, [pc, #84]	@ (800196c <gpio_pc13_interrupt_init+0xd8>)
 8001918:	f7fe ffb6 	bl	8000888 <HAL_GPIO_Init>


	//Configure PA5

	GPIO_InitStruct.Pin 	= LED_PIN;
 800191c:	2320      	movs	r3, #32
 800191e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	480e      	ldr	r0, [pc, #56]	@ (800196c <gpio_pc13_interrupt_init+0xd8>)
 8001934:	f7fe ffa8 	bl	8000888 <HAL_GPIO_Init>

	//Configure EXTI

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2006      	movs	r0, #6
 800193e:	f7fe ff6c 	bl	800081a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001942:	2006      	movs	r0, #6
 8001944:	f7fe ff85 	bl	8000852 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2028      	movs	r0, #40	@ 0x28
 800194e:	f7fe ff64 	bl	800081a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001952:	2028      	movs	r0, #40	@ 0x28
 8001954:	f7fe ff7d 	bl	8000852 <HAL_NVIC_EnableIRQ>


}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	10110000 	.word	0x10110000
 8001968:	40020800 	.word	0x40020800
 800196c:	40020000 	.word	0x40020000

08001970 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	//Do something..

	if(GPIO_Pin == GPIO_PIN_13){
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001980:	d106      	bne.n	8001990 <HAL_GPIO_EXTI_Callback+0x20>

		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8001982:	2120      	movs	r1, #32
 8001984:	4809      	ldr	r0, [pc, #36]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8001986:	f7ff f903 	bl	8000b90 <HAL_GPIO_TogglePin>
		printf("Button 13 Pressed ! \n\r");
 800198a:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <HAL_GPIO_EXTI_Callback+0x40>)
 800198c:	f000 fa24 	bl	8001dd8 <iprintf>

	}

	if(GPIO_Pin == GPIO_PIN_0){
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x34>

		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8001996:	2120      	movs	r1, #32
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x3c>)
 800199a:	f7ff f8f9 	bl	8000b90 <HAL_GPIO_TogglePin>
		printf("Button 0 Pressed ! \n\r");
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_GPIO_EXTI_Callback+0x44>)
 80019a0:	f000 fa1a 	bl	8001dd8 <iprintf>

	}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40020000 	.word	0x40020000
 80019b0:	08002acc 	.word	0x08002acc
 80019b4:	08002ae4 	.word	0x08002ae4

080019b8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019c0:	f7ff f902 	bl	8000bc8 <HAL_GPIO_EXTI_IRQHandler>

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff f8fb 	bl	8000bc8 <HAL_GPIO_EXTI_IRQHandler>

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00a      	b.n	80019fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e8:	f3af 8000 	nop.w
 80019ec:	4601      	mov	r1, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf0      	blt.n	80019e8 <_read+0x12>
  }

  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e009      	b.n	8001a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f876 	bl	8001b1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf1      	blt.n	8001a22 <_write+0x12>
  }
  return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_close>:

int _close(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_isatty>:

int _isatty(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f000 fa1e 	bl	8001f20 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20018000 	.word	0x20018000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	20000088 	.word	0x20000088
 8001b18:	20000218 	.word	0x20000218

08001b1c <__io_putchar>:
UART_HandleTypeDef huart2 ;



int __io_putchar(int ch)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 8001b24:	1d39      	adds	r1, r7, #4
 8001b26:	230a      	movs	r3, #10
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4804      	ldr	r0, [pc, #16]	@ (8001b3c <__io_putchar+0x20>)
 8001b2c:	f7ff f8ef 	bl	8000d0e <HAL_UART_Transmit>
	return ch ;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000008c 	.word	0x2000008c

08001b40 <uart_init>:

void uart_init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <uart_init+0xb0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <uart_init+0xb0>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <uart_init+0xb0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <uart_init+0xb0>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <uart_init+0xb0>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <uart_init+0xb0>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8001b92:	2302      	movs	r3, #2
 8001b94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 8001b96:	2307      	movs	r3, #7
 8001b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <uart_init+0xb4>)
 8001baa:	f7fe fe6d 	bl	8000888 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <uart_init+0xb8>)
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <uart_init+0xbc>)
 8001bb2:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <uart_init+0xb8>)
 8001bb6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bba:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <uart_init+0xb8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <uart_init+0xb8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <uart_init+0xb8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <uart_init+0xb8>)
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <uart_init+0xb8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <uart_init+0xb8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <uart_init+0xb8>)
 8001be2:	f7ff f83d 	bl	8000c60 <HAL_UART_Init>




}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	2000008c 	.word	0x2000008c
 8001bfc:	40004400 	.word	0x40004400

08001c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c2e:	f000 f97d 	bl	8001f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c32:	f7ff fe1f 	bl	8001874 <main>

08001c36 <LoopForever>:

LoopForever:
  b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   r0, =_estack
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c44:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8001c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c4c:	20000218 	.word	0x20000218

08001c50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <std>:
 8001c54:	2300      	movs	r3, #0
 8001c56:	b510      	push	{r4, lr}
 8001c58:	4604      	mov	r4, r0
 8001c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8001c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c62:	6083      	str	r3, [r0, #8]
 8001c64:	8181      	strh	r1, [r0, #12]
 8001c66:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c68:	81c2      	strh	r2, [r0, #14]
 8001c6a:	6183      	str	r3, [r0, #24]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2208      	movs	r2, #8
 8001c70:	305c      	adds	r0, #92	@ 0x5c
 8001c72:	f000 f906 	bl	8001e82 <memset>
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <std+0x58>)
 8001c78:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <std+0x5c>)
 8001c7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <std+0x60>)
 8001c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <std+0x64>)
 8001c84:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <std+0x68>)
 8001c88:	6224      	str	r4, [r4, #32]
 8001c8a:	429c      	cmp	r4, r3
 8001c8c:	d006      	beq.n	8001c9c <std+0x48>
 8001c8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001c92:	4294      	cmp	r4, r2
 8001c94:	d002      	beq.n	8001c9c <std+0x48>
 8001c96:	33d0      	adds	r3, #208	@ 0xd0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	d105      	bne.n	8001ca8 <std+0x54>
 8001c9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ca4:	f000 b966 	b.w	8001f74 <__retarget_lock_init_recursive>
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	bf00      	nop
 8001cac:	08001dfd 	.word	0x08001dfd
 8001cb0:	08001e1f 	.word	0x08001e1f
 8001cb4:	08001e57 	.word	0x08001e57
 8001cb8:	08001e7b 	.word	0x08001e7b
 8001cbc:	200000cc 	.word	0x200000cc

08001cc0 <stdio_exit_handler>:
 8001cc0:	4a02      	ldr	r2, [pc, #8]	@ (8001ccc <stdio_exit_handler+0xc>)
 8001cc2:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <stdio_exit_handler+0x10>)
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <stdio_exit_handler+0x14>)
 8001cc6:	f000 b869 	b.w	8001d9c <_fwalk_sglue>
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	08002815 	.word	0x08002815
 8001cd4:	2000001c 	.word	0x2000001c

08001cd8 <cleanup_stdio>:
 8001cd8:	6841      	ldr	r1, [r0, #4]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <cleanup_stdio+0x34>)
 8001cdc:	4299      	cmp	r1, r3
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	d001      	beq.n	8001ce8 <cleanup_stdio+0x10>
 8001ce4:	f000 fd96 	bl	8002814 <_fflush_r>
 8001ce8:	68a1      	ldr	r1, [r4, #8]
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <cleanup_stdio+0x38>)
 8001cec:	4299      	cmp	r1, r3
 8001cee:	d002      	beq.n	8001cf6 <cleanup_stdio+0x1e>
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f000 fd8f 	bl	8002814 <_fflush_r>
 8001cf6:	68e1      	ldr	r1, [r4, #12]
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <cleanup_stdio+0x3c>)
 8001cfa:	4299      	cmp	r1, r3
 8001cfc:	d004      	beq.n	8001d08 <cleanup_stdio+0x30>
 8001cfe:	4620      	mov	r0, r4
 8001d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d04:	f000 bd86 	b.w	8002814 <_fflush_r>
 8001d08:	bd10      	pop	{r4, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200000cc 	.word	0x200000cc
 8001d10:	20000134 	.word	0x20000134
 8001d14:	2000019c 	.word	0x2000019c

08001d18 <global_stdio_init.part.0>:
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <global_stdio_init.part.0+0x30>)
 8001d1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001d4c <global_stdio_init.part.0+0x34>)
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <global_stdio_init.part.0+0x38>)
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4620      	mov	r0, r4
 8001d24:	2200      	movs	r2, #0
 8001d26:	2104      	movs	r1, #4
 8001d28:	f7ff ff94 	bl	8001c54 <std>
 8001d2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d30:	2201      	movs	r2, #1
 8001d32:	2109      	movs	r1, #9
 8001d34:	f7ff ff8e 	bl	8001c54 <std>
 8001d38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d42:	2112      	movs	r1, #18
 8001d44:	f7ff bf86 	b.w	8001c54 <std>
 8001d48:	20000204 	.word	0x20000204
 8001d4c:	200000cc 	.word	0x200000cc
 8001d50:	08001cc1 	.word	0x08001cc1

08001d54 <__sfp_lock_acquire>:
 8001d54:	4801      	ldr	r0, [pc, #4]	@ (8001d5c <__sfp_lock_acquire+0x8>)
 8001d56:	f000 b90e 	b.w	8001f76 <__retarget_lock_acquire_recursive>
 8001d5a:	bf00      	nop
 8001d5c:	2000020d 	.word	0x2000020d

08001d60 <__sfp_lock_release>:
 8001d60:	4801      	ldr	r0, [pc, #4]	@ (8001d68 <__sfp_lock_release+0x8>)
 8001d62:	f000 b909 	b.w	8001f78 <__retarget_lock_release_recursive>
 8001d66:	bf00      	nop
 8001d68:	2000020d 	.word	0x2000020d

08001d6c <__sinit>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	4604      	mov	r4, r0
 8001d70:	f7ff fff0 	bl	8001d54 <__sfp_lock_acquire>
 8001d74:	6a23      	ldr	r3, [r4, #32]
 8001d76:	b11b      	cbz	r3, 8001d80 <__sinit+0x14>
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d7c:	f7ff bff0 	b.w	8001d60 <__sfp_lock_release>
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <__sinit+0x28>)
 8001d82:	6223      	str	r3, [r4, #32]
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <__sinit+0x2c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f5      	bne.n	8001d78 <__sinit+0xc>
 8001d8c:	f7ff ffc4 	bl	8001d18 <global_stdio_init.part.0>
 8001d90:	e7f2      	b.n	8001d78 <__sinit+0xc>
 8001d92:	bf00      	nop
 8001d94:	08001cd9 	.word	0x08001cd9
 8001d98:	20000204 	.word	0x20000204

08001d9c <_fwalk_sglue>:
 8001d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001da0:	4607      	mov	r7, r0
 8001da2:	4688      	mov	r8, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	2600      	movs	r6, #0
 8001da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dac:	f1b9 0901 	subs.w	r9, r9, #1
 8001db0:	d505      	bpl.n	8001dbe <_fwalk_sglue+0x22>
 8001db2:	6824      	ldr	r4, [r4, #0]
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d1f7      	bne.n	8001da8 <_fwalk_sglue+0xc>
 8001db8:	4630      	mov	r0, r6
 8001dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dbe:	89ab      	ldrh	r3, [r5, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d907      	bls.n	8001dd4 <_fwalk_sglue+0x38>
 8001dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	d003      	beq.n	8001dd4 <_fwalk_sglue+0x38>
 8001dcc:	4629      	mov	r1, r5
 8001dce:	4638      	mov	r0, r7
 8001dd0:	47c0      	blx	r8
 8001dd2:	4306      	orrs	r6, r0
 8001dd4:	3568      	adds	r5, #104	@ 0x68
 8001dd6:	e7e9      	b.n	8001dac <_fwalk_sglue+0x10>

08001dd8 <iprintf>:
 8001dd8:	b40f      	push	{r0, r1, r2, r3}
 8001dda:	b507      	push	{r0, r1, r2, lr}
 8001ddc:	4906      	ldr	r1, [pc, #24]	@ (8001df8 <iprintf+0x20>)
 8001dde:	ab04      	add	r3, sp, #16
 8001de0:	6808      	ldr	r0, [r1, #0]
 8001de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001de6:	6881      	ldr	r1, [r0, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f000 f9e9 	bl	80021c0 <_vfiprintf_r>
 8001dee:	b003      	add	sp, #12
 8001df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001df4:	b004      	add	sp, #16
 8001df6:	4770      	bx	lr
 8001df8:	20000018 	.word	0x20000018

08001dfc <__sread>:
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	460c      	mov	r4, r1
 8001e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e04:	f000 f868 	bl	8001ed8 <_read_r>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	bfab      	itete	ge
 8001e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8001e10:	181b      	addge	r3, r3, r0
 8001e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001e16:	bfac      	ite	ge
 8001e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001e1a:	81a3      	strhlt	r3, [r4, #12]
 8001e1c:	bd10      	pop	{r4, pc}

08001e1e <__swrite>:
 8001e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e22:	461f      	mov	r7, r3
 8001e24:	898b      	ldrh	r3, [r1, #12]
 8001e26:	05db      	lsls	r3, r3, #23
 8001e28:	4605      	mov	r5, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4616      	mov	r6, r2
 8001e2e:	d505      	bpl.n	8001e3c <__swrite+0x1e>
 8001e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e34:	2302      	movs	r3, #2
 8001e36:	2200      	movs	r2, #0
 8001e38:	f000 f83c 	bl	8001eb4 <_lseek_r>
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e46:	81a3      	strh	r3, [r4, #12]
 8001e48:	4632      	mov	r2, r6
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e52:	f000 b853 	b.w	8001efc <_write_r>

08001e56 <__sseek>:
 8001e56:	b510      	push	{r4, lr}
 8001e58:	460c      	mov	r4, r1
 8001e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e5e:	f000 f829 	bl	8001eb4 <_lseek_r>
 8001e62:	1c43      	adds	r3, r0, #1
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	bf15      	itete	ne
 8001e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001e72:	81a3      	strheq	r3, [r4, #12]
 8001e74:	bf18      	it	ne
 8001e76:	81a3      	strhne	r3, [r4, #12]
 8001e78:	bd10      	pop	{r4, pc}

08001e7a <__sclose>:
 8001e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e7e:	f000 b809 	b.w	8001e94 <_close_r>

08001e82 <memset>:
 8001e82:	4402      	add	r2, r0
 8001e84:	4603      	mov	r3, r0
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d100      	bne.n	8001e8c <memset+0xa>
 8001e8a:	4770      	bx	lr
 8001e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8001e90:	e7f9      	b.n	8001e86 <memset+0x4>
	...

08001e94 <_close_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4d06      	ldr	r5, [pc, #24]	@ (8001eb0 <_close_r+0x1c>)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	602b      	str	r3, [r5, #0]
 8001ea0:	f7ff fdd2 	bl	8001a48 <_close>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d102      	bne.n	8001eae <_close_r+0x1a>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	b103      	cbz	r3, 8001eae <_close_r+0x1a>
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	20000208 	.word	0x20000208

08001eb4 <_lseek_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4d07      	ldr	r5, [pc, #28]	@ (8001ed4 <_lseek_r+0x20>)
 8001eb8:	4604      	mov	r4, r0
 8001eba:	4608      	mov	r0, r1
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	602a      	str	r2, [r5, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fde7 	bl	8001a96 <_lseek>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_lseek_r+0x1e>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_lseek_r+0x1e>
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	20000208 	.word	0x20000208

08001ed8 <_read_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4d07      	ldr	r5, [pc, #28]	@ (8001ef8 <_read_r+0x20>)
 8001edc:	4604      	mov	r4, r0
 8001ede:	4608      	mov	r0, r1
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	602a      	str	r2, [r5, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f7ff fd75 	bl	80019d6 <_read>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_read_r+0x1e>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_read_r+0x1e>
 8001ef4:	6023      	str	r3, [r4, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	20000208 	.word	0x20000208

08001efc <_write_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4d07      	ldr	r5, [pc, #28]	@ (8001f1c <_write_r+0x20>)
 8001f00:	4604      	mov	r4, r0
 8001f02:	4608      	mov	r0, r1
 8001f04:	4611      	mov	r1, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	602a      	str	r2, [r5, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff fd80 	bl	8001a10 <_write>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	d102      	bne.n	8001f1a <_write_r+0x1e>
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	b103      	cbz	r3, 8001f1a <_write_r+0x1e>
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
 8001f1c:	20000208 	.word	0x20000208

08001f20 <__errno>:
 8001f20:	4b01      	ldr	r3, [pc, #4]	@ (8001f28 <__errno+0x8>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000018 	.word	0x20000018

08001f2c <__libc_init_array>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8001f64 <__libc_init_array+0x38>)
 8001f30:	4c0d      	ldr	r4, [pc, #52]	@ (8001f68 <__libc_init_array+0x3c>)
 8001f32:	1b64      	subs	r4, r4, r5
 8001f34:	10a4      	asrs	r4, r4, #2
 8001f36:	2600      	movs	r6, #0
 8001f38:	42a6      	cmp	r6, r4
 8001f3a:	d109      	bne.n	8001f50 <__libc_init_array+0x24>
 8001f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8001f6c <__libc_init_array+0x40>)
 8001f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8001f70 <__libc_init_array+0x44>)
 8001f40:	f000 fdb8 	bl	8002ab4 <_init>
 8001f44:	1b64      	subs	r4, r4, r5
 8001f46:	10a4      	asrs	r4, r4, #2
 8001f48:	2600      	movs	r6, #0
 8001f4a:	42a6      	cmp	r6, r4
 8001f4c:	d105      	bne.n	8001f5a <__libc_init_array+0x2e>
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f54:	4798      	blx	r3
 8001f56:	3601      	adds	r6, #1
 8001f58:	e7ee      	b.n	8001f38 <__libc_init_array+0xc>
 8001f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f5e:	4798      	blx	r3
 8001f60:	3601      	adds	r6, #1
 8001f62:	e7f2      	b.n	8001f4a <__libc_init_array+0x1e>
 8001f64:	08002b40 	.word	0x08002b40
 8001f68:	08002b40 	.word	0x08002b40
 8001f6c:	08002b40 	.word	0x08002b40
 8001f70:	08002b44 	.word	0x08002b44

08001f74 <__retarget_lock_init_recursive>:
 8001f74:	4770      	bx	lr

08001f76 <__retarget_lock_acquire_recursive>:
 8001f76:	4770      	bx	lr

08001f78 <__retarget_lock_release_recursive>:
 8001f78:	4770      	bx	lr
	...

08001f7c <_free_r>:
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4605      	mov	r5, r0
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d041      	beq.n	8002008 <_free_r+0x8c>
 8001f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f88:	1f0c      	subs	r4, r1, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bfb8      	it	lt
 8001f8e:	18e4      	addlt	r4, r4, r3
 8001f90:	f000 f8e0 	bl	8002154 <__malloc_lock>
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <_free_r+0x90>)
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	b933      	cbnz	r3, 8001fa8 <_free_r+0x2c>
 8001f9a:	6063      	str	r3, [r4, #4]
 8001f9c:	6014      	str	r4, [r2, #0]
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fa4:	f000 b8dc 	b.w	8002160 <__malloc_unlock>
 8001fa8:	42a3      	cmp	r3, r4
 8001faa:	d908      	bls.n	8001fbe <_free_r+0x42>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	1821      	adds	r1, r4, r0
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	bf01      	itttt	eq
 8001fb4:	6819      	ldreq	r1, [r3, #0]
 8001fb6:	685b      	ldreq	r3, [r3, #4]
 8001fb8:	1809      	addeq	r1, r1, r0
 8001fba:	6021      	streq	r1, [r4, #0]
 8001fbc:	e7ed      	b.n	8001f9a <_free_r+0x1e>
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	b10b      	cbz	r3, 8001fc8 <_free_r+0x4c>
 8001fc4:	42a3      	cmp	r3, r4
 8001fc6:	d9fa      	bls.n	8001fbe <_free_r+0x42>
 8001fc8:	6811      	ldr	r1, [r2, #0]
 8001fca:	1850      	adds	r0, r2, r1
 8001fcc:	42a0      	cmp	r0, r4
 8001fce:	d10b      	bne.n	8001fe8 <_free_r+0x6c>
 8001fd0:	6820      	ldr	r0, [r4, #0]
 8001fd2:	4401      	add	r1, r0
 8001fd4:	1850      	adds	r0, r2, r1
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	d1e0      	bne.n	8001f9e <_free_r+0x22>
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	6053      	str	r3, [r2, #4]
 8001fe2:	4408      	add	r0, r1
 8001fe4:	6010      	str	r0, [r2, #0]
 8001fe6:	e7da      	b.n	8001f9e <_free_r+0x22>
 8001fe8:	d902      	bls.n	8001ff0 <_free_r+0x74>
 8001fea:	230c      	movs	r3, #12
 8001fec:	602b      	str	r3, [r5, #0]
 8001fee:	e7d6      	b.n	8001f9e <_free_r+0x22>
 8001ff0:	6820      	ldr	r0, [r4, #0]
 8001ff2:	1821      	adds	r1, r4, r0
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	bf04      	itt	eq
 8001ff8:	6819      	ldreq	r1, [r3, #0]
 8001ffa:	685b      	ldreq	r3, [r3, #4]
 8001ffc:	6063      	str	r3, [r4, #4]
 8001ffe:	bf04      	itt	eq
 8002000:	1809      	addeq	r1, r1, r0
 8002002:	6021      	streq	r1, [r4, #0]
 8002004:	6054      	str	r4, [r2, #4]
 8002006:	e7ca      	b.n	8001f9e <_free_r+0x22>
 8002008:	bd38      	pop	{r3, r4, r5, pc}
 800200a:	bf00      	nop
 800200c:	20000214 	.word	0x20000214

08002010 <sbrk_aligned>:
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	4e0f      	ldr	r6, [pc, #60]	@ (8002050 <sbrk_aligned+0x40>)
 8002014:	460c      	mov	r4, r1
 8002016:	6831      	ldr	r1, [r6, #0]
 8002018:	4605      	mov	r5, r0
 800201a:	b911      	cbnz	r1, 8002022 <sbrk_aligned+0x12>
 800201c:	f000 fcb6 	bl	800298c <_sbrk_r>
 8002020:	6030      	str	r0, [r6, #0]
 8002022:	4621      	mov	r1, r4
 8002024:	4628      	mov	r0, r5
 8002026:	f000 fcb1 	bl	800298c <_sbrk_r>
 800202a:	1c43      	adds	r3, r0, #1
 800202c:	d103      	bne.n	8002036 <sbrk_aligned+0x26>
 800202e:	f04f 34ff 	mov.w	r4, #4294967295
 8002032:	4620      	mov	r0, r4
 8002034:	bd70      	pop	{r4, r5, r6, pc}
 8002036:	1cc4      	adds	r4, r0, #3
 8002038:	f024 0403 	bic.w	r4, r4, #3
 800203c:	42a0      	cmp	r0, r4
 800203e:	d0f8      	beq.n	8002032 <sbrk_aligned+0x22>
 8002040:	1a21      	subs	r1, r4, r0
 8002042:	4628      	mov	r0, r5
 8002044:	f000 fca2 	bl	800298c <_sbrk_r>
 8002048:	3001      	adds	r0, #1
 800204a:	d1f2      	bne.n	8002032 <sbrk_aligned+0x22>
 800204c:	e7ef      	b.n	800202e <sbrk_aligned+0x1e>
 800204e:	bf00      	nop
 8002050:	20000210 	.word	0x20000210

08002054 <_malloc_r>:
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	1ccd      	adds	r5, r1, #3
 800205a:	f025 0503 	bic.w	r5, r5, #3
 800205e:	3508      	adds	r5, #8
 8002060:	2d0c      	cmp	r5, #12
 8002062:	bf38      	it	cc
 8002064:	250c      	movcc	r5, #12
 8002066:	2d00      	cmp	r5, #0
 8002068:	4606      	mov	r6, r0
 800206a:	db01      	blt.n	8002070 <_malloc_r+0x1c>
 800206c:	42a9      	cmp	r1, r5
 800206e:	d904      	bls.n	800207a <_malloc_r+0x26>
 8002070:	230c      	movs	r3, #12
 8002072:	6033      	str	r3, [r6, #0]
 8002074:	2000      	movs	r0, #0
 8002076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800207a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002150 <_malloc_r+0xfc>
 800207e:	f000 f869 	bl	8002154 <__malloc_lock>
 8002082:	f8d8 3000 	ldr.w	r3, [r8]
 8002086:	461c      	mov	r4, r3
 8002088:	bb44      	cbnz	r4, 80020dc <_malloc_r+0x88>
 800208a:	4629      	mov	r1, r5
 800208c:	4630      	mov	r0, r6
 800208e:	f7ff ffbf 	bl	8002010 <sbrk_aligned>
 8002092:	1c43      	adds	r3, r0, #1
 8002094:	4604      	mov	r4, r0
 8002096:	d158      	bne.n	800214a <_malloc_r+0xf6>
 8002098:	f8d8 4000 	ldr.w	r4, [r8]
 800209c:	4627      	mov	r7, r4
 800209e:	2f00      	cmp	r7, #0
 80020a0:	d143      	bne.n	800212a <_malloc_r+0xd6>
 80020a2:	2c00      	cmp	r4, #0
 80020a4:	d04b      	beq.n	800213e <_malloc_r+0xea>
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	4639      	mov	r1, r7
 80020aa:	4630      	mov	r0, r6
 80020ac:	eb04 0903 	add.w	r9, r4, r3
 80020b0:	f000 fc6c 	bl	800298c <_sbrk_r>
 80020b4:	4581      	cmp	r9, r0
 80020b6:	d142      	bne.n	800213e <_malloc_r+0xea>
 80020b8:	6821      	ldr	r1, [r4, #0]
 80020ba:	1a6d      	subs	r5, r5, r1
 80020bc:	4629      	mov	r1, r5
 80020be:	4630      	mov	r0, r6
 80020c0:	f7ff ffa6 	bl	8002010 <sbrk_aligned>
 80020c4:	3001      	adds	r0, #1
 80020c6:	d03a      	beq.n	800213e <_malloc_r+0xea>
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	442b      	add	r3, r5
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	f8d8 3000 	ldr.w	r3, [r8]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	bb62      	cbnz	r2, 8002130 <_malloc_r+0xdc>
 80020d6:	f8c8 7000 	str.w	r7, [r8]
 80020da:	e00f      	b.n	80020fc <_malloc_r+0xa8>
 80020dc:	6822      	ldr	r2, [r4, #0]
 80020de:	1b52      	subs	r2, r2, r5
 80020e0:	d420      	bmi.n	8002124 <_malloc_r+0xd0>
 80020e2:	2a0b      	cmp	r2, #11
 80020e4:	d917      	bls.n	8002116 <_malloc_r+0xc2>
 80020e6:	1961      	adds	r1, r4, r5
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	6025      	str	r5, [r4, #0]
 80020ec:	bf18      	it	ne
 80020ee:	6059      	strne	r1, [r3, #4]
 80020f0:	6863      	ldr	r3, [r4, #4]
 80020f2:	bf08      	it	eq
 80020f4:	f8c8 1000 	streq.w	r1, [r8]
 80020f8:	5162      	str	r2, [r4, r5]
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	4630      	mov	r0, r6
 80020fe:	f000 f82f 	bl	8002160 <__malloc_unlock>
 8002102:	f104 000b 	add.w	r0, r4, #11
 8002106:	1d23      	adds	r3, r4, #4
 8002108:	f020 0007 	bic.w	r0, r0, #7
 800210c:	1ac2      	subs	r2, r0, r3
 800210e:	bf1c      	itt	ne
 8002110:	1a1b      	subne	r3, r3, r0
 8002112:	50a3      	strne	r3, [r4, r2]
 8002114:	e7af      	b.n	8002076 <_malloc_r+0x22>
 8002116:	6862      	ldr	r2, [r4, #4]
 8002118:	42a3      	cmp	r3, r4
 800211a:	bf0c      	ite	eq
 800211c:	f8c8 2000 	streq.w	r2, [r8]
 8002120:	605a      	strne	r2, [r3, #4]
 8002122:	e7eb      	b.n	80020fc <_malloc_r+0xa8>
 8002124:	4623      	mov	r3, r4
 8002126:	6864      	ldr	r4, [r4, #4]
 8002128:	e7ae      	b.n	8002088 <_malloc_r+0x34>
 800212a:	463c      	mov	r4, r7
 800212c:	687f      	ldr	r7, [r7, #4]
 800212e:	e7b6      	b.n	800209e <_malloc_r+0x4a>
 8002130:	461a      	mov	r2, r3
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	42a3      	cmp	r3, r4
 8002136:	d1fb      	bne.n	8002130 <_malloc_r+0xdc>
 8002138:	2300      	movs	r3, #0
 800213a:	6053      	str	r3, [r2, #4]
 800213c:	e7de      	b.n	80020fc <_malloc_r+0xa8>
 800213e:	230c      	movs	r3, #12
 8002140:	6033      	str	r3, [r6, #0]
 8002142:	4630      	mov	r0, r6
 8002144:	f000 f80c 	bl	8002160 <__malloc_unlock>
 8002148:	e794      	b.n	8002074 <_malloc_r+0x20>
 800214a:	6005      	str	r5, [r0, #0]
 800214c:	e7d6      	b.n	80020fc <_malloc_r+0xa8>
 800214e:	bf00      	nop
 8002150:	20000214 	.word	0x20000214

08002154 <__malloc_lock>:
 8002154:	4801      	ldr	r0, [pc, #4]	@ (800215c <__malloc_lock+0x8>)
 8002156:	f7ff bf0e 	b.w	8001f76 <__retarget_lock_acquire_recursive>
 800215a:	bf00      	nop
 800215c:	2000020c 	.word	0x2000020c

08002160 <__malloc_unlock>:
 8002160:	4801      	ldr	r0, [pc, #4]	@ (8002168 <__malloc_unlock+0x8>)
 8002162:	f7ff bf09 	b.w	8001f78 <__retarget_lock_release_recursive>
 8002166:	bf00      	nop
 8002168:	2000020c 	.word	0x2000020c

0800216c <__sfputc_r>:
 800216c:	6893      	ldr	r3, [r2, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	b410      	push	{r4}
 8002174:	6093      	str	r3, [r2, #8]
 8002176:	da08      	bge.n	800218a <__sfputc_r+0x1e>
 8002178:	6994      	ldr	r4, [r2, #24]
 800217a:	42a3      	cmp	r3, r4
 800217c:	db01      	blt.n	8002182 <__sfputc_r+0x16>
 800217e:	290a      	cmp	r1, #10
 8002180:	d103      	bne.n	800218a <__sfputc_r+0x1e>
 8002182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002186:	f000 bb6d 	b.w	8002864 <__swbuf_r>
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	1c58      	adds	r0, r3, #1
 800218e:	6010      	str	r0, [r2, #0]
 8002190:	7019      	strb	r1, [r3, #0]
 8002192:	4608      	mov	r0, r1
 8002194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002198:	4770      	bx	lr

0800219a <__sfputs_r>:
 800219a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219c:	4606      	mov	r6, r0
 800219e:	460f      	mov	r7, r1
 80021a0:	4614      	mov	r4, r2
 80021a2:	18d5      	adds	r5, r2, r3
 80021a4:	42ac      	cmp	r4, r5
 80021a6:	d101      	bne.n	80021ac <__sfputs_r+0x12>
 80021a8:	2000      	movs	r0, #0
 80021aa:	e007      	b.n	80021bc <__sfputs_r+0x22>
 80021ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021b0:	463a      	mov	r2, r7
 80021b2:	4630      	mov	r0, r6
 80021b4:	f7ff ffda 	bl	800216c <__sfputc_r>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d1f3      	bne.n	80021a4 <__sfputs_r+0xa>
 80021bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021c0 <_vfiprintf_r>:
 80021c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c4:	460d      	mov	r5, r1
 80021c6:	b09d      	sub	sp, #116	@ 0x74
 80021c8:	4614      	mov	r4, r2
 80021ca:	4698      	mov	r8, r3
 80021cc:	4606      	mov	r6, r0
 80021ce:	b118      	cbz	r0, 80021d8 <_vfiprintf_r+0x18>
 80021d0:	6a03      	ldr	r3, [r0, #32]
 80021d2:	b90b      	cbnz	r3, 80021d8 <_vfiprintf_r+0x18>
 80021d4:	f7ff fdca 	bl	8001d6c <__sinit>
 80021d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021da:	07d9      	lsls	r1, r3, #31
 80021dc:	d405      	bmi.n	80021ea <_vfiprintf_r+0x2a>
 80021de:	89ab      	ldrh	r3, [r5, #12]
 80021e0:	059a      	lsls	r2, r3, #22
 80021e2:	d402      	bmi.n	80021ea <_vfiprintf_r+0x2a>
 80021e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021e6:	f7ff fec6 	bl	8001f76 <__retarget_lock_acquire_recursive>
 80021ea:	89ab      	ldrh	r3, [r5, #12]
 80021ec:	071b      	lsls	r3, r3, #28
 80021ee:	d501      	bpl.n	80021f4 <_vfiprintf_r+0x34>
 80021f0:	692b      	ldr	r3, [r5, #16]
 80021f2:	b99b      	cbnz	r3, 800221c <_vfiprintf_r+0x5c>
 80021f4:	4629      	mov	r1, r5
 80021f6:	4630      	mov	r0, r6
 80021f8:	f000 fb72 	bl	80028e0 <__swsetup_r>
 80021fc:	b170      	cbz	r0, 800221c <_vfiprintf_r+0x5c>
 80021fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002200:	07dc      	lsls	r4, r3, #31
 8002202:	d504      	bpl.n	800220e <_vfiprintf_r+0x4e>
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	b01d      	add	sp, #116	@ 0x74
 800220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220e:	89ab      	ldrh	r3, [r5, #12]
 8002210:	0598      	lsls	r0, r3, #22
 8002212:	d4f7      	bmi.n	8002204 <_vfiprintf_r+0x44>
 8002214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002216:	f7ff feaf 	bl	8001f78 <__retarget_lock_release_recursive>
 800221a:	e7f3      	b.n	8002204 <_vfiprintf_r+0x44>
 800221c:	2300      	movs	r3, #0
 800221e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002220:	2320      	movs	r3, #32
 8002222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002226:	f8cd 800c 	str.w	r8, [sp, #12]
 800222a:	2330      	movs	r3, #48	@ 0x30
 800222c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80023dc <_vfiprintf_r+0x21c>
 8002230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002234:	f04f 0901 	mov.w	r9, #1
 8002238:	4623      	mov	r3, r4
 800223a:	469a      	mov	sl, r3
 800223c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002240:	b10a      	cbz	r2, 8002246 <_vfiprintf_r+0x86>
 8002242:	2a25      	cmp	r2, #37	@ 0x25
 8002244:	d1f9      	bne.n	800223a <_vfiprintf_r+0x7a>
 8002246:	ebba 0b04 	subs.w	fp, sl, r4
 800224a:	d00b      	beq.n	8002264 <_vfiprintf_r+0xa4>
 800224c:	465b      	mov	r3, fp
 800224e:	4622      	mov	r2, r4
 8002250:	4629      	mov	r1, r5
 8002252:	4630      	mov	r0, r6
 8002254:	f7ff ffa1 	bl	800219a <__sfputs_r>
 8002258:	3001      	adds	r0, #1
 800225a:	f000 80a7 	beq.w	80023ac <_vfiprintf_r+0x1ec>
 800225e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002260:	445a      	add	r2, fp
 8002262:	9209      	str	r2, [sp, #36]	@ 0x24
 8002264:	f89a 3000 	ldrb.w	r3, [sl]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 809f 	beq.w	80023ac <_vfiprintf_r+0x1ec>
 800226e:	2300      	movs	r3, #0
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002278:	f10a 0a01 	add.w	sl, sl, #1
 800227c:	9304      	str	r3, [sp, #16]
 800227e:	9307      	str	r3, [sp, #28]
 8002280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002284:	931a      	str	r3, [sp, #104]	@ 0x68
 8002286:	4654      	mov	r4, sl
 8002288:	2205      	movs	r2, #5
 800228a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800228e:	4853      	ldr	r0, [pc, #332]	@ (80023dc <_vfiprintf_r+0x21c>)
 8002290:	f7fd ffa6 	bl	80001e0 <memchr>
 8002294:	9a04      	ldr	r2, [sp, #16]
 8002296:	b9d8      	cbnz	r0, 80022d0 <_vfiprintf_r+0x110>
 8002298:	06d1      	lsls	r1, r2, #27
 800229a:	bf44      	itt	mi
 800229c:	2320      	movmi	r3, #32
 800229e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80022a2:	0713      	lsls	r3, r2, #28
 80022a4:	bf44      	itt	mi
 80022a6:	232b      	movmi	r3, #43	@ 0x2b
 80022a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80022ac:	f89a 3000 	ldrb.w	r3, [sl]
 80022b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80022b2:	d015      	beq.n	80022e0 <_vfiprintf_r+0x120>
 80022b4:	9a07      	ldr	r2, [sp, #28]
 80022b6:	4654      	mov	r4, sl
 80022b8:	2000      	movs	r0, #0
 80022ba:	f04f 0c0a 	mov.w	ip, #10
 80022be:	4621      	mov	r1, r4
 80022c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022c4:	3b30      	subs	r3, #48	@ 0x30
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d94b      	bls.n	8002362 <_vfiprintf_r+0x1a2>
 80022ca:	b1b0      	cbz	r0, 80022fa <_vfiprintf_r+0x13a>
 80022cc:	9207      	str	r2, [sp, #28]
 80022ce:	e014      	b.n	80022fa <_vfiprintf_r+0x13a>
 80022d0:	eba0 0308 	sub.w	r3, r0, r8
 80022d4:	fa09 f303 	lsl.w	r3, r9, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	9304      	str	r3, [sp, #16]
 80022dc:	46a2      	mov	sl, r4
 80022de:	e7d2      	b.n	8002286 <_vfiprintf_r+0xc6>
 80022e0:	9b03      	ldr	r3, [sp, #12]
 80022e2:	1d19      	adds	r1, r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	9103      	str	r1, [sp, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bfbb      	ittet	lt
 80022ec:	425b      	neglt	r3, r3
 80022ee:	f042 0202 	orrlt.w	r2, r2, #2
 80022f2:	9307      	strge	r3, [sp, #28]
 80022f4:	9307      	strlt	r3, [sp, #28]
 80022f6:	bfb8      	it	lt
 80022f8:	9204      	strlt	r2, [sp, #16]
 80022fa:	7823      	ldrb	r3, [r4, #0]
 80022fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80022fe:	d10a      	bne.n	8002316 <_vfiprintf_r+0x156>
 8002300:	7863      	ldrb	r3, [r4, #1]
 8002302:	2b2a      	cmp	r3, #42	@ 0x2a
 8002304:	d132      	bne.n	800236c <_vfiprintf_r+0x1ac>
 8002306:	9b03      	ldr	r3, [sp, #12]
 8002308:	1d1a      	adds	r2, r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	9203      	str	r2, [sp, #12]
 800230e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002312:	3402      	adds	r4, #2
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80023ec <_vfiprintf_r+0x22c>
 800231a:	7821      	ldrb	r1, [r4, #0]
 800231c:	2203      	movs	r2, #3
 800231e:	4650      	mov	r0, sl
 8002320:	f7fd ff5e 	bl	80001e0 <memchr>
 8002324:	b138      	cbz	r0, 8002336 <_vfiprintf_r+0x176>
 8002326:	9b04      	ldr	r3, [sp, #16]
 8002328:	eba0 000a 	sub.w	r0, r0, sl
 800232c:	2240      	movs	r2, #64	@ 0x40
 800232e:	4082      	lsls	r2, r0
 8002330:	4313      	orrs	r3, r2
 8002332:	3401      	adds	r4, #1
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800233a:	4829      	ldr	r0, [pc, #164]	@ (80023e0 <_vfiprintf_r+0x220>)
 800233c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002340:	2206      	movs	r2, #6
 8002342:	f7fd ff4d 	bl	80001e0 <memchr>
 8002346:	2800      	cmp	r0, #0
 8002348:	d03f      	beq.n	80023ca <_vfiprintf_r+0x20a>
 800234a:	4b26      	ldr	r3, [pc, #152]	@ (80023e4 <_vfiprintf_r+0x224>)
 800234c:	bb1b      	cbnz	r3, 8002396 <_vfiprintf_r+0x1d6>
 800234e:	9b03      	ldr	r3, [sp, #12]
 8002350:	3307      	adds	r3, #7
 8002352:	f023 0307 	bic.w	r3, r3, #7
 8002356:	3308      	adds	r3, #8
 8002358:	9303      	str	r3, [sp, #12]
 800235a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800235c:	443b      	add	r3, r7
 800235e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002360:	e76a      	b.n	8002238 <_vfiprintf_r+0x78>
 8002362:	fb0c 3202 	mla	r2, ip, r2, r3
 8002366:	460c      	mov	r4, r1
 8002368:	2001      	movs	r0, #1
 800236a:	e7a8      	b.n	80022be <_vfiprintf_r+0xfe>
 800236c:	2300      	movs	r3, #0
 800236e:	3401      	adds	r4, #1
 8002370:	9305      	str	r3, [sp, #20]
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 0c0a 	mov.w	ip, #10
 8002378:	4620      	mov	r0, r4
 800237a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800237e:	3a30      	subs	r2, #48	@ 0x30
 8002380:	2a09      	cmp	r2, #9
 8002382:	d903      	bls.n	800238c <_vfiprintf_r+0x1cc>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0c6      	beq.n	8002316 <_vfiprintf_r+0x156>
 8002388:	9105      	str	r1, [sp, #20]
 800238a:	e7c4      	b.n	8002316 <_vfiprintf_r+0x156>
 800238c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002390:	4604      	mov	r4, r0
 8002392:	2301      	movs	r3, #1
 8002394:	e7f0      	b.n	8002378 <_vfiprintf_r+0x1b8>
 8002396:	ab03      	add	r3, sp, #12
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	462a      	mov	r2, r5
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <_vfiprintf_r+0x228>)
 800239e:	a904      	add	r1, sp, #16
 80023a0:	4630      	mov	r0, r6
 80023a2:	f3af 8000 	nop.w
 80023a6:	4607      	mov	r7, r0
 80023a8:	1c78      	adds	r0, r7, #1
 80023aa:	d1d6      	bne.n	800235a <_vfiprintf_r+0x19a>
 80023ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80023ae:	07d9      	lsls	r1, r3, #31
 80023b0:	d405      	bmi.n	80023be <_vfiprintf_r+0x1fe>
 80023b2:	89ab      	ldrh	r3, [r5, #12]
 80023b4:	059a      	lsls	r2, r3, #22
 80023b6:	d402      	bmi.n	80023be <_vfiprintf_r+0x1fe>
 80023b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80023ba:	f7ff fddd 	bl	8001f78 <__retarget_lock_release_recursive>
 80023be:	89ab      	ldrh	r3, [r5, #12]
 80023c0:	065b      	lsls	r3, r3, #25
 80023c2:	f53f af1f 	bmi.w	8002204 <_vfiprintf_r+0x44>
 80023c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023c8:	e71e      	b.n	8002208 <_vfiprintf_r+0x48>
 80023ca:	ab03      	add	r3, sp, #12
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	462a      	mov	r2, r5
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <_vfiprintf_r+0x228>)
 80023d2:	a904      	add	r1, sp, #16
 80023d4:	4630      	mov	r0, r6
 80023d6:	f000 f879 	bl	80024cc <_printf_i>
 80023da:	e7e4      	b.n	80023a6 <_vfiprintf_r+0x1e6>
 80023dc:	08002b04 	.word	0x08002b04
 80023e0:	08002b0e 	.word	0x08002b0e
 80023e4:	00000000 	.word	0x00000000
 80023e8:	0800219b 	.word	0x0800219b
 80023ec:	08002b0a 	.word	0x08002b0a

080023f0 <_printf_common>:
 80023f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f4:	4616      	mov	r6, r2
 80023f6:	4698      	mov	r8, r3
 80023f8:	688a      	ldr	r2, [r1, #8]
 80023fa:	690b      	ldr	r3, [r1, #16]
 80023fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002400:	4293      	cmp	r3, r2
 8002402:	bfb8      	it	lt
 8002404:	4613      	movlt	r3, r2
 8002406:	6033      	str	r3, [r6, #0]
 8002408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800240c:	4607      	mov	r7, r0
 800240e:	460c      	mov	r4, r1
 8002410:	b10a      	cbz	r2, 8002416 <_printf_common+0x26>
 8002412:	3301      	adds	r3, #1
 8002414:	6033      	str	r3, [r6, #0]
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	0699      	lsls	r1, r3, #26
 800241a:	bf42      	ittt	mi
 800241c:	6833      	ldrmi	r3, [r6, #0]
 800241e:	3302      	addmi	r3, #2
 8002420:	6033      	strmi	r3, [r6, #0]
 8002422:	6825      	ldr	r5, [r4, #0]
 8002424:	f015 0506 	ands.w	r5, r5, #6
 8002428:	d106      	bne.n	8002438 <_printf_common+0x48>
 800242a:	f104 0a19 	add.w	sl, r4, #25
 800242e:	68e3      	ldr	r3, [r4, #12]
 8002430:	6832      	ldr	r2, [r6, #0]
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	42ab      	cmp	r3, r5
 8002436:	dc26      	bgt.n	8002486 <_printf_common+0x96>
 8002438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	3b00      	subs	r3, #0
 8002440:	bf18      	it	ne
 8002442:	2301      	movne	r3, #1
 8002444:	0692      	lsls	r2, r2, #26
 8002446:	d42b      	bmi.n	80024a0 <_printf_common+0xb0>
 8002448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800244c:	4641      	mov	r1, r8
 800244e:	4638      	mov	r0, r7
 8002450:	47c8      	blx	r9
 8002452:	3001      	adds	r0, #1
 8002454:	d01e      	beq.n	8002494 <_printf_common+0xa4>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	6922      	ldr	r2, [r4, #16]
 800245a:	f003 0306 	and.w	r3, r3, #6
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf02      	ittt	eq
 8002462:	68e5      	ldreq	r5, [r4, #12]
 8002464:	6833      	ldreq	r3, [r6, #0]
 8002466:	1aed      	subeq	r5, r5, r3
 8002468:	68a3      	ldr	r3, [r4, #8]
 800246a:	bf0c      	ite	eq
 800246c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002470:	2500      	movne	r5, #0
 8002472:	4293      	cmp	r3, r2
 8002474:	bfc4      	itt	gt
 8002476:	1a9b      	subgt	r3, r3, r2
 8002478:	18ed      	addgt	r5, r5, r3
 800247a:	2600      	movs	r6, #0
 800247c:	341a      	adds	r4, #26
 800247e:	42b5      	cmp	r5, r6
 8002480:	d11a      	bne.n	80024b8 <_printf_common+0xc8>
 8002482:	2000      	movs	r0, #0
 8002484:	e008      	b.n	8002498 <_printf_common+0xa8>
 8002486:	2301      	movs	r3, #1
 8002488:	4652      	mov	r2, sl
 800248a:	4641      	mov	r1, r8
 800248c:	4638      	mov	r0, r7
 800248e:	47c8      	blx	r9
 8002490:	3001      	adds	r0, #1
 8002492:	d103      	bne.n	800249c <_printf_common+0xac>
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249c:	3501      	adds	r5, #1
 800249e:	e7c6      	b.n	800242e <_printf_common+0x3e>
 80024a0:	18e1      	adds	r1, r4, r3
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	2030      	movs	r0, #48	@ 0x30
 80024a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80024aa:	4422      	add	r2, r4
 80024ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80024b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80024b4:	3302      	adds	r3, #2
 80024b6:	e7c7      	b.n	8002448 <_printf_common+0x58>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4622      	mov	r2, r4
 80024bc:	4641      	mov	r1, r8
 80024be:	4638      	mov	r0, r7
 80024c0:	47c8      	blx	r9
 80024c2:	3001      	adds	r0, #1
 80024c4:	d0e6      	beq.n	8002494 <_printf_common+0xa4>
 80024c6:	3601      	adds	r6, #1
 80024c8:	e7d9      	b.n	800247e <_printf_common+0x8e>
	...

080024cc <_printf_i>:
 80024cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d0:	7e0f      	ldrb	r7, [r1, #24]
 80024d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024d4:	2f78      	cmp	r7, #120	@ 0x78
 80024d6:	4691      	mov	r9, r2
 80024d8:	4680      	mov	r8, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	469a      	mov	sl, r3
 80024de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024e2:	d807      	bhi.n	80024f4 <_printf_i+0x28>
 80024e4:	2f62      	cmp	r7, #98	@ 0x62
 80024e6:	d80a      	bhi.n	80024fe <_printf_i+0x32>
 80024e8:	2f00      	cmp	r7, #0
 80024ea:	f000 80d2 	beq.w	8002692 <_printf_i+0x1c6>
 80024ee:	2f58      	cmp	r7, #88	@ 0x58
 80024f0:	f000 80b9 	beq.w	8002666 <_printf_i+0x19a>
 80024f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024fc:	e03a      	b.n	8002574 <_printf_i+0xa8>
 80024fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002502:	2b15      	cmp	r3, #21
 8002504:	d8f6      	bhi.n	80024f4 <_printf_i+0x28>
 8002506:	a101      	add	r1, pc, #4	@ (adr r1, 800250c <_printf_i+0x40>)
 8002508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800250c:	08002565 	.word	0x08002565
 8002510:	08002579 	.word	0x08002579
 8002514:	080024f5 	.word	0x080024f5
 8002518:	080024f5 	.word	0x080024f5
 800251c:	080024f5 	.word	0x080024f5
 8002520:	080024f5 	.word	0x080024f5
 8002524:	08002579 	.word	0x08002579
 8002528:	080024f5 	.word	0x080024f5
 800252c:	080024f5 	.word	0x080024f5
 8002530:	080024f5 	.word	0x080024f5
 8002534:	080024f5 	.word	0x080024f5
 8002538:	08002679 	.word	0x08002679
 800253c:	080025a3 	.word	0x080025a3
 8002540:	08002633 	.word	0x08002633
 8002544:	080024f5 	.word	0x080024f5
 8002548:	080024f5 	.word	0x080024f5
 800254c:	0800269b 	.word	0x0800269b
 8002550:	080024f5 	.word	0x080024f5
 8002554:	080025a3 	.word	0x080025a3
 8002558:	080024f5 	.word	0x080024f5
 800255c:	080024f5 	.word	0x080024f5
 8002560:	0800263b 	.word	0x0800263b
 8002564:	6833      	ldr	r3, [r6, #0]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6032      	str	r2, [r6, #0]
 800256c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002574:	2301      	movs	r3, #1
 8002576:	e09d      	b.n	80026b4 <_printf_i+0x1e8>
 8002578:	6833      	ldr	r3, [r6, #0]
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	1d19      	adds	r1, r3, #4
 800257e:	6031      	str	r1, [r6, #0]
 8002580:	0606      	lsls	r6, r0, #24
 8002582:	d501      	bpl.n	8002588 <_printf_i+0xbc>
 8002584:	681d      	ldr	r5, [r3, #0]
 8002586:	e003      	b.n	8002590 <_printf_i+0xc4>
 8002588:	0645      	lsls	r5, r0, #25
 800258a:	d5fb      	bpl.n	8002584 <_printf_i+0xb8>
 800258c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002590:	2d00      	cmp	r5, #0
 8002592:	da03      	bge.n	800259c <_printf_i+0xd0>
 8002594:	232d      	movs	r3, #45	@ 0x2d
 8002596:	426d      	negs	r5, r5
 8002598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800259c:	4859      	ldr	r0, [pc, #356]	@ (8002704 <_printf_i+0x238>)
 800259e:	230a      	movs	r3, #10
 80025a0:	e011      	b.n	80025c6 <_printf_i+0xfa>
 80025a2:	6821      	ldr	r1, [r4, #0]
 80025a4:	6833      	ldr	r3, [r6, #0]
 80025a6:	0608      	lsls	r0, r1, #24
 80025a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80025ac:	d402      	bmi.n	80025b4 <_printf_i+0xe8>
 80025ae:	0649      	lsls	r1, r1, #25
 80025b0:	bf48      	it	mi
 80025b2:	b2ad      	uxthmi	r5, r5
 80025b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80025b6:	4853      	ldr	r0, [pc, #332]	@ (8002704 <_printf_i+0x238>)
 80025b8:	6033      	str	r3, [r6, #0]
 80025ba:	bf14      	ite	ne
 80025bc:	230a      	movne	r3, #10
 80025be:	2308      	moveq	r3, #8
 80025c0:	2100      	movs	r1, #0
 80025c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025c6:	6866      	ldr	r6, [r4, #4]
 80025c8:	60a6      	str	r6, [r4, #8]
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	bfa2      	ittt	ge
 80025ce:	6821      	ldrge	r1, [r4, #0]
 80025d0:	f021 0104 	bicge.w	r1, r1, #4
 80025d4:	6021      	strge	r1, [r4, #0]
 80025d6:	b90d      	cbnz	r5, 80025dc <_printf_i+0x110>
 80025d8:	2e00      	cmp	r6, #0
 80025da:	d04b      	beq.n	8002674 <_printf_i+0x1a8>
 80025dc:	4616      	mov	r6, r2
 80025de:	fbb5 f1f3 	udiv	r1, r5, r3
 80025e2:	fb03 5711 	mls	r7, r3, r1, r5
 80025e6:	5dc7      	ldrb	r7, [r0, r7]
 80025e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025ec:	462f      	mov	r7, r5
 80025ee:	42bb      	cmp	r3, r7
 80025f0:	460d      	mov	r5, r1
 80025f2:	d9f4      	bls.n	80025de <_printf_i+0x112>
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d10b      	bne.n	8002610 <_printf_i+0x144>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	07df      	lsls	r7, r3, #31
 80025fc:	d508      	bpl.n	8002610 <_printf_i+0x144>
 80025fe:	6923      	ldr	r3, [r4, #16]
 8002600:	6861      	ldr	r1, [r4, #4]
 8002602:	4299      	cmp	r1, r3
 8002604:	bfde      	ittt	le
 8002606:	2330      	movle	r3, #48	@ 0x30
 8002608:	f806 3c01 	strble.w	r3, [r6, #-1]
 800260c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002610:	1b92      	subs	r2, r2, r6
 8002612:	6122      	str	r2, [r4, #16]
 8002614:	f8cd a000 	str.w	sl, [sp]
 8002618:	464b      	mov	r3, r9
 800261a:	aa03      	add	r2, sp, #12
 800261c:	4621      	mov	r1, r4
 800261e:	4640      	mov	r0, r8
 8002620:	f7ff fee6 	bl	80023f0 <_printf_common>
 8002624:	3001      	adds	r0, #1
 8002626:	d14a      	bne.n	80026be <_printf_i+0x1f2>
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	b004      	add	sp, #16
 800262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	4833      	ldr	r0, [pc, #204]	@ (8002708 <_printf_i+0x23c>)
 800263c:	2778      	movs	r7, #120	@ 0x78
 800263e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	6831      	ldr	r1, [r6, #0]
 8002646:	061f      	lsls	r7, r3, #24
 8002648:	f851 5b04 	ldr.w	r5, [r1], #4
 800264c:	d402      	bmi.n	8002654 <_printf_i+0x188>
 800264e:	065f      	lsls	r7, r3, #25
 8002650:	bf48      	it	mi
 8002652:	b2ad      	uxthmi	r5, r5
 8002654:	6031      	str	r1, [r6, #0]
 8002656:	07d9      	lsls	r1, r3, #31
 8002658:	bf44      	itt	mi
 800265a:	f043 0320 	orrmi.w	r3, r3, #32
 800265e:	6023      	strmi	r3, [r4, #0]
 8002660:	b11d      	cbz	r5, 800266a <_printf_i+0x19e>
 8002662:	2310      	movs	r3, #16
 8002664:	e7ac      	b.n	80025c0 <_printf_i+0xf4>
 8002666:	4827      	ldr	r0, [pc, #156]	@ (8002704 <_printf_i+0x238>)
 8002668:	e7e9      	b.n	800263e <_printf_i+0x172>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f023 0320 	bic.w	r3, r3, #32
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	e7f6      	b.n	8002662 <_printf_i+0x196>
 8002674:	4616      	mov	r6, r2
 8002676:	e7bd      	b.n	80025f4 <_printf_i+0x128>
 8002678:	6833      	ldr	r3, [r6, #0]
 800267a:	6825      	ldr	r5, [r4, #0]
 800267c:	6961      	ldr	r1, [r4, #20]
 800267e:	1d18      	adds	r0, r3, #4
 8002680:	6030      	str	r0, [r6, #0]
 8002682:	062e      	lsls	r6, r5, #24
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	d501      	bpl.n	800268c <_printf_i+0x1c0>
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	e002      	b.n	8002692 <_printf_i+0x1c6>
 800268c:	0668      	lsls	r0, r5, #25
 800268e:	d5fb      	bpl.n	8002688 <_printf_i+0x1bc>
 8002690:	8019      	strh	r1, [r3, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	4616      	mov	r6, r2
 8002698:	e7bc      	b.n	8002614 <_printf_i+0x148>
 800269a:	6833      	ldr	r3, [r6, #0]
 800269c:	1d1a      	adds	r2, r3, #4
 800269e:	6032      	str	r2, [r6, #0]
 80026a0:	681e      	ldr	r6, [r3, #0]
 80026a2:	6862      	ldr	r2, [r4, #4]
 80026a4:	2100      	movs	r1, #0
 80026a6:	4630      	mov	r0, r6
 80026a8:	f7fd fd9a 	bl	80001e0 <memchr>
 80026ac:	b108      	cbz	r0, 80026b2 <_printf_i+0x1e6>
 80026ae:	1b80      	subs	r0, r0, r6
 80026b0:	6060      	str	r0, [r4, #4]
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	6123      	str	r3, [r4, #16]
 80026b6:	2300      	movs	r3, #0
 80026b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026bc:	e7aa      	b.n	8002614 <_printf_i+0x148>
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	4632      	mov	r2, r6
 80026c2:	4649      	mov	r1, r9
 80026c4:	4640      	mov	r0, r8
 80026c6:	47d0      	blx	sl
 80026c8:	3001      	adds	r0, #1
 80026ca:	d0ad      	beq.n	8002628 <_printf_i+0x15c>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	079b      	lsls	r3, r3, #30
 80026d0:	d413      	bmi.n	80026fa <_printf_i+0x22e>
 80026d2:	68e0      	ldr	r0, [r4, #12]
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	4298      	cmp	r0, r3
 80026d8:	bfb8      	it	lt
 80026da:	4618      	movlt	r0, r3
 80026dc:	e7a6      	b.n	800262c <_printf_i+0x160>
 80026de:	2301      	movs	r3, #1
 80026e0:	4632      	mov	r2, r6
 80026e2:	4649      	mov	r1, r9
 80026e4:	4640      	mov	r0, r8
 80026e6:	47d0      	blx	sl
 80026e8:	3001      	adds	r0, #1
 80026ea:	d09d      	beq.n	8002628 <_printf_i+0x15c>
 80026ec:	3501      	adds	r5, #1
 80026ee:	68e3      	ldr	r3, [r4, #12]
 80026f0:	9903      	ldr	r1, [sp, #12]
 80026f2:	1a5b      	subs	r3, r3, r1
 80026f4:	42ab      	cmp	r3, r5
 80026f6:	dcf2      	bgt.n	80026de <_printf_i+0x212>
 80026f8:	e7eb      	b.n	80026d2 <_printf_i+0x206>
 80026fa:	2500      	movs	r5, #0
 80026fc:	f104 0619 	add.w	r6, r4, #25
 8002700:	e7f5      	b.n	80026ee <_printf_i+0x222>
 8002702:	bf00      	nop
 8002704:	08002b15 	.word	0x08002b15
 8002708:	08002b26 	.word	0x08002b26

0800270c <__sflush_r>:
 800270c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002714:	0716      	lsls	r6, r2, #28
 8002716:	4605      	mov	r5, r0
 8002718:	460c      	mov	r4, r1
 800271a:	d454      	bmi.n	80027c6 <__sflush_r+0xba>
 800271c:	684b      	ldr	r3, [r1, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	dc02      	bgt.n	8002728 <__sflush_r+0x1c>
 8002722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	dd48      	ble.n	80027ba <__sflush_r+0xae>
 8002728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800272a:	2e00      	cmp	r6, #0
 800272c:	d045      	beq.n	80027ba <__sflush_r+0xae>
 800272e:	2300      	movs	r3, #0
 8002730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002734:	682f      	ldr	r7, [r5, #0]
 8002736:	6a21      	ldr	r1, [r4, #32]
 8002738:	602b      	str	r3, [r5, #0]
 800273a:	d030      	beq.n	800279e <__sflush_r+0x92>
 800273c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800273e:	89a3      	ldrh	r3, [r4, #12]
 8002740:	0759      	lsls	r1, r3, #29
 8002742:	d505      	bpl.n	8002750 <__sflush_r+0x44>
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800274a:	b10b      	cbz	r3, 8002750 <__sflush_r+0x44>
 800274c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002754:	6a21      	ldr	r1, [r4, #32]
 8002756:	4628      	mov	r0, r5
 8002758:	47b0      	blx	r6
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	89a3      	ldrh	r3, [r4, #12]
 800275e:	d106      	bne.n	800276e <__sflush_r+0x62>
 8002760:	6829      	ldr	r1, [r5, #0]
 8002762:	291d      	cmp	r1, #29
 8002764:	d82b      	bhi.n	80027be <__sflush_r+0xb2>
 8002766:	4a2a      	ldr	r2, [pc, #168]	@ (8002810 <__sflush_r+0x104>)
 8002768:	410a      	asrs	r2, r1
 800276a:	07d6      	lsls	r6, r2, #31
 800276c:	d427      	bmi.n	80027be <__sflush_r+0xb2>
 800276e:	2200      	movs	r2, #0
 8002770:	6062      	str	r2, [r4, #4]
 8002772:	04d9      	lsls	r1, r3, #19
 8002774:	6922      	ldr	r2, [r4, #16]
 8002776:	6022      	str	r2, [r4, #0]
 8002778:	d504      	bpl.n	8002784 <__sflush_r+0x78>
 800277a:	1c42      	adds	r2, r0, #1
 800277c:	d101      	bne.n	8002782 <__sflush_r+0x76>
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	b903      	cbnz	r3, 8002784 <__sflush_r+0x78>
 8002782:	6560      	str	r0, [r4, #84]	@ 0x54
 8002784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002786:	602f      	str	r7, [r5, #0]
 8002788:	b1b9      	cbz	r1, 80027ba <__sflush_r+0xae>
 800278a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800278e:	4299      	cmp	r1, r3
 8002790:	d002      	beq.n	8002798 <__sflush_r+0x8c>
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff fbf2 	bl	8001f7c <_free_r>
 8002798:	2300      	movs	r3, #0
 800279a:	6363      	str	r3, [r4, #52]	@ 0x34
 800279c:	e00d      	b.n	80027ba <__sflush_r+0xae>
 800279e:	2301      	movs	r3, #1
 80027a0:	4628      	mov	r0, r5
 80027a2:	47b0      	blx	r6
 80027a4:	4602      	mov	r2, r0
 80027a6:	1c50      	adds	r0, r2, #1
 80027a8:	d1c9      	bne.n	800273e <__sflush_r+0x32>
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0c6      	beq.n	800273e <__sflush_r+0x32>
 80027b0:	2b1d      	cmp	r3, #29
 80027b2:	d001      	beq.n	80027b8 <__sflush_r+0xac>
 80027b4:	2b16      	cmp	r3, #22
 80027b6:	d11e      	bne.n	80027f6 <__sflush_r+0xea>
 80027b8:	602f      	str	r7, [r5, #0]
 80027ba:	2000      	movs	r0, #0
 80027bc:	e022      	b.n	8002804 <__sflush_r+0xf8>
 80027be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	e01b      	b.n	80027fe <__sflush_r+0xf2>
 80027c6:	690f      	ldr	r7, [r1, #16]
 80027c8:	2f00      	cmp	r7, #0
 80027ca:	d0f6      	beq.n	80027ba <__sflush_r+0xae>
 80027cc:	0793      	lsls	r3, r2, #30
 80027ce:	680e      	ldr	r6, [r1, #0]
 80027d0:	bf08      	it	eq
 80027d2:	694b      	ldreq	r3, [r1, #20]
 80027d4:	600f      	str	r7, [r1, #0]
 80027d6:	bf18      	it	ne
 80027d8:	2300      	movne	r3, #0
 80027da:	eba6 0807 	sub.w	r8, r6, r7
 80027de:	608b      	str	r3, [r1, #8]
 80027e0:	f1b8 0f00 	cmp.w	r8, #0
 80027e4:	dde9      	ble.n	80027ba <__sflush_r+0xae>
 80027e6:	6a21      	ldr	r1, [r4, #32]
 80027e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80027ea:	4643      	mov	r3, r8
 80027ec:	463a      	mov	r2, r7
 80027ee:	4628      	mov	r0, r5
 80027f0:	47b0      	blx	r6
 80027f2:	2800      	cmp	r0, #0
 80027f4:	dc08      	bgt.n	8002808 <__sflush_r+0xfc>
 80027f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fe:	81a3      	strh	r3, [r4, #12]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002808:	4407      	add	r7, r0
 800280a:	eba8 0800 	sub.w	r8, r8, r0
 800280e:	e7e7      	b.n	80027e0 <__sflush_r+0xd4>
 8002810:	dfbffffe 	.word	0xdfbffffe

08002814 <_fflush_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	690b      	ldr	r3, [r1, #16]
 8002818:	4605      	mov	r5, r0
 800281a:	460c      	mov	r4, r1
 800281c:	b913      	cbnz	r3, 8002824 <_fflush_r+0x10>
 800281e:	2500      	movs	r5, #0
 8002820:	4628      	mov	r0, r5
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	b118      	cbz	r0, 800282e <_fflush_r+0x1a>
 8002826:	6a03      	ldr	r3, [r0, #32]
 8002828:	b90b      	cbnz	r3, 800282e <_fflush_r+0x1a>
 800282a:	f7ff fa9f 	bl	8001d6c <__sinit>
 800282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f3      	beq.n	800281e <_fflush_r+0xa>
 8002836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002838:	07d0      	lsls	r0, r2, #31
 800283a:	d404      	bmi.n	8002846 <_fflush_r+0x32>
 800283c:	0599      	lsls	r1, r3, #22
 800283e:	d402      	bmi.n	8002846 <_fflush_r+0x32>
 8002840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002842:	f7ff fb98 	bl	8001f76 <__retarget_lock_acquire_recursive>
 8002846:	4628      	mov	r0, r5
 8002848:	4621      	mov	r1, r4
 800284a:	f7ff ff5f 	bl	800270c <__sflush_r>
 800284e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002850:	07da      	lsls	r2, r3, #31
 8002852:	4605      	mov	r5, r0
 8002854:	d4e4      	bmi.n	8002820 <_fflush_r+0xc>
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	059b      	lsls	r3, r3, #22
 800285a:	d4e1      	bmi.n	8002820 <_fflush_r+0xc>
 800285c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800285e:	f7ff fb8b 	bl	8001f78 <__retarget_lock_release_recursive>
 8002862:	e7dd      	b.n	8002820 <_fflush_r+0xc>

08002864 <__swbuf_r>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	460e      	mov	r6, r1
 8002868:	4614      	mov	r4, r2
 800286a:	4605      	mov	r5, r0
 800286c:	b118      	cbz	r0, 8002876 <__swbuf_r+0x12>
 800286e:	6a03      	ldr	r3, [r0, #32]
 8002870:	b90b      	cbnz	r3, 8002876 <__swbuf_r+0x12>
 8002872:	f7ff fa7b 	bl	8001d6c <__sinit>
 8002876:	69a3      	ldr	r3, [r4, #24]
 8002878:	60a3      	str	r3, [r4, #8]
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	071a      	lsls	r2, r3, #28
 800287e:	d501      	bpl.n	8002884 <__swbuf_r+0x20>
 8002880:	6923      	ldr	r3, [r4, #16]
 8002882:	b943      	cbnz	r3, 8002896 <__swbuf_r+0x32>
 8002884:	4621      	mov	r1, r4
 8002886:	4628      	mov	r0, r5
 8002888:	f000 f82a 	bl	80028e0 <__swsetup_r>
 800288c:	b118      	cbz	r0, 8002896 <__swbuf_r+0x32>
 800288e:	f04f 37ff 	mov.w	r7, #4294967295
 8002892:	4638      	mov	r0, r7
 8002894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	6922      	ldr	r2, [r4, #16]
 800289a:	1a98      	subs	r0, r3, r2
 800289c:	6963      	ldr	r3, [r4, #20]
 800289e:	b2f6      	uxtb	r6, r6
 80028a0:	4283      	cmp	r3, r0
 80028a2:	4637      	mov	r7, r6
 80028a4:	dc05      	bgt.n	80028b2 <__swbuf_r+0x4e>
 80028a6:	4621      	mov	r1, r4
 80028a8:	4628      	mov	r0, r5
 80028aa:	f7ff ffb3 	bl	8002814 <_fflush_r>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d1ed      	bne.n	800288e <__swbuf_r+0x2a>
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60a3      	str	r3, [r4, #8]
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	6022      	str	r2, [r4, #0]
 80028be:	701e      	strb	r6, [r3, #0]
 80028c0:	6962      	ldr	r2, [r4, #20]
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d004      	beq.n	80028d2 <__swbuf_r+0x6e>
 80028c8:	89a3      	ldrh	r3, [r4, #12]
 80028ca:	07db      	lsls	r3, r3, #31
 80028cc:	d5e1      	bpl.n	8002892 <__swbuf_r+0x2e>
 80028ce:	2e0a      	cmp	r6, #10
 80028d0:	d1df      	bne.n	8002892 <__swbuf_r+0x2e>
 80028d2:	4621      	mov	r1, r4
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff ff9d 	bl	8002814 <_fflush_r>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d0d9      	beq.n	8002892 <__swbuf_r+0x2e>
 80028de:	e7d6      	b.n	800288e <__swbuf_r+0x2a>

080028e0 <__swsetup_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <__swsetup_r+0xa8>)
 80028e4:	4605      	mov	r5, r0
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	460c      	mov	r4, r1
 80028ea:	b118      	cbz	r0, 80028f4 <__swsetup_r+0x14>
 80028ec:	6a03      	ldr	r3, [r0, #32]
 80028ee:	b90b      	cbnz	r3, 80028f4 <__swsetup_r+0x14>
 80028f0:	f7ff fa3c 	bl	8001d6c <__sinit>
 80028f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028f8:	0719      	lsls	r1, r3, #28
 80028fa:	d422      	bmi.n	8002942 <__swsetup_r+0x62>
 80028fc:	06da      	lsls	r2, r3, #27
 80028fe:	d407      	bmi.n	8002910 <__swsetup_r+0x30>
 8002900:	2209      	movs	r2, #9
 8002902:	602a      	str	r2, [r5, #0]
 8002904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002908:	81a3      	strh	r3, [r4, #12]
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
 800290e:	e033      	b.n	8002978 <__swsetup_r+0x98>
 8002910:	0758      	lsls	r0, r3, #29
 8002912:	d512      	bpl.n	800293a <__swsetup_r+0x5a>
 8002914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002916:	b141      	cbz	r1, 800292a <__swsetup_r+0x4a>
 8002918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800291c:	4299      	cmp	r1, r3
 800291e:	d002      	beq.n	8002926 <__swsetup_r+0x46>
 8002920:	4628      	mov	r0, r5
 8002922:	f7ff fb2b 	bl	8001f7c <_free_r>
 8002926:	2300      	movs	r3, #0
 8002928:	6363      	str	r3, [r4, #52]	@ 0x34
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	2300      	movs	r3, #0
 8002934:	6063      	str	r3, [r4, #4]
 8002936:	6923      	ldr	r3, [r4, #16]
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	89a3      	ldrh	r3, [r4, #12]
 800293c:	f043 0308 	orr.w	r3, r3, #8
 8002940:	81a3      	strh	r3, [r4, #12]
 8002942:	6923      	ldr	r3, [r4, #16]
 8002944:	b94b      	cbnz	r3, 800295a <__swsetup_r+0x7a>
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800294c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002950:	d003      	beq.n	800295a <__swsetup_r+0x7a>
 8002952:	4621      	mov	r1, r4
 8002954:	4628      	mov	r0, r5
 8002956:	f000 f84f 	bl	80029f8 <__smakebuf_r>
 800295a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800295e:	f013 0201 	ands.w	r2, r3, #1
 8002962:	d00a      	beq.n	800297a <__swsetup_r+0x9a>
 8002964:	2200      	movs	r2, #0
 8002966:	60a2      	str	r2, [r4, #8]
 8002968:	6962      	ldr	r2, [r4, #20]
 800296a:	4252      	negs	r2, r2
 800296c:	61a2      	str	r2, [r4, #24]
 800296e:	6922      	ldr	r2, [r4, #16]
 8002970:	b942      	cbnz	r2, 8002984 <__swsetup_r+0xa4>
 8002972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002976:	d1c5      	bne.n	8002904 <__swsetup_r+0x24>
 8002978:	bd38      	pop	{r3, r4, r5, pc}
 800297a:	0799      	lsls	r1, r3, #30
 800297c:	bf58      	it	pl
 800297e:	6962      	ldrpl	r2, [r4, #20]
 8002980:	60a2      	str	r2, [r4, #8]
 8002982:	e7f4      	b.n	800296e <__swsetup_r+0x8e>
 8002984:	2000      	movs	r0, #0
 8002986:	e7f7      	b.n	8002978 <__swsetup_r+0x98>
 8002988:	20000018 	.word	0x20000018

0800298c <_sbrk_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4d06      	ldr	r5, [pc, #24]	@ (80029a8 <_sbrk_r+0x1c>)
 8002990:	2300      	movs	r3, #0
 8002992:	4604      	mov	r4, r0
 8002994:	4608      	mov	r0, r1
 8002996:	602b      	str	r3, [r5, #0]
 8002998:	f7ff f88a 	bl	8001ab0 <_sbrk>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_sbrk_r+0x1a>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_sbrk_r+0x1a>
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20000208 	.word	0x20000208

080029ac <__swhatbuf_r>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b4:	2900      	cmp	r1, #0
 80029b6:	b096      	sub	sp, #88	@ 0x58
 80029b8:	4615      	mov	r5, r2
 80029ba:	461e      	mov	r6, r3
 80029bc:	da0d      	bge.n	80029da <__swhatbuf_r+0x2e>
 80029be:	89a3      	ldrh	r3, [r4, #12]
 80029c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2340      	movne	r3, #64	@ 0x40
 80029cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80029d0:	2000      	movs	r0, #0
 80029d2:	6031      	str	r1, [r6, #0]
 80029d4:	602b      	str	r3, [r5, #0]
 80029d6:	b016      	add	sp, #88	@ 0x58
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
 80029da:	466a      	mov	r2, sp
 80029dc:	f000 f848 	bl	8002a70 <_fstat_r>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	dbec      	blt.n	80029be <__swhatbuf_r+0x12>
 80029e4:	9901      	ldr	r1, [sp, #4]
 80029e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80029ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80029ee:	4259      	negs	r1, r3
 80029f0:	4159      	adcs	r1, r3
 80029f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f6:	e7eb      	b.n	80029d0 <__swhatbuf_r+0x24>

080029f8 <__smakebuf_r>:
 80029f8:	898b      	ldrh	r3, [r1, #12]
 80029fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029fc:	079d      	lsls	r5, r3, #30
 80029fe:	4606      	mov	r6, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	d507      	bpl.n	8002a14 <__smakebuf_r+0x1c>
 8002a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a08:	6023      	str	r3, [r4, #0]
 8002a0a:	6123      	str	r3, [r4, #16]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	6163      	str	r3, [r4, #20]
 8002a10:	b003      	add	sp, #12
 8002a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a14:	ab01      	add	r3, sp, #4
 8002a16:	466a      	mov	r2, sp
 8002a18:	f7ff ffc8 	bl	80029ac <__swhatbuf_r>
 8002a1c:	9f00      	ldr	r7, [sp, #0]
 8002a1e:	4605      	mov	r5, r0
 8002a20:	4639      	mov	r1, r7
 8002a22:	4630      	mov	r0, r6
 8002a24:	f7ff fb16 	bl	8002054 <_malloc_r>
 8002a28:	b948      	cbnz	r0, 8002a3e <__smakebuf_r+0x46>
 8002a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a2e:	059a      	lsls	r2, r3, #22
 8002a30:	d4ee      	bmi.n	8002a10 <__smakebuf_r+0x18>
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	81a3      	strh	r3, [r4, #12]
 8002a3c:	e7e2      	b.n	8002a04 <__smakebuf_r+0xc>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	6020      	str	r0, [r4, #0]
 8002a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a46:	81a3      	strh	r3, [r4, #12]
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a4e:	b15b      	cbz	r3, 8002a68 <__smakebuf_r+0x70>
 8002a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f81d 	bl	8002a94 <_isatty_r>
 8002a5a:	b128      	cbz	r0, 8002a68 <__smakebuf_r+0x70>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	431d      	orrs	r5, r3
 8002a6c:	81a5      	strh	r5, [r4, #12]
 8002a6e:	e7cf      	b.n	8002a10 <__smakebuf_r+0x18>

08002a70 <_fstat_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4d07      	ldr	r5, [pc, #28]	@ (8002a90 <_fstat_r+0x20>)
 8002a74:	2300      	movs	r3, #0
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	602b      	str	r3, [r5, #0]
 8002a7e:	f7fe ffef 	bl	8001a60 <_fstat>
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	d102      	bne.n	8002a8c <_fstat_r+0x1c>
 8002a86:	682b      	ldr	r3, [r5, #0]
 8002a88:	b103      	cbz	r3, 8002a8c <_fstat_r+0x1c>
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000208 	.word	0x20000208

08002a94 <_isatty_r>:
 8002a94:	b538      	push	{r3, r4, r5, lr}
 8002a96:	4d06      	ldr	r5, [pc, #24]	@ (8002ab0 <_isatty_r+0x1c>)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	602b      	str	r3, [r5, #0]
 8002aa0:	f7fe ffee 	bl	8001a80 <_isatty>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d102      	bne.n	8002aae <_isatty_r+0x1a>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b103      	cbz	r3, 8002aae <_isatty_r+0x1a>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	20000208 	.word	0x20000208

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
