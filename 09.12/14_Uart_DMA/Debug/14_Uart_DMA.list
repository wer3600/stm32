
14_Uart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f94  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002128  08002128  00003128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002138  08002138  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002140  08002140  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002140  08002140  00003140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002144  08002144  00003144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002148  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  08002160  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002160  0000414c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ab7  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011e1  00000000  00000000  0000aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0000bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000499  00000000  00000000  0000c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001462b  00000000  00000000  0000c781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007bd6  00000000  00000000  00020dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a32  00000000  00000000  00028982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab3b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001840  00000000  00000000  000ab3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000acc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002110 	.word	0x08002110

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002110 	.word	0x08002110

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <HAL_Init+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <HAL_Init+0x40>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <HAL_Init+0x40>)
 80004da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	@ (8000504 <HAL_Init+0x40>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f933 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 f810 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f000 f806 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023c00 	.word	0x40023c00

08000508 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_InitTick+0x54>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <HAL_InitTick+0x58>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800052e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f943 	bl	80007c2 <HAL_SYSTICK_Config>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e00e      	b.n	8000564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d80a      	bhi.n	8000562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f000 f90b 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <HAL_InitTick+0x5c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
 8000560:	e000      	b.n	8000564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000014 	.word	0x20000014
 8000570:	20000004 	.word	0x20000004
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004
 800059c:	20000034 	.word	0x20000034

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000034 	.word	0x20000034

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	@ (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	@ (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	@ (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	@ 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff3e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff31 	bl	800061c <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff feda 	bl	80005a0 <HAL_GetTick>
 80007ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e099      	b.n	800092c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2202      	movs	r2, #2
 80007fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f022 0201 	bic.w	r2, r2, #1
 8000816:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000818:	e00f      	b.n	800083a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800081a:	f7ff fec1 	bl	80005a0 <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	2b05      	cmp	r3, #5
 8000826:	d908      	bls.n	800083a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2220      	movs	r2, #32
 800082c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2203      	movs	r2, #3
 8000832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000836:	2303      	movs	r3, #3
 8000838:	e078      	b.n	800092c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e8      	bne.n	800081a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	4b38      	ldr	r3, [pc, #224]	@ (8000934 <HAL_DMA_Init+0x158>)
 8000854:	4013      	ands	r3, r2
 8000856:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4313      	orrs	r3, r2
 800088a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000890:	2b04      	cmp	r3, #4
 8000892:	d107      	bne.n	80008a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4313      	orrs	r3, r2
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f023 0307 	bic.w	r3, r3, #7
 80008ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d117      	bne.n	80008fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00e      	beq.n	80008fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 fa6f 	bl	8000dc4 <DMA_CheckFifoParam>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d008      	beq.n	80008fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2240      	movs	r2, #64	@ 0x40
 80008f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80008fa:	2301      	movs	r3, #1
 80008fc:	e016      	b.n	800092c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 fa26 	bl	8000d58 <DMA_CalcBaseAndBitshift>
 800090c:	4603      	mov	r3, r0
 800090e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000914:	223f      	movs	r2, #63	@ 0x3f
 8000916:	409a      	lsls	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	f010803f 	.word	0xf010803f

08000938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000956:	2b01      	cmp	r3, #1
 8000958:	d101      	bne.n	800095e <HAL_DMA_Start_IT+0x26>
 800095a:	2302      	movs	r3, #2
 800095c:	e040      	b.n	80009e0 <HAL_DMA_Start_IT+0xa8>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b01      	cmp	r3, #1
 8000970:	d12f      	bne.n	80009d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2202      	movs	r2, #2
 8000976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f9b8 	bl	8000cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000990:	223f      	movs	r2, #63	@ 0x3f
 8000992:	409a      	lsls	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0216 	orr.w	r2, r2, #22
 80009a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0208 	orr.w	r2, r2, #8
 80009be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	e005      	b.n	80009de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009da:	2302      	movs	r3, #2
 80009dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009de:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f4:	4b8e      	ldr	r3, [pc, #568]	@ (8000c30 <HAL_DMA_IRQHandler+0x248>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a8e      	ldr	r2, [pc, #568]	@ (8000c34 <HAL_DMA_IRQHandler+0x24c>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0a9b      	lsrs	r3, r3, #10
 8000a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a12:	2208      	movs	r2, #8
 8000a14:	409a      	lsls	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d013      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0204 	bic.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a40:	2208      	movs	r2, #8
 8000a42:	409a      	lsls	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a82:	f043 0202 	orr.w	r2, r3, #2
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d012      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aac:	2204      	movs	r2, #4
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d043      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03c      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d018      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d024      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
 8000b16:	e01f      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e016      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0208 	bic.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 808f 	beq.w	8000c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8087 	beq.w	8000c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b7e:	2220      	movs	r2, #32
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d136      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x1da>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bd6:	223f      	movs	r2, #63	@ 0x3f
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d07e      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
        }
        return;
 8000bfe:	e079      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01d      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10d      	bne.n	8000c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d031      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
 8000c2c:	e02c      	b.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
 8000c2e:	bf00      	nop
 8000c30:	20000014 	.word	0x20000014
 8000c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d023      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	4798      	blx	r3
 8000c48:	e01e      	b.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10f      	bne.n	8000c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0210 	bic.w	r2, r2, #16
 8000c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d032      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d307      	bcc.n	8000cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f2      	bne.n	8000cb4 <HAL_DMA_IRQHandler+0x2cc>
 8000cce:	e000      	b.n	8000cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	4798      	blx	r3
 8000cf2:	e000      	b.n	8000cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000cf4:	bf00      	nop
    }
  }
}
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b40      	cmp	r3, #64	@ 0x40
 8000d28:	d108      	bne.n	8000d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d3a:	e007      	b.n	8000d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	60da      	str	r2, [r3, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3b10      	subs	r3, #16
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <DMA_CalcBaseAndBitshift+0x64>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d72:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d909      	bls.n	8000d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000d8e:	f023 0303 	bic.w	r3, r3, #3
 8000d92:	1d1a      	adds	r2, r3, #4
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d98:	e007      	b.n	8000daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	aaaaaaab 	.word	0xaaaaaaab
 8000dc0:	08002128 	.word	0x08002128

08000dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11f      	bne.n	8000e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d856      	bhi.n	8000e92 <DMA_CheckFifoParam+0xce>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <DMA_CheckFifoParam+0x28>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e0f 	.word	0x08000e0f
 8000df4:	08000dfd 	.word	0x08000dfd
 8000df8:	08000e93 	.word	0x08000e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d046      	beq.n	8000e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e0c:	e043      	b.n	8000e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000e16:	d140      	bne.n	8000e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e1c:	e03d      	b.n	8000e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e26:	d121      	bne.n	8000e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d837      	bhi.n	8000e9e <DMA_CheckFifoParam+0xda>
 8000e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <DMA_CheckFifoParam+0x70>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e4b 	.word	0x08000e4b
 8000e3c:	08000e45 	.word	0x08000e45
 8000e40:	08000e5d 	.word	0x08000e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
      break;
 8000e48:	e030      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d025      	beq.n	8000ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e5a:	e022      	b.n	8000ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000e64:	d11f      	bne.n	8000ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e6a:	e01c      	b.n	8000ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d903      	bls.n	8000e7a <DMA_CheckFifoParam+0xb6>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d003      	beq.n	8000e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e78:	e018      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8000e7e:	e015      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00e      	beq.n	8000eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e90:	e00b      	b.n	8000eaa <DMA_CheckFifoParam+0xe6>
      break;
 8000e92:	bf00      	nop
 8000e94:	e00a      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e96:	bf00      	nop
 8000e98:	e008      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e9a:	bf00      	nop
 8000e9c:	e006      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e004      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e002      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;   
 8000ea6:	bf00      	nop
 8000ea8:	e000      	b.n	8000eac <DMA_CheckFifoParam+0xe8>
      break;
 8000eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e159      	b.n	800118c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8148 	bne.w	8001186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d130      	bne.n	8000f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a2 	beq.w	8001186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	4a56      	ldr	r2, [pc, #344]	@ (80011a4 <HAL_GPIO_Init+0x2e8>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001050:	6453      	str	r3, [r2, #68]	@ 0x44
 8001052:	4b54      	ldr	r3, [pc, #336]	@ (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a52      	ldr	r2, [pc, #328]	@ (80011a8 <HAL_GPIO_Init+0x2ec>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a49      	ldr	r2, [pc, #292]	@ (80011ac <HAL_GPIO_Init+0x2f0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x202>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	@ (80011b0 <HAL_GPIO_Init+0x2f4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x1fe>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	@ (80011b4 <HAL_GPIO_Init+0x2f8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x1fa>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	@ (80011b8 <HAL_GPIO_Init+0x2fc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x1f6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	@ (80011bc <HAL_GPIO_Init+0x300>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x1f2>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	@ (80011a8 <HAL_GPIO_Init+0x2ec>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b38      	ldr	r3, [pc, #224]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1a      	ldr	r2, [pc, #104]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f aea2 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000014 	.word	0x20000014

080011dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_RCC_GetHCLKFreq>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	0a9b      	lsrs	r3, r3, #10
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	4903      	ldr	r1, [pc, #12]	@ (8001200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	08002130 	.word	0x08002130

08001204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001208:	f7ff ffdc 	bl	80011c4 <HAL_RCC_GetHCLKFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	0b5b      	lsrs	r3, r3, #13
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	4903      	ldr	r1, [pc, #12]	@ (8001228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	08002130 	.word	0x08002130

0800122c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e042      	b.n	80012c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f83a 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	@ 0x24
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800126e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fb87 	bl	8001984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d156      	bne.n	80013a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_UART_Transmit_DMA+0x26>
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e04f      	b.n	80013aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2221      	movs	r2, #33	@ 0x21
 8001326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800132e:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <HAL_UART_Transmit_DMA+0xd4>)
 8001330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	4a20      	ldr	r2, [pc, #128]	@ (80013b8 <HAL_UART_Transmit_DMA+0xd8>)
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_UART_Transmit_DMA+0xdc>)
 8001340:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001346:	2200      	movs	r2, #0
 8001348:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3304      	adds	r3, #4
 800135e:	461a      	mov	r2, r3
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	f7ff fae9 	bl	8000938 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800136e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3314      	adds	r3, #20
 8001376:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	e853 3f00 	ldrex	r3, [r3]
 800137e:	617b      	str	r3, [r7, #20]
   return(result);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3314      	adds	r3, #20
 800138e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001390:	627a      	str	r2, [r7, #36]	@ 0x24
 8001392:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001394:	6a39      	ldr	r1, [r7, #32]
 8001396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001398:	e841 2300 	strex	r3, r2, [r1]
 800139c:	61fb      	str	r3, [r7, #28]
   return(result);
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e5      	bne.n	8001370 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80013a8:	2302      	movs	r3, #2
  }
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3730      	adds	r7, #48	@ 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	08001487 	.word	0x08001487
 80013b8:	08001521 	.word	0x08001521
 80013bc:	080016a5 	.word	0x080016a5

080013c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d112      	bne.n	8001400 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_UART_Receive_DMA+0x26>
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00b      	b.n	8001402 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f99e 	bl	8001738 <UART_Start_Receive_DMA>
 80013fc:	4603      	mov	r3, r0
 80013fe:	e000      	b.n	8001402 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001400:	2302      	movs	r3, #2
  }
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b090      	sub	sp, #64	@ 0x40
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d137      	bne.n	8001512 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80014a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a4:	2200      	movs	r2, #0
 80014a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80014a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3314      	adds	r3, #20
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	e853 3f00 	ldrex	r3, [r3]
 80014b6:	623b      	str	r3, [r7, #32]
   return(result);
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3314      	adds	r3, #20
 80014c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014d0:	e841 2300 	strex	r3, r2, [r1]
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e5      	bne.n	80014a8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80014dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	330c      	adds	r3, #12
 80014e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	e853 3f00 	ldrex	r3, [r3]
 80014ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	330c      	adds	r3, #12
 80014fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014fc:	61fa      	str	r2, [r7, #28]
 80014fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	e841 2300 	strex	r3, r2, [r1]
 8001508:	617b      	str	r3, [r7, #20]
   return(result);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e5      	bne.n	80014dc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001510:	e002      	b.n	8001518 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8001512:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001514:	f7ff ff79 	bl	800140a <HAL_UART_TxCpltCallback>
}
 8001518:	bf00      	nop
 800151a:	3740      	adds	r7, #64	@ 0x40
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff ff75 	bl	800141e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	@ 0x70
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d172      	bne.n	800163e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800155a:	2200      	movs	r2, #0
 800155c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800155e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	330c      	adds	r3, #12
 8001564:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001568:	e853 3f00 	ldrex	r3, [r3]
 800156c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800156e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	330c      	adds	r3, #12
 800157c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800157e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001580:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001582:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001586:	e841 2300 	strex	r3, r2, [r1]
 800158a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800158c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e5      	bne.n	800155e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3314      	adds	r3, #20
 8001598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800159a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800159c:	e853 3f00 	ldrex	r3, [r3]
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80015a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80015aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3314      	adds	r3, #20
 80015b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80015b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80015b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015ba:	e841 2300 	strex	r3, r2, [r1]
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80015c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1e5      	bne.n	8001592 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3314      	adds	r3, #20
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	e853 3f00 	ldrex	r3, [r3]
 80015d4:	623b      	str	r3, [r7, #32]
   return(result);
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80015de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3314      	adds	r3, #20
 80015e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015ee:	e841 2300 	strex	r3, r2, [r1]
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80015f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e5      	bne.n	80015c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	2b01      	cmp	r3, #1
 8001608:	d119      	bne.n	800163e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800160a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	330c      	adds	r3, #12
 8001610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	e853 3f00 	ldrex	r3, [r3]
 8001618:	60fb      	str	r3, [r7, #12]
   return(result);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f023 0310 	bic.w	r3, r3, #16
 8001620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	330c      	adds	r3, #12
 8001628:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800162a:	61fa      	str	r2, [r7, #28]
 800162c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	e841 2300 	strex	r3, r2, [r1]
 8001636:	617b      	str	r3, [r7, #20]
   return(result);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1e5      	bne.n	800160a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800163e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800164c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800164e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001654:	f7ff ff0b 	bl	800146e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001658:	e002      	b.n	8001660 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800165a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800165c:	f7ff fee9 	bl	8001432 <HAL_UART_RxCpltCallback>
}
 8001660:	bf00      	nop
 8001662:	3770      	adds	r7, #112	@ 0x70
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001674:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff feed 	bl	800146e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001694:	e002      	b.n	800169c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fed5 	bl	8001446 <HAL_UART_RxHalfCpltCallback>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c0:	2b80      	cmp	r3, #128	@ 0x80
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b21      	cmp	r3, #33	@ 0x21
 80016d6:	d108      	bne.n	80016ea <UART_DMAError+0x46>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2200      	movs	r2, #0
 80016e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f000 f8c1 	bl	800186c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f4:	2b40      	cmp	r3, #64	@ 0x40
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b22      	cmp	r3, #34	@ 0x22
 800170a:	d108      	bne.n	800171e <UART_DMAError+0x7a>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2200      	movs	r2, #0
 8001716:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f000 f8cf 	bl	80018bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f043 0210 	orr.w	r2, r3, #16
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f7ff fe95 	bl	800145a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b098      	sub	sp, #96	@ 0x60
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2222      	movs	r2, #34	@ 0x22
 800175c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001764:	4a3e      	ldr	r2, [pc, #248]	@ (8001860 <UART_Start_Receive_DMA+0x128>)
 8001766:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176c:	4a3d      	ldr	r2, [pc, #244]	@ (8001864 <UART_Start_Receive_DMA+0x12c>)
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001774:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <UART_Start_Receive_DMA+0x130>)
 8001776:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177c:	2200      	movs	r2, #0
 800177e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3304      	adds	r3, #4
 8001790:	4619      	mov	r1, r3
 8001792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f7ff f8ce 	bl	8000938 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d019      	beq.n	80017ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	330c      	adds	r3, #12
 80017c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017c4:	e853 3f00 	ldrex	r3, [r3]
 80017c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80017ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	330c      	adds	r3, #12
 80017d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017e2:	e841 2300 	strex	r3, r2, [r1]
 80017e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80017e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1e5      	bne.n	80017ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3314      	adds	r3, #20
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f8:	e853 3f00 	ldrex	r3, [r3]
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	657b      	str	r3, [r7, #84]	@ 0x54
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3314      	adds	r3, #20
 800180c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800180e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001812:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001816:	e841 2300 	strex	r3, r2, [r1]
 800181a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e5      	bne.n	80017ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3314      	adds	r3, #20
 8001828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	e853 3f00 	ldrex	r3, [r3]
 8001830:	617b      	str	r3, [r7, #20]
   return(result);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3314      	adds	r3, #20
 8001840:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001842:	627a      	str	r2, [r7, #36]	@ 0x24
 8001844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184a:	e841 2300 	strex	r3, r2, [r1]
 800184e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e5      	bne.n	8001822 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3760      	adds	r7, #96	@ 0x60
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0800153d 	.word	0x0800153d
 8001864:	08001669 	.word	0x08001669
 8001868:	080016a5 	.word	0x080016a5

0800186c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	330c      	adds	r3, #12
 800187a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	e853 3f00 	ldrex	r3, [r3]
 8001882:	60bb      	str	r3, [r7, #8]
   return(result);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	330c      	adds	r3, #12
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	61ba      	str	r2, [r7, #24]
 8001896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	e841 2300 	strex	r3, r2, [r1]
 80018a0:	613b      	str	r3, [r7, #16]
   return(result);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e5      	bne.n	8001874 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80018b0:	bf00      	nop
 80018b2:	3724      	adds	r7, #36	@ 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80018bc:	b480      	push	{r7}
 80018be:	b095      	sub	sp, #84	@ 0x54
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	330c      	adds	r3, #12
 80018ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ce:	e853 3f00 	ldrex	r3, [r3]
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80018d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	330c      	adds	r3, #12
 80018e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018ec:	e841 2300 	strex	r3, r2, [r1]
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80018f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e5      	bne.n	80018c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3314      	adds	r3, #20
 80018fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	e853 3f00 	ldrex	r3, [r3]
 8001906:	61fb      	str	r3, [r7, #28]
   return(result);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3314      	adds	r3, #20
 8001916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800191c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800191e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001920:	e841 2300 	strex	r3, r2, [r1]
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e5      	bne.n	80018f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	2b01      	cmp	r3, #1
 8001932:	d119      	bne.n	8001968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	330c      	adds	r3, #12
 800193a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	e853 3f00 	ldrex	r3, [r3]
 8001942:	60bb      	str	r3, [r7, #8]
   return(result);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 0310 	bic.w	r3, r3, #16
 800194a:	647b      	str	r3, [r7, #68]	@ 0x44
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	330c      	adds	r3, #12
 8001952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001954:	61ba      	str	r2, [r7, #24]
 8001956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001958:	6979      	ldr	r1, [r7, #20]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	e841 2300 	strex	r3, r2, [r1]
 8001960:	613b      	str	r3, [r7, #16]
   return(result);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e5      	bne.n	8001934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001976:	bf00      	nop
 8001978:	3754      	adds	r7, #84	@ 0x54
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b0c0      	sub	sp, #256	@ 0x100
 800198a:	af00      	add	r7, sp, #0
 800198c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800199c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	ea40 0301 	orr.w	r3, r0, r1
 80019ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80019d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80019dc:	f021 010c 	bic.w	r1, r1, #12
 80019e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80019ea:	430b      	orrs	r3, r1
 80019ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80019fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019fe:	6999      	ldr	r1, [r3, #24]
 8001a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	ea40 0301 	orr.w	r3, r0, r1
 8001a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b8f      	ldr	r3, [pc, #572]	@ (8001c50 <UART_SetConfig+0x2cc>)
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d005      	beq.n	8001a24 <UART_SetConfig+0xa0>
 8001a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8001c54 <UART_SetConfig+0x2d0>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d104      	bne.n	8001a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a24:	f7ff fbee 	bl	8001204 <HAL_RCC_GetPCLK2Freq>
 8001a28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001a2c:	e003      	b.n	8001a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a2e:	f7ff fbd5 	bl	80011dc <HAL_RCC_GetPCLK1Freq>
 8001a32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a40:	f040 810c 	bne.w	8001c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001a56:	4622      	mov	r2, r4
 8001a58:	462b      	mov	r3, r5
 8001a5a:	1891      	adds	r1, r2, r2
 8001a5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a5e:	415b      	adcs	r3, r3
 8001a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a66:	4621      	mov	r1, r4
 8001a68:	eb12 0801 	adds.w	r8, r2, r1
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	eb43 0901 	adc.w	r9, r3, r1
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	eb18 0303 	adds.w	r3, r8, r3
 8001a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001a94:	462b      	mov	r3, r5
 8001a96:	eb49 0303 	adc.w	r3, r9, r3
 8001a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	18db      	adds	r3, r3, r3
 8001ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ab8:	4613      	mov	r3, r2
 8001aba:	eb42 0303 	adc.w	r3, r2, r3
 8001abe:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ac8:	f7fe fb84 	bl	80001d4 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <UART_SetConfig+0x2d4>)
 8001ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	011c      	lsls	r4, r3, #4
 8001ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001aec:	4642      	mov	r2, r8
 8001aee:	464b      	mov	r3, r9
 8001af0:	1891      	adds	r1, r2, r2
 8001af2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001af4:	415b      	adcs	r3, r3
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001afc:	4641      	mov	r1, r8
 8001afe:	eb12 0a01 	adds.w	sl, r2, r1
 8001b02:	4649      	mov	r1, r9
 8001b04:	eb43 0b01 	adc.w	fp, r3, r1
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b1c:	4692      	mov	sl, r2
 8001b1e:	469b      	mov	fp, r3
 8001b20:	4643      	mov	r3, r8
 8001b22:	eb1a 0303 	adds.w	r3, sl, r3
 8001b26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001b40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	18db      	adds	r3, r3, r3
 8001b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b4e:	4613      	mov	r3, r2
 8001b50:	eb42 0303 	adc.w	r3, r2, r3
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001b5e:	f7fe fb39 	bl	80001d4 <__aeabi_uldivmod>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <UART_SetConfig+0x2d4>)
 8001b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2264      	movs	r2, #100	@ 0x64
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	1acb      	subs	r3, r1, r3
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001b7e:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <UART_SetConfig+0x2d4>)
 8001b80:	fba3 2302 	umull	r2, r3, r3, r2
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001b8c:	441c      	add	r4, r3
 8001b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	1891      	adds	r1, r2, r2
 8001ba6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ba8:	415b      	adcs	r3, r3
 8001baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	1851      	adds	r1, r2, r1
 8001bb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	414b      	adcs	r3, r1
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001bc8:	4659      	mov	r1, fp
 8001bca:	00cb      	lsls	r3, r1, #3
 8001bcc:	4651      	mov	r1, sl
 8001bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bd2:	4651      	mov	r1, sl
 8001bd4:	00ca      	lsls	r2, r1, #3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4642      	mov	r2, r8
 8001bde:	189b      	adds	r3, r3, r2
 8001be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001be4:	464b      	mov	r3, r9
 8001be6:	460a      	mov	r2, r1
 8001be8:	eb42 0303 	adc.w	r3, r2, r3
 8001bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001c04:	460b      	mov	r3, r1
 8001c06:	18db      	adds	r3, r3, r3
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	eb42 0303 	adc.w	r3, r2, r3
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001c1a:	f7fe fadb 	bl	80001d4 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <UART_SetConfig+0x2d4>)
 8001c24:	fba3 1302 	umull	r1, r3, r3, r2
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	2164      	movs	r1, #100	@ 0x64
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	3332      	adds	r3, #50	@ 0x32
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <UART_SetConfig+0x2d4>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	f003 0207 	and.w	r2, r3, #7
 8001c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4422      	add	r2, r4
 8001c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001c4c:	e106      	b.n	8001e5c <UART_SetConfig+0x4d8>
 8001c4e:	bf00      	nop
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40011400 	.word	0x40011400
 8001c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c60:	2200      	movs	r2, #0
 8001c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001c6e:	4642      	mov	r2, r8
 8001c70:	464b      	mov	r3, r9
 8001c72:	1891      	adds	r1, r2, r2
 8001c74:	6239      	str	r1, [r7, #32]
 8001c76:	415b      	adcs	r3, r3
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c7e:	4641      	mov	r1, r8
 8001c80:	1854      	adds	r4, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb43 0501 	adc.w	r5, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	00eb      	lsls	r3, r5, #3
 8001c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c96:	00e2      	lsls	r2, r4, #3
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	18e3      	adds	r3, r4, r3
 8001ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	eb45 0303 	adc.w	r3, r5, r3
 8001caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001cca:	4629      	mov	r1, r5
 8001ccc:	008b      	lsls	r3, r1, #2
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	008a      	lsls	r2, r1, #2
 8001cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001cdc:	f7fe fa7a 	bl	80001d4 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4b60      	ldr	r3, [pc, #384]	@ (8001e68 <UART_SetConfig+0x4e4>)
 8001ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	011c      	lsls	r4, r3, #4
 8001cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001d00:	4642      	mov	r2, r8
 8001d02:	464b      	mov	r3, r9
 8001d04:	1891      	adds	r1, r2, r2
 8001d06:	61b9      	str	r1, [r7, #24]
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d10:	4641      	mov	r1, r8
 8001d12:	1851      	adds	r1, r2, r1
 8001d14:	6139      	str	r1, [r7, #16]
 8001d16:	4649      	mov	r1, r9
 8001d18:	414b      	adcs	r3, r1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d28:	4659      	mov	r1, fp
 8001d2a:	00cb      	lsls	r3, r1, #3
 8001d2c:	4651      	mov	r1, sl
 8001d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d32:	4651      	mov	r1, sl
 8001d34:	00ca      	lsls	r2, r1, #3
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d44:	464b      	mov	r3, r9
 8001d46:	460a      	mov	r2, r1
 8001d48:	eb42 0303 	adc.w	r3, r2, r3
 8001d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001d68:	4649      	mov	r1, r9
 8001d6a:	008b      	lsls	r3, r1, #2
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d72:	4641      	mov	r1, r8
 8001d74:	008a      	lsls	r2, r1, #2
 8001d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d7a:	f7fe fa2b 	bl	80001d4 <__aeabi_uldivmod>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <UART_SetConfig+0x4e4>)
 8001d86:	fba3 2301 	umull	r2, r3, r3, r1
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2264      	movs	r2, #100	@ 0x64
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	1acb      	subs	r3, r1, r3
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	3332      	adds	r3, #50	@ 0x32
 8001d98:	4a33      	ldr	r2, [pc, #204]	@ (8001e68 <UART_SetConfig+0x4e4>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da4:	441c      	add	r4, r3
 8001da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001daa:	2200      	movs	r2, #0
 8001dac:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dae:	677a      	str	r2, [r7, #116]	@ 0x74
 8001db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001db4:	4642      	mov	r2, r8
 8001db6:	464b      	mov	r3, r9
 8001db8:	1891      	adds	r1, r2, r2
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	415b      	adcs	r3, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	1851      	adds	r1, r2, r1
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	4649      	mov	r1, r9
 8001dcc:	414b      	adcs	r3, r1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ddc:	4659      	mov	r1, fp
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4651      	mov	r1, sl
 8001de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001de6:	4651      	mov	r1, sl
 8001de8:	00ca      	lsls	r2, r1, #3
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	4642      	mov	r2, r8
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001df6:	464b      	mov	r3, r9
 8001df8:	460a      	mov	r2, r1
 8001dfa:	eb42 0303 	adc.w	r3, r2, r3
 8001dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001e18:	4649      	mov	r1, r9
 8001e1a:	008b      	lsls	r3, r1, #2
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e22:	4641      	mov	r1, r8
 8001e24:	008a      	lsls	r2, r1, #2
 8001e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e2a:	f7fe f9d3 	bl	80001d4 <__aeabi_uldivmod>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <UART_SetConfig+0x4e4>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	2164      	movs	r1, #100	@ 0x64
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	3332      	adds	r3, #50	@ 0x32
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <UART_SetConfig+0x4e4>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4422      	add	r2, r4
 8001e5a:	609a      	str	r2, [r3, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e68:	51eb851f 	.word	0x51eb851f

08001e6c <main>:
uint8_t tx_buffer[10] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
uint8_t rx_buffer[10];


int main()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8001e70:	f7fe fb28 	bl	80004c4 <HAL_Init>
	uart_init();
 8001e74:	f000 f818 	bl	8001ea8 <uart_init>



	HAL_UART_Transmit_DMA(&huart1, tx_buffer, 10);
 8001e78:	220a      	movs	r2, #10
 8001e7a:	4905      	ldr	r1, [pc, #20]	@ (8001e90 <main+0x24>)
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <main+0x28>)
 8001e7e:	f7ff fa2f 	bl	80012e0 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 10);
 8001e82:	220a      	movs	r2, #10
 8001e84:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <main+0x2c>)
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <main+0x28>)
 8001e88:	f7ff fa9a 	bl	80013c0 <HAL_UART_Receive_DMA>

	while(1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <main+0x20>
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000038 	.word	0x20000038
 8001e98:	20000140 	.word	0x20000140

08001e9c <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 8001ea0:	f7fe fb6a 	bl	8000578 <HAL_IncTick>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <uart_init>:


void uart_init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800202c <uart_init+0x184>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a59      	ldr	r2, [pc, #356]	@ (800202c <uart_init+0x184>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b57      	ldr	r3, [pc, #348]	@ (800202c <uart_init+0x184>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE() ;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b53      	ldr	r3, [pc, #332]	@ (800202c <uart_init+0x184>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a52      	ldr	r2, [pc, #328]	@ (800202c <uart_init+0x184>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b50      	ldr	r3, [pc, #320]	@ (800202c <uart_init+0x184>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_9 | GPIO_PIN_10 ;
 8001ef6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001efa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8001efc:	2302      	movs	r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART1 ;
 8001f00:	2307      	movs	r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	4847      	ldr	r0, [pc, #284]	@ (8002030 <uart_init+0x188>)
 8001f14:	f7fe ffd2 	bl	8000ebc <HAL_GPIO_Init>

	__HAL_RCC_DMA2_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4b43      	ldr	r3, [pc, #268]	@ (800202c <uart_init+0x184>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	4a42      	ldr	r2, [pc, #264]	@ (800202c <uart_init+0x184>)
 8001f22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f28:	4b40      	ldr	r3, [pc, #256]	@ (800202c <uart_init+0x184>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]

	//Configure UART module
	huart1.Instance 		 = USART1 ;
 8001f34:	4b3f      	ldr	r3, [pc, #252]	@ (8002034 <uart_init+0x18c>)
 8001f36:	4a40      	ldr	r2, [pc, #256]	@ (8002038 <uart_init+0x190>)
 8001f38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate	 = 115200 ;
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <uart_init+0x18c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength	 = UART_WORDLENGTH_8B ;
 8001f42:	4b3c      	ldr	r3, [pc, #240]	@ (8002034 <uart_init+0x18c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits	 = UART_STOPBITS_1 ;
 8001f48:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <uart_init+0x18c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity		 = UART_PARITY_NONE ;
 8001f4e:	4b39      	ldr	r3, [pc, #228]	@ (8002034 <uart_init+0x18c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode		 = UART_MODE_TX_RX ;
 8001f54:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <uart_init+0x18c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <uart_init+0x18c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16 ;
 8001f60:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <uart_init+0x18c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart1) ;
 8001f66:	4833      	ldr	r0, [pc, #204]	@ (8002034 <uart_init+0x18c>)
 8001f68:	f7ff f960 	bl	800122c <HAL_UART_Init>

	//Configure USART1 RX DMA

	hdma_usart1_rx.Instance 				= DMA2_Stream2;
 8001f6c:	4b33      	ldr	r3, [pc, #204]	@ (800203c <uart_init+0x194>)
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <uart_init+0x198>)
 8001f70:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Channel 			= DMA_CHANNEL_4;
 8001f72:	4b32      	ldr	r3, [pc, #200]	@ (800203c <uart_init+0x194>)
 8001f74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f78:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8001f7a:	4b30      	ldr	r3, [pc, #192]	@ (800203c <uart_init+0x194>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001f80:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <uart_init+0x194>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <uart_init+0x194>)
 8001f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f8c:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <uart_init+0x194>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <uart_init+0x194>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Mode 				= DMA_NORMAL;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <uart_init+0x194>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
	hdma_usart1_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <uart_init+0x194>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
	hdma_usart1_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8001fa6:	4b25      	ldr	r3, [pc, #148]	@ (800203c <uart_init+0x194>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_DMA_Init(&hdma_usart1_rx);
 8001fac:	4823      	ldr	r0, [pc, #140]	@ (800203c <uart_init+0x194>)
 8001fae:	f7fe fc15 	bl	80007dc <HAL_DMA_Init>

	//Link usart1 rx to dma
	huart1.hdmarx = &hdma_usart1_rx;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <uart_init+0x18c>)
 8001fb4:	4a21      	ldr	r2, [pc, #132]	@ (800203c <uart_init+0x194>)
 8001fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Configure USART1 TX DMA
	hdma_usart1_tx.Instance 				= DMA2_Stream7;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <uart_init+0x19c>)
 8001fba:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <uart_init+0x1a0>)
 8001fbc:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Channel 			= DMA_CHANNEL_4;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <uart_init+0x19c>)
 8001fc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fc4:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <uart_init+0x19c>)
 8001fc8:	2240      	movs	r2, #64	@ 0x40
 8001fca:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <uart_init+0x19c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <uart_init+0x19c>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <uart_init+0x19c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <uart_init+0x19c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Mode 				= DMA_NORMAL;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <uart_init+0x19c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
	hdma_usart1_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <uart_init+0x19c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
	hdma_usart1_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <uart_init+0x19c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_DMA_Init(&hdma_usart1_tx);
 8001ff8:	4812      	ldr	r0, [pc, #72]	@ (8002044 <uart_init+0x19c>)
 8001ffa:	f7fe fbef 	bl	80007dc <HAL_DMA_Init>

	//Link usart1 tx to dma
	huart1.hdmatx = &hdma_usart1_tx;
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <uart_init+0x18c>)
 8002000:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <uart_init+0x19c>)
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38

	//DMA2_Stream2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	203a      	movs	r0, #58	@ 0x3a
 800200a:	f7fe fbb0 	bl	800076e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800200e:	203a      	movs	r0, #58	@ 0x3a
 8002010:	f7fe fbc9 	bl	80007a6 <HAL_NVIC_EnableIRQ>

	//DMA2_Stream7_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2046      	movs	r0, #70	@ 0x46
 800201a:	f7fe fba8 	bl	800076e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800201e:	2046      	movs	r0, #70	@ 0x46
 8002020:	f7fe fbc1 	bl	80007a6 <HAL_NVIC_EnableIRQ>



}
 8002024:	bf00      	nop
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	20000038 	.word	0x20000038
 8002038:	40011000 	.word	0x40011000
 800203c:	20000080 	.word	0x20000080
 8002040:	40026440 	.word	0x40026440
 8002044:	200000e0 	.word	0x200000e0
 8002048:	400264b8 	.word	0x400264b8

0800204c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <DMA2_Stream2_IRQHandler+0x10>)
 8002052:	f7fe fcc9 	bl	80009e8 <HAL_DMA_IRQHandler>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000080 	.word	0x20000080

08002060 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <DMA2_Stream7_IRQHandler+0x10>)
 8002066:	f7fe fcbf 	bl	80009e8 <HAL_DMA_IRQHandler>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200000e0 	.word	0x200000e0

08002074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002074:	480d      	ldr	r0, [pc, #52]	@ (80020ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002076:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002078:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800207c:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800207e:	490d      	ldr	r1, [pc, #52]	@ (80020b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <LoopForever+0xe>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002094:	4c0a      	ldr	r4, [pc, #40]	@ (80020c0 <LoopForever+0x16>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020a2:	f000 f811 	bl	80020c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a6:	f7ff fee1 	bl	8001e6c <main>

080020aa <LoopForever>:

LoopForever:
  b LoopForever
 80020aa:	e7fe      	b.n	80020aa <LoopForever>
  ldr   r0, =_estack
 80020ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80020b8:	08002148 	.word	0x08002148
  ldr r2, =_sbss
 80020bc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80020c0:	2000014c 	.word	0x2000014c

080020c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <__libc_init_array>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	4d0d      	ldr	r5, [pc, #52]	@ (8002100 <__libc_init_array+0x38>)
 80020cc:	4c0d      	ldr	r4, [pc, #52]	@ (8002104 <__libc_init_array+0x3c>)
 80020ce:	1b64      	subs	r4, r4, r5
 80020d0:	10a4      	asrs	r4, r4, #2
 80020d2:	2600      	movs	r6, #0
 80020d4:	42a6      	cmp	r6, r4
 80020d6:	d109      	bne.n	80020ec <__libc_init_array+0x24>
 80020d8:	4d0b      	ldr	r5, [pc, #44]	@ (8002108 <__libc_init_array+0x40>)
 80020da:	4c0c      	ldr	r4, [pc, #48]	@ (800210c <__libc_init_array+0x44>)
 80020dc:	f000 f818 	bl	8002110 <_init>
 80020e0:	1b64      	subs	r4, r4, r5
 80020e2:	10a4      	asrs	r4, r4, #2
 80020e4:	2600      	movs	r6, #0
 80020e6:	42a6      	cmp	r6, r4
 80020e8:	d105      	bne.n	80020f6 <__libc_init_array+0x2e>
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f0:	4798      	blx	r3
 80020f2:	3601      	adds	r6, #1
 80020f4:	e7ee      	b.n	80020d4 <__libc_init_array+0xc>
 80020f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fa:	4798      	blx	r3
 80020fc:	3601      	adds	r6, #1
 80020fe:	e7f2      	b.n	80020e6 <__libc_init_array+0x1e>
 8002100:	08002140 	.word	0x08002140
 8002104:	08002140 	.word	0x08002140
 8002108:	08002140 	.word	0x08002140
 800210c:	08002144 	.word	0x08002144

08002110 <_init>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	bf00      	nop
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr

0800211c <_fini>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr
