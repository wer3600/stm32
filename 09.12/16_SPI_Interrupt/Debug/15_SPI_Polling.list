
15_SPI_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001230  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013c4  080013c4  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013c4  080013c4  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  080013c4  080013c4  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c4  080013c4  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c4  080013c4  000023c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013c8  080013c8  000023c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080013cc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000018  080013e4  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080013e4  000030e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000666c  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001310  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0000a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e7  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d5b  00000000  00000000  0000b53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008364  00000000  00000000  0002129a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b71f  00000000  00000000  000295fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a24  00000000  00000000  000b4d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b6784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013ac 	.word	0x080013ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080013ac 	.word	0x080013ac

080001d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <HAL_Init+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <HAL_Init+0x40>)
 80001de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <HAL_Init+0x40>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000214 <HAL_Init+0x40>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <HAL_Init+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <HAL_Init+0x40>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 fa7f 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	200f      	movs	r0, #15
 8000204:	f000 f810 	bl	8000228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000208:	f000 f806 	bl	8000218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40023c00 	.word	0x40023c00

08000218 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <HAL_InitTick+0x54>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <HAL_InitTick+0x58>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4619      	mov	r1, r3
 800023a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800023e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000242:	fbb2 f3f3 	udiv	r3, r2, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa81 	bl	800074e <HAL_SYSTICK_Config>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	e00e      	b.n	8000274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d80a      	bhi.n	8000272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800025c:	2200      	movs	r2, #0
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f000 fa57 	bl	8000716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000268:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <HAL_InitTick+0x5c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
 8000270:	e000      	b.n	8000274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000014 	.word	0x20000014
 8000280:	20000004 	.word	0x20000004
 8000284:	20000000 	.word	0x20000000

08000288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <HAL_IncTick+0x24>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4413      	add	r3, r2
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <HAL_IncTick+0x24>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000034 	.word	0x20000034

080002b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return uwTick;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <HAL_GetTick+0x14>)
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000034 	.word	0x20000034

080002c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	bf0c      	ite	eq
 80002fc:	2301      	moveq	r3, #1
 80002fe:	2300      	movne	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d049      	beq.n	800039e <HAL_ADC_IRQHandler+0xd6>
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d046      	beq.n	800039e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000314:	f003 0310 	and.w	r3, r3, #16
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d12b      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800033a:	2b00      	cmp	r3, #0
 800033c:	d127      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000344:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000348:	2b00      	cmp	r3, #0
 800034a:	d006      	beq.n	800035a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000356:	2b00      	cmp	r3, #0
 8000358:	d119      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f022 0220 	bic.w	r2, r2, #32
 8000368:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800036e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800037a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d105      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000386:	f043 0201 	orr.w	r2, r3, #1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 f8db 	bl	800054a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f06f 0212 	mvn.w	r2, #18
 800039c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	bf0c      	ite	eq
 80003ac:	2301      	moveq	r3, #1
 80003ae:	2300      	movne	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003be:	2b80      	cmp	r3, #128	@ 0x80
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d057      	beq.n	8000480 <HAL_ADC_IRQHandler+0x1b8>
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d054      	beq.n	8000480 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003da:	f003 0310 	and.w	r3, r3, #16
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d105      	bne.n	80003ee <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d139      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000402:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000406:	2b00      	cmp	r3, #0
 8000408:	d006      	beq.n	8000418 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000414:	2b00      	cmp	r3, #0
 8000416:	d12b      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000422:	2b00      	cmp	r3, #0
 8000424:	d124      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000430:	2b00      	cmp	r3, #0
 8000432:	d11d      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000438:	2b00      	cmp	r3, #0
 800043a:	d119      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800044a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000460:	2b00      	cmp	r3, #0
 8000462:	d105      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000468:	f043 0201 	orr.w	r2, r3, #1
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f888 	bl	8000586 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f06f 020c 	mvn.w	r2, #12
 800047e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004a0:	2b40      	cmp	r3, #64	@ 0x40
 80004a2:	bf0c      	ite	eq
 80004a4:	2301      	moveq	r3, #1
 80004a6:	2300      	movne	r3, #0
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d017      	beq.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d014      	beq.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10d      	bne.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f843 	bl	800055e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f06f 0201 	mvn.w	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	2b20      	cmp	r3, #32
 80004ee:	bf0c      	ite	eq
 80004f0:	2301      	moveq	r3, #1
 80004f2:	2300      	movne	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000506:	bf0c      	ite	eq
 8000508:	2301      	moveq	r3, #1
 800050a:	2300      	movne	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d015      	beq.n	8000542 <HAL_ADC_IRQHandler+0x27a>
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d012      	beq.n	8000542 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000520:	f043 0202 	orr.w	r2, r3, #2
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f06f 0220 	mvn.w	r2, #32
 8000530:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f81d 	bl	8000572 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f06f 0220 	mvn.w	r2, #32
 8000540:	601a      	str	r2, [r3, #0]
  }
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ce:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <__NVIC_GetPriorityGrouping+0x18>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 0307 	and.w	r3, r3, #7
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	@ (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	@ (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	@ 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff ff8e 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff47 	bl	800059c <__NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff5c 	bl	80005e4 <__NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff8e 	bl	8000654 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <__NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ffb0 	bl	80006bc <SysTick_Config>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	e159      	b.n	8000a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000784:	2201      	movs	r2, #1
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	429a      	cmp	r2, r3
 800079e:	f040 8148 	bne.w	8000a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d00b      	beq.n	80007c2 <HAL_GPIO_Init+0x5a>
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d007      	beq.n	80007c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b6:	2b11      	cmp	r3, #17
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d130      	bne.n	8000824 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	2203      	movs	r2, #3
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4013      	ands	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	4013      	ands	r3, r2
 8000806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	091b      	lsrs	r3, r3, #4
 800080e:	f003 0201 	and.w	r2, r3, #1
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	4313      	orrs	r3, r2
 800081c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2203      	movs	r2, #3
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4013      	ands	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	4313      	orrs	r3, r2
 800084c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d003      	beq.n	8000864 <HAL_GPIO_Init+0xfc>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b12      	cmp	r3, #18
 8000862:	d123      	bne.n	80008ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3208      	adds	r2, #8
 800086c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	220f      	movs	r2, #15
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4313      	orrs	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	08da      	lsrs	r2, r3, #3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3208      	adds	r2, #8
 80008a6:	69b9      	ldr	r1, [r7, #24]
 80008a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0203 	and.w	r2, r3, #3
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 80a2 	beq.w	8000a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b57      	ldr	r3, [pc, #348]	@ (8000a50 <HAL_GPIO_Init+0x2e8>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a56      	ldr	r2, [pc, #344]	@ (8000a50 <HAL_GPIO_Init+0x2e8>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b54      	ldr	r3, [pc, #336]	@ (8000a50 <HAL_GPIO_Init+0x2e8>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800090a:	4a52      	ldr	r2, [pc, #328]	@ (8000a54 <HAL_GPIO_Init+0x2ec>)
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	3302      	adds	r3, #2
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	220f      	movs	r2, #15
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a49      	ldr	r2, [pc, #292]	@ (8000a58 <HAL_GPIO_Init+0x2f0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d019      	beq.n	800096a <HAL_GPIO_Init+0x202>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a48      	ldr	r2, [pc, #288]	@ (8000a5c <HAL_GPIO_Init+0x2f4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d013      	beq.n	8000966 <HAL_GPIO_Init+0x1fe>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a47      	ldr	r2, [pc, #284]	@ (8000a60 <HAL_GPIO_Init+0x2f8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d00d      	beq.n	8000962 <HAL_GPIO_Init+0x1fa>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a46      	ldr	r2, [pc, #280]	@ (8000a64 <HAL_GPIO_Init+0x2fc>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d007      	beq.n	800095e <HAL_GPIO_Init+0x1f6>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a45      	ldr	r2, [pc, #276]	@ (8000a68 <HAL_GPIO_Init+0x300>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_GPIO_Init+0x1f2>
 8000956:	2304      	movs	r3, #4
 8000958:	e008      	b.n	800096c <HAL_GPIO_Init+0x204>
 800095a:	2307      	movs	r3, #7
 800095c:	e006      	b.n	800096c <HAL_GPIO_Init+0x204>
 800095e:	2303      	movs	r3, #3
 8000960:	e004      	b.n	800096c <HAL_GPIO_Init+0x204>
 8000962:	2302      	movs	r3, #2
 8000964:	e002      	b.n	800096c <HAL_GPIO_Init+0x204>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <HAL_GPIO_Init+0x204>
 800096a:	2300      	movs	r3, #0
 800096c:	69fa      	ldr	r2, [r7, #28]
 800096e:	f002 0203 	and.w	r2, r2, #3
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	4093      	lsls	r3, r2
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4313      	orrs	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800097c:	4935      	ldr	r1, [pc, #212]	@ (8000a54 <HAL_GPIO_Init+0x2ec>)
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	3302      	adds	r3, #2
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	43db      	mvns	r3, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4013      	ands	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ae:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009d8:	4a24      	ldr	r2, [pc, #144]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4013      	ands	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a02:	4a1a      	ldr	r2, [pc, #104]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <HAL_GPIO_Init+0x304>)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	f67f aea2 	bls.w	8000784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3724      	adds	r7, #36	@ 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40013c00 	.word	0x40013c00

08000a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e083      	b.n	8000b8a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d108      	bne.n	8000a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000a92:	d009      	beq.n	8000aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
 8000a9a:	e005      	b.n	8000aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f868 	bl	8000b92 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ad8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b26:	ea42 0103 	orr.w	r1, r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	0c1b      	lsrs	r3, r3, #16
 8000b40:	f003 0104 	and.w	r1, r3, #4
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b48:	f003 0210 	and.w	r2, r3, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b5c:	d105      	bne.n	8000b6a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b292      	uxth	r2, r2
 8000b68:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69da      	ldr	r2, [r3, #28]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b08e      	sub	sp, #56	@ 0x38
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <HAL_SPI_TransmitReceive+0x2a>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e22c      	b.n	800102a <HAL_SPI_TransmitReceive+0x484>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000bd8:	f7ff fb6a 	bl	80002b0 <HAL_GetTick>
 8000bdc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000be4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d00f      	beq.n	8000c1a <HAL_SPI_TransmitReceive+0x74>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000c00:	d107      	bne.n	8000c12 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <HAL_SPI_TransmitReceive+0x6c>
 8000c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d003      	beq.n	8000c1a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8000c18:	e201      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <HAL_SPI_TransmitReceive+0x86>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <HAL_SPI_TransmitReceive+0x86>
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8000c32:	e1f4      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d003      	beq.n	8000c48 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2205      	movs	r2, #5
 8000c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	887a      	ldrh	r2, [r7, #2]
 8000c5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	887a      	ldrh	r2, [r7, #2]
 8000c6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c86:	d10f      	bne.n	8000ca8 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ca6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb2:	2b40      	cmp	r3, #64	@ 0x40
 8000cb4:	d007      	beq.n	8000cc6 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cce:	f040 80a2 	bne.w	8000e16 <HAL_SPI_TransmitReceive+0x270>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_SPI_TransmitReceive+0x13c>
 8000cda:	8b7b      	ldrh	r3, [r7, #26]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f040 808f 	bne.w	8000e00 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	1c9a      	adds	r2, r3, #2
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d177      	bne.n	8000e00 <HAL_SPI_TransmitReceive+0x25a>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d18:	d172      	bne.n	8000e00 <HAL_SPI_TransmitReceive+0x25a>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d28:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d2a:	e069      	b.n	8000e00 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d12d      	bne.n	8000d96 <HAL_SPI_TransmitReceive+0x1f0>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d028      	beq.n	8000d96 <HAL_SPI_TransmitReceive+0x1f0>
 8000d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d125      	bne.n	8000d96 <HAL_SPI_TransmitReceive+0x1f0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	881a      	ldrh	r2, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	1c9a      	adds	r2, r3, #2
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3b01      	subs	r3, #1
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10c      	bne.n	8000d96 <HAL_SPI_TransmitReceive+0x1f0>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d84:	d107      	bne.n	8000d96 <HAL_SPI_TransmitReceive+0x1f0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d94:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d119      	bne.n	8000dd8 <HAL_SPI_TransmitReceive+0x232>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db8:	b292      	uxth	r2, r2
 8000dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc0:	1c9a      	adds	r2, r3, #2
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000dd8:	f7ff fa6a 	bl	80002b0 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d80b      	bhi.n	8000e00 <HAL_SPI_TransmitReceive+0x25a>
 8000de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dee:	d007      	beq.n	8000e00 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8000dfe:	e10e      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d190      	bne.n	8000d2c <HAL_SPI_TransmitReceive+0x186>
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d18b      	bne.n	8000d2c <HAL_SPI_TransmitReceive+0x186>
 8000e14:	e0a5      	b.n	8000f62 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_SPI_TransmitReceive+0x280>
 8000e1e:	8b7b      	ldrh	r3, [r7, #26]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 8094 	bne.w	8000f4e <HAL_SPI_TransmitReceive+0x3a8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	330c      	adds	r3, #12
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d17b      	bne.n	8000f4e <HAL_SPI_TransmitReceive+0x3a8>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e5e:	d176      	bne.n	8000f4e <HAL_SPI_TransmitReceive+0x3a8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e6e:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e70:	e06d      	b.n	8000f4e <HAL_SPI_TransmitReceive+0x3a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d12e      	bne.n	8000ede <HAL_SPI_TransmitReceive+0x338>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d029      	beq.n	8000ede <HAL_SPI_TransmitReceive+0x338>
 8000e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d126      	bne.n	8000ede <HAL_SPI_TransmitReceive+0x338>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	330c      	adds	r3, #12
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <HAL_SPI_TransmitReceive+0x338>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ecc:	d107      	bne.n	8000ede <HAL_SPI_TransmitReceive+0x338>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000edc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d119      	bne.n	8000f20 <HAL_SPI_TransmitReceive+0x37a>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d014      	beq.n	8000f20 <HAL_SPI_TransmitReceive+0x37a>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000f20:	f7ff f9c6 	bl	80002b0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d803      	bhi.n	8000f38 <HAL_SPI_TransmitReceive+0x392>
 8000f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f36:	d102      	bne.n	8000f3e <HAL_SPI_TransmitReceive+0x398>
 8000f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d107      	bne.n	8000f4e <HAL_SPI_TransmitReceive+0x3a8>
      {
        errorcode = HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8000f4c:	e067      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d18c      	bne.n	8000e72 <HAL_SPI_TransmitReceive+0x2cc>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d187      	bne.n	8000e72 <HAL_SPI_TransmitReceive+0x2cc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f6a:	d119      	bne.n	8000fa0 <HAL_SPI_TransmitReceive+0x3fa>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f72:	2201      	movs	r2, #1
 8000f74:	2101      	movs	r1, #1
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f85c 	bl	8001034 <SPI_WaitFlagStateUntilTimeout>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d009      	beq.n	8000f96 <HAL_SPI_TransmitReceive+0x3f0>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8000f94:	e043      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8000f9e:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b10      	cmp	r3, #16
 8000fac:	d10d      	bne.n	8000fca <HAL_SPI_TransmitReceive+0x424>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8000fc2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8b8 	bl	8001144 <SPI_EndRxTxTransaction>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_SPI_TransmitReceive+0x442>
  {
    errorcode = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8000fe6:	e01a      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10a      	bne.n	8001006 <HAL_SPI_TransmitReceive+0x460>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_SPI_TransmitReceive+0x470>
  {
    errorcode = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001014:	e003      	b.n	800101e <HAL_SPI_TransmitReceive+0x478>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800102a:	4618      	mov	r0, r3
 800102c:	3730      	adds	r7, #48	@ 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001044:	f7ff f934 	bl	80002b0 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001054:	f7ff f92c 	bl	80002b0 <HAL_GetTick>
 8001058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800105a:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	0d1b      	lsrs	r3, r3, #20
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	fb02 f303 	mul.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800106a:	e054      	b.n	8001116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001072:	d050      	beq.n	8001116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001074:	f7ff f91c 	bl	80002b0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	d902      	bls.n	800108a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13d      	bne.n	8001106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80010a2:	d111      	bne.n	80010c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010ac:	d004      	beq.n	80010b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b6:	d107      	bne.n	80010c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010d0:	d10f      	bne.n	80010f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80010f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e017      	b.n	8001136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3b01      	subs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4013      	ands	r3, r2
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	429a      	cmp	r2, r3
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	429a      	cmp	r2, r3
 8001132:	d19b      	bne.n	800106c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000014 	.word	0x20000014

08001144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2201      	movs	r2, #1
 8001158:	2102      	movs	r1, #2
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff ff6a 	bl	8001034 <SPI_WaitFlagStateUntilTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116a:	f043 0220 	orr.w	r2, r3, #32
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e032      	b.n	80011dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <SPI_EndRxTxTransaction+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <SPI_EndRxTxTransaction+0xa4>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0d5b      	lsrs	r3, r3, #21
 8001182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001194:	d112      	bne.n	80011bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7ff ff47 	bl	8001034 <SPI_WaitFlagStateUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d016      	beq.n	80011da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b0:	f043 0220 	orr.w	r2, r3, #32
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e00f      	b.n	80011dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	2b80      	cmp	r3, #128	@ 0x80
 80011d4:	d0f2      	beq.n	80011bc <SPI_EndRxTxTransaction+0x78>
 80011d6:	e000      	b.n	80011da <SPI_EndRxTxTransaction+0x96>
        break;
 80011d8:	bf00      	nop
  }

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000014 	.word	0x20000014
 80011e8:	165e9f81 	.word	0x165e9f81

080011ec <ADC_IRQHandler>:

}


void ADC_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <ADC_IRQHandler+0x10>)
 80011f2:	f7ff f869 	bl	80002c8 <HAL_ADC_IRQHandler>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000038 	.word	0x20000038

08001200 <main>:

uint8_t tx_buffer[10] = {10, 20, 20, 40, 50, 60, 70, 90, 90 ,100};
uint8_t rx_buffer[10];

int main()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af02      	add	r7, sp, #8

	HAL_Init() ;
 8001206:	f7fe ffe5 	bl	80001d4 <HAL_Init>
	spi1_init();
 800120a:	f000 f811 	bl	8001230 <spi1_init>


	HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, 10, 100);
 800120e:	2364      	movs	r3, #100	@ 0x64
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	230a      	movs	r3, #10
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <main+0x24>)
 8001216:	4904      	ldr	r1, [pc, #16]	@ (8001228 <main+0x28>)
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <main+0x2c>)
 800121a:	f7ff fcc4 	bl	8000ba6 <HAL_SPI_TransmitReceive>



	while(1)
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <main+0x1e>
 8001222:	bf00      	nop
 8001224:	200000d8 	.word	0x200000d8
 8001228:	20000008 	.word	0x20000008
 800122c:	20000080 	.word	0x20000080

08001230 <spi1_init>:

	}
}

void spi1_init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <spi1_init+0xc4>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a29      	ldr	r2, [pc, #164]	@ (80012f4 <spi1_init+0xc4>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <spi1_init+0xc4>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <spi1_init+0xc4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <spi1_init+0xc4>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <spi1_init+0xc4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

//	PA5 -->SPI1_SCK
//	PA6 -->SPI1_MISO
//	PA7 -->SPI1_MOSI

	GPIO_InitStruct.Pin 		= GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800127e:	23e0      	movs	r3, #224	@ 0xe0
 8001280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8001286:	2305      	movs	r3, #5
 8001288:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <spi1_init+0xc8>)
 800129a:	f7ff fa65 	bl	8000768 <HAL_GPIO_Init>

	//Configure SPI module

	hspi1.Instance 					= SPI1;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <spi1_init+0xcc>)
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <spi1_init+0xd0>)
 80012a2:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode 				= SPI_MODE_MASTER;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <spi1_init+0xcc>)
 80012a6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012aa:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction 			= SPI_DIRECTION_2LINES;
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <spi1_init+0xcc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <spi1_init+0xcc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <spi1_init+0xcc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <spi1_init+0xcc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS 					= SPI_NSS_SOFT;
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <spi1_init+0xcc>)
 80012c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ca:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_8;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <spi1_init+0xcc>)
 80012ce:	2210      	movs	r2, #16
 80012d0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <spi1_init+0xcc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <spi1_init+0xcc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <spi1_init+0xcc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_SPI_Init(&hspi1);
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <spi1_init+0xcc>)
 80012e6:	f7ff fbc3 	bl	8000a70 <HAL_SPI_Init>


}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	20000080 	.word	0x20000080
 8001300:	40013000 	.word	0x40013000

08001304 <SysTick_Handler>:




void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 8001308:	f7fe ffbe 	bl	8000288 <HAL_IncTick>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	@ (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	@ (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133e:	f000 f811 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff ff5d 	bl	8001200 <main>

08001346 <LoopForever>:

LoopForever:
  b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
  ldr   r0, =_estack
 8001348:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001354:	080013cc 	.word	0x080013cc
  ldr r2, =_sbss
 8001358:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800135c:	200000e4 	.word	0x200000e4

08001360 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <BusFault_Handler>
	...

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d0d      	ldr	r5, [pc, #52]	@ (800139c <__libc_init_array+0x38>)
 8001368:	4c0d      	ldr	r4, [pc, #52]	@ (80013a0 <__libc_init_array+0x3c>)
 800136a:	1b64      	subs	r4, r4, r5
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2600      	movs	r6, #0
 8001370:	42a6      	cmp	r6, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	4d0b      	ldr	r5, [pc, #44]	@ (80013a4 <__libc_init_array+0x40>)
 8001376:	4c0c      	ldr	r4, [pc, #48]	@ (80013a8 <__libc_init_array+0x44>)
 8001378:	f000 f818 	bl	80013ac <_init>
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	2600      	movs	r6, #0
 8001382:	42a6      	cmp	r6, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	f855 3b04 	ldr.w	r3, [r5], #4
 800138c:	4798      	blx	r3
 800138e:	3601      	adds	r6, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	f855 3b04 	ldr.w	r3, [r5], #4
 8001396:	4798      	blx	r3
 8001398:	3601      	adds	r6, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	080013c4 	.word	0x080013c4
 80013a0:	080013c4 	.word	0x080013c4
 80013a4:	080013c4 	.word	0x080013c4
 80013a8:	080013c8 	.word	0x080013c8

080013ac <_init>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr

080013b8 <_fini>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	bf00      	nop
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr
