
16_SPI_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000159c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001730  08001730  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001730  08001730  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001730  08001730  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001730  08001730  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001730  08001730  00002730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001734  08001734  00002734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001738  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000018  08001750  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001750  000030e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000716b  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000157b  00000000  00000000  0000a1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000563  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f48  00000000  00000000  0000c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000947b  00000000  00000000  0002230b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba5a  00000000  00000000  0002b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b71e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  000b7224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b8ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001718 	.word	0x08001718

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08001718 	.word	0x08001718

080001d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <HAL_Init+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <HAL_Init+0x40>)
 80001de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <HAL_Init+0x40>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000214 <HAL_Init+0x40>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <HAL_Init+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <HAL_Init+0x40>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 fa9d 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	200f      	movs	r0, #15
 8000204:	f000 f810 	bl	8000228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000208:	f000 f806 	bl	8000218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40023c00 	.word	0x40023c00

08000218 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000230:	4b12      	ldr	r3, [pc, #72]	@ (800027c <HAL_InitTick+0x54>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <HAL_InitTick+0x58>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4619      	mov	r1, r3
 800023a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800023e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000242:	fbb2 f3f3 	udiv	r3, r2, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f000 faad 	bl	80007a6 <HAL_SYSTICK_Config>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	e00e      	b.n	8000274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d80a      	bhi.n	8000272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800025c:	2200      	movs	r2, #0
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f000 fa75 	bl	8000752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000268:	4a06      	ldr	r2, [pc, #24]	@ (8000284 <HAL_InitTick+0x5c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
 8000270:	e000      	b.n	8000274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000014 	.word	0x20000014
 8000280:	20000004 	.word	0x20000004
 8000284:	20000000 	.word	0x20000000

08000288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <HAL_IncTick+0x24>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4413      	add	r3, r2
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <HAL_IncTick+0x24>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000034 	.word	0x20000034

080002b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return uwTick;
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <HAL_GetTick+0x14>)
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000034 	.word	0x20000034

080002c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	2b20      	cmp	r3, #32
 80002fa:	bf0c      	ite	eq
 80002fc:	2301      	moveq	r3, #1
 80002fe:	2300      	movne	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d049      	beq.n	800039e <HAL_ADC_IRQHandler+0xd6>
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d046      	beq.n	800039e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000314:	f003 0310 	and.w	r3, r3, #16
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d12b      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800033a:	2b00      	cmp	r3, #0
 800033c:	d127      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000344:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000348:	2b00      	cmp	r3, #0
 800034a:	d006      	beq.n	800035a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000356:	2b00      	cmp	r3, #0
 8000358:	d119      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f022 0220 	bic.w	r2, r2, #32
 8000368:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800036e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800037a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d105      	bne.n	800038e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000386:	f043 0201 	orr.w	r2, r3, #1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 f8db 	bl	800054a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f06f 0212 	mvn.w	r2, #18
 800039c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	bf0c      	ite	eq
 80003ac:	2301      	moveq	r3, #1
 80003ae:	2300      	movne	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003be:	2b80      	cmp	r3, #128	@ 0x80
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d057      	beq.n	8000480 <HAL_ADC_IRQHandler+0x1b8>
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d054      	beq.n	8000480 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003da:	f003 0310 	and.w	r3, r3, #16
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d105      	bne.n	80003ee <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d139      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000402:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000406:	2b00      	cmp	r3, #0
 8000408:	d006      	beq.n	8000418 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000414:	2b00      	cmp	r3, #0
 8000416:	d12b      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000422:	2b00      	cmp	r3, #0
 8000424:	d124      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000430:	2b00      	cmp	r3, #0
 8000432:	d11d      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000438:	2b00      	cmp	r3, #0
 800043a:	d119      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800044a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000460:	2b00      	cmp	r3, #0
 8000462:	d105      	bne.n	8000470 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000468:	f043 0201 	orr.w	r2, r3, #1
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 f888 	bl	8000586 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f06f 020c 	mvn.w	r2, #12
 800047e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004a0:	2b40      	cmp	r3, #64	@ 0x40
 80004a2:	bf0c      	ite	eq
 80004a4:	2301      	moveq	r3, #1
 80004a6:	2300      	movne	r3, #0
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d017      	beq.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d014      	beq.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d10d      	bne.n	80004e2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f843 	bl	800055e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f06f 0201 	mvn.w	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	2b20      	cmp	r3, #32
 80004ee:	bf0c      	ite	eq
 80004f0:	2301      	moveq	r3, #1
 80004f2:	2300      	movne	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000506:	bf0c      	ite	eq
 8000508:	2301      	moveq	r3, #1
 800050a:	2300      	movne	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d015      	beq.n	8000542 <HAL_ADC_IRQHandler+0x27a>
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d012      	beq.n	8000542 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000520:	f043 0202 	orr.w	r2, r3, #2
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f06f 0220 	mvn.w	r2, #32
 8000530:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f81d 	bl	8000572 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f06f 0220 	mvn.w	r2, #32
 8000540:	601a      	str	r2, [r3, #0]
  }
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ce:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <__NVIC_SetPriorityGrouping+0x44>)
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <__NVIC_GetPriorityGrouping+0x18>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 0307 	and.w	r3, r3, #7
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	db0b      	blt.n	800062a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 021f 	and.w	r2, r3, #31
 8000618:	4907      	ldr	r1, [pc, #28]	@ (8000638 <__NVIC_EnableIRQ+0x38>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	2001      	movs	r0, #1
 8000622:	fa00 f202 	lsl.w	r2, r0, r2
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e100 	.word	0xe000e100

0800063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db0a      	blt.n	8000666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	490c      	ldr	r1, [pc, #48]	@ (8000688 <__NVIC_SetPriority+0x4c>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	440b      	add	r3, r1
 8000660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000664:	e00a      	b.n	800067c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4908      	ldr	r1, [pc, #32]	@ (800068c <__NVIC_SetPriority+0x50>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	3b04      	subs	r3, #4
 8000674:	0112      	lsls	r2, r2, #4
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	440b      	add	r3, r1
 800067a:	761a      	strb	r2, [r3, #24]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	@ 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f1c3 0307 	rsb	r3, r3, #7
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	bf28      	it	cs
 80006ae:	2304      	movcs	r3, #4
 80006b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3304      	adds	r3, #4
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d902      	bls.n	80006c0 <NVIC_EncodePriority+0x30>
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3b03      	subs	r3, #3
 80006be:	e000      	b.n	80006c2 <NVIC_EncodePriority+0x32>
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 32ff 	mov.w	r2, #4294967295
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	43da      	mvns	r2, r3
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	401a      	ands	r2, r3
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d8:	f04f 31ff 	mov.w	r1, #4294967295
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43d9      	mvns	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	@ 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f7ff ff8e 	bl	800063c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff29 	bl	800059c <__NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff3e 	bl	80005e4 <__NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff8e 	bl	8000690 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5d 	bl	800063c <__NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff31 	bl	8000600 <__NVIC_EnableIRQ>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffa2 	bl	80006f8 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d004      	beq.n	80007dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e00c      	b.n	80007f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2205      	movs	r2, #5
 80007e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0201 	bic.w	r2, r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	@ 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	e159      	b.n	8000ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000820:	2201      	movs	r2, #1
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	429a      	cmp	r2, r3
 800083a:	f040 8148 	bne.w	8000ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <HAL_GPIO_Init+0x5a>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	2b11      	cmp	r3, #17
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d003      	beq.n	8000900 <HAL_GPIO_Init+0xfc>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b12      	cmp	r3, #18
 80008fe:	d123      	bne.n	8000948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	08da      	lsrs	r2, r3, #3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3208      	adds	r2, #8
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3208      	adds	r2, #8
 8000942:	69b9      	ldr	r1, [r7, #24]
 8000944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0203 	and.w	r2, r3, #3
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 80a2 	beq.w	8000ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b57      	ldr	r3, [pc, #348]	@ (8000aec <HAL_GPIO_Init+0x2e8>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a56      	ldr	r2, [pc, #344]	@ (8000aec <HAL_GPIO_Init+0x2e8>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b54      	ldr	r3, [pc, #336]	@ (8000aec <HAL_GPIO_Init+0x2e8>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a6:	4a52      	ldr	r2, [pc, #328]	@ (8000af0 <HAL_GPIO_Init+0x2ec>)
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a49      	ldr	r2, [pc, #292]	@ (8000af4 <HAL_GPIO_Init+0x2f0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d019      	beq.n	8000a06 <HAL_GPIO_Init+0x202>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	@ (8000af8 <HAL_GPIO_Init+0x2f4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0x1fe>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a47      	ldr	r2, [pc, #284]	@ (8000afc <HAL_GPIO_Init+0x2f8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_GPIO_Init+0x1fa>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a46      	ldr	r2, [pc, #280]	@ (8000b00 <HAL_GPIO_Init+0x2fc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_GPIO_Init+0x1f6>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a45      	ldr	r2, [pc, #276]	@ (8000b04 <HAL_GPIO_Init+0x300>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_GPIO_Init+0x1f2>
 80009f2:	2304      	movs	r3, #4
 80009f4:	e008      	b.n	8000a08 <HAL_GPIO_Init+0x204>
 80009f6:	2307      	movs	r3, #7
 80009f8:	e006      	b.n	8000a08 <HAL_GPIO_Init+0x204>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e004      	b.n	8000a08 <HAL_GPIO_Init+0x204>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e002      	b.n	8000a08 <HAL_GPIO_Init+0x204>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <HAL_GPIO_Init+0x204>
 8000a06:	2300      	movs	r3, #0
 8000a08:	69fa      	ldr	r2, [r7, #28]
 8000a0a:	f002 0203 	and.w	r2, r2, #3
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	4093      	lsls	r3, r2
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a18:	4935      	ldr	r1, [pc, #212]	@ (8000af0 <HAL_GPIO_Init+0x2ec>)
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a26:	4b38      	ldr	r3, [pc, #224]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4013      	ands	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a50:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a74:	4a24      	ldr	r2, [pc, #144]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4013      	ands	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	f67f aea2 	bls.w	8000820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40013800 	.word	0x40013800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40013c00 	.word	0x40013c00

08000b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e083      	b.n	8000c26 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d108      	bne.n	8000b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000b2e:	d009      	beq.n	8000b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
 8000b36:	e005      	b.n	8000b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d106      	bne.n	8000b5e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f868 	bl	8000c2e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2202      	movs	r2, #2
 8000b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc2:	ea42 0103 	orr.w	r1, r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	0c1b      	lsrs	r3, r3, #16
 8000bdc:	f003 0104 	and.w	r1, r3, #4
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be4:	f003 0210 	and.w	r2, r3, #16
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bf8:	d105      	bne.n	8000c06 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b292      	uxth	r2, r2
 8000c04:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69da      	ldr	r2, [r3, #28]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000c5c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c64:	7dbb      	ldrb	r3, [r7, #22]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d00d      	beq.n	8000c86 <HAL_SPI_TransmitReceive_IT+0x42>
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000c70:	d106      	bne.n	8000c80 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <HAL_SPI_TransmitReceive_IT+0x3c>
 8000c7a:	7dbb      	ldrb	r3, [r7, #22]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d002      	beq.n	8000c86 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8000c80:	2302      	movs	r3, #2
 8000c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000c84:	e076      	b.n	8000d74 <HAL_SPI_TransmitReceive_IT+0x130>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <HAL_SPI_TransmitReceive_IT+0x54>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <HAL_SPI_TransmitReceive_IT+0x54>
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000c9c:	e06a      	b.n	8000d74 <HAL_SPI_TransmitReceive_IT+0x130>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_SPI_TransmitReceive_IT+0x68>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e064      	b.n	8000d76 <HAL_SPI_TransmitReceive_IT+0x132>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d003      	beq.n	8000cc8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <HAL_SPI_TransmitReceive_IT+0x140>)
 8000cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <HAL_SPI_TransmitReceive_IT+0x144>)
 8000d04:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d06:	e005      	b.n	8000d14 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <HAL_SPI_TransmitReceive_IT+0x148>)
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8000d12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d1c:	d10f      	bne.n	8000d3e <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000d3c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d48:	2b40      	cmp	r3, #64	@ 0x40
 8000d4a:	d007      	beq.n	8000d5c <HAL_SPI_TransmitReceive_IT+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d5a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8000d72:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	08001115 	.word	0x08001115
 8000d88:	080011bd 	.word	0x080011bd
 8000d8c:	08000fcd 	.word	0x08000fcd
 8000d90:	0800108b 	.word	0x0800108b

08000d94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d009      	beq.n	8000dd4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d004      	beq.n	8000dd4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
    return;
 8000dd2:	e0ce      	b.n	8000f72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <HAL_SPI_IRQHandler+0x5e>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	4798      	blx	r3
    return;
 8000df0:	e0bf      	b.n	8000f72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10a      	bne.n	8000e12 <HAL_SPI_IRQHandler+0x7e>
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80b0 	beq.w	8000f72 <HAL_SPI_IRQHandler+0x1de>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80aa 	beq.w	8000f72 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d011      	beq.n	8000e58 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e38:	f043 0204 	orr.w	r2, r3, #4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	e00b      	b.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
        return;
 8000e6e:	e080      	b.n	8000f72 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d014      	beq.n	8000ea4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00c      	beq.n	8000ec8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb2:	f043 0208 	orr.w	r2, r3, #8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d04f      	beq.n	8000f70 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8000ede:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d104      	bne.n	8000efc <HAL_SPI_IRQHandler+0x168>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d034      	beq.n	8000f66 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0203 	bic.w	r2, r2, #3
 8000f0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d011      	beq.n	8000f38 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <HAL_SPI_IRQHandler+0x1e4>)
 8000f1a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fc4c 	bl	80007be <HAL_DMA_Abort_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d016      	beq.n	8000f6e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f44:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_SPI_IRQHandler+0x1e4>)
 8000f46:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc36 	bl	80007be <HAL_DMA_Abort_IT>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00a      	beq.n	8000f6e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8000f64:	e003      	b.n	8000f6e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f812 	bl	8000f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8000f6c:	e000      	b.n	8000f70 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8000f6e:	bf00      	nop
    return;
 8000f70:	bf00      	nop
  }
}
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08000fa5 	.word	0x08000fa5

08000f7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ffe6 	bl	8000f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f103 020c 	add.w	r2, r3, #12
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001002:	b29b      	uxth	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d118      	bne.n	800103a <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001010:	d103      	bne.n	800101a <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <SPI_2linesRxISR_8BIT+0x74>)
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40
      return;
 8001018:	e00f      	b.n	800103a <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001028:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800102e:	b29b      	uxth	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f9e1 	bl	80013fc <SPI_CloseRxTx_ISR>
    }
  }
}
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	08001045 	.word	0x08001045

08001044 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	330c      	adds	r3, #12
 8001056:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8001060:	7afb      	ldrb	r3, [r7, #11]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001070:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001076:	b29b      	uxth	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <SPI_2linesRxISR_8BITCRC+0x3e>
  {
    SPI_CloseRxTx_ISR(hspi);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9bd 	bl	80013fc <SPI_CloseRxTx_ISR>
  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	330c      	adds	r3, #12
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d125      	bne.n	800110e <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ca:	d110      	bne.n	80010ee <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80010da:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010ea:	605a      	str	r2, [r3, #4]
      return;
 80010ec:	e00f      	b.n	800110e <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f977 	bl	80013fc <SPI_CloseRxTx_ISR>
    }
  }
}
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001126:	b292      	uxth	r2, r2
 8001128:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001138:	b29b      	uxth	r3, r3
 800113a:	3b01      	subs	r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d118      	bne.n	800117e <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001154:	d103      	bne.n	800115e <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SPI_2linesRxISR_16BIT+0x70>)
 800115a:	641a      	str	r2, [r3, #64]	@ 0x40
      return;
 800115c:	e00f      	b.n	800117e <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800116c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001172:	b29b      	uxth	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f93f 	bl	80013fc <SPI_CloseRxTx_ISR>
    }
  }
}
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08001189 	.word	0x08001189

08001188 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800119c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011ac:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f924 	bl	80013fc <SPI_CloseRxTx_ISR>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	1c9a      	adds	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d125      	bne.n	800123e <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011fa:	d110      	bne.n	800121e <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800120a:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800121a:	605a      	str	r2, [r3, #4]
      return;
 800121c:	e00f      	b.n	800123e <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800122c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001232:	b29b      	uxth	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f8df 	bl	80013fc <SPI_CloseRxTx_ISR>
    }
  }
}
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001254:	f7ff f82c 	bl	80002b0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001264:	f7ff f824 	bl	80002b0 <HAL_GetTick>
 8001268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	0d1b      	lsrs	r3, r3, #20
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800127a:	e054      	b.n	8001326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001282:	d050      	beq.n	8001326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001284:	f7ff f814 	bl	80002b0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	429a      	cmp	r2, r3
 8001292:	d902      	bls.n	800129a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d13d      	bne.n	8001316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80012a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80012b2:	d111      	bne.n	80012d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012bc:	d004      	beq.n	80012c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c6:	d107      	bne.n	80012d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012e0:	d10f      	bne.n	8001302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e017      	b.n	8001346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3b01      	subs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4013      	ands	r3, r2
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	429a      	cmp	r2, r3
 8001342:	d19b      	bne.n	800127c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000014 	.word	0x20000014

08001354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2201      	movs	r2, #1
 8001368:	2102      	movs	r1, #2
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff ff6a 	bl	8001244 <SPI_WaitFlagStateUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e032      	b.n	80013ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <SPI_EndRxTxTransaction+0xa0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <SPI_EndRxTxTransaction+0xa4>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80013a4:	d112      	bne.n	80013cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2200      	movs	r2, #0
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff47 	bl	8001244 <SPI_WaitFlagStateUntilTimeout>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d016      	beq.n	80013ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e00f      	b.n	80013ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	2b80      	cmp	r3, #128	@ 0x80
 80013e4:	d0f2      	beq.n	80013cc <SPI_EndRxTxTransaction+0x78>
 80013e6:	e000      	b.n	80013ea <SPI_EndRxTxTransaction+0x96>
        break;
 80013e8:	bf00      	nop
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000014 	.word	0x20000014
 80013f8:	165e9f81 	.word	0x165e9f81

080013fc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <SPI_CloseRxTx_ISR+0x114>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <SPI_CloseRxTx_ISR+0x118>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	2264      	movs	r2, #100	@ 0x64
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001418:	f7fe ff4a 	bl	80002b0 <HAL_GetTick>
 800141c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0220 	bic.w	r2, r2, #32
 800142c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001440:	e009      	b.n	8001456 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	3b01      	subs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0eb      	beq.n	800142e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	2164      	movs	r1, #100	@ 0x64
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff7a 	bl	8001354 <SPI_EndRxTxTransaction>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f043 0220 	orr.w	r2, r3, #32
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b10      	cmp	r3, #16
 800149c:	d112      	bne.n	80014c4 <SPI_CloseRxTx_ISR+0xc8>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014aa:	f043 0202 	orr.w	r2, r3, #2
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80014ba:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fd67 	bl	8000f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80014c2:	e020      	b.n	8001506 <SPI_CloseRxTx_ISR+0x10a>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d115      	bne.n	80014f8 <SPI_CloseRxTx_ISR+0xfc>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <SPI_CloseRxTx_ISR+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_RxCpltCallback(hspi);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fd4b 	bl	8000f7c <HAL_SPI_RxCpltCallback>
}
 80014e6:	e00e      	b.n	8001506 <SPI_CloseRxTx_ISR+0x10a>
        hspi->State = HAL_SPI_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f81b 	bl	800152c <HAL_SPI_TxRxCpltCallback>
}
 80014f6:	e006      	b.n	8001506 <SPI_CloseRxTx_ISR+0x10a>
      hspi->State = HAL_SPI_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fd45 	bl	8000f90 <HAL_SPI_ErrorCallback>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000014 	.word	0x20000014
 8001514:	057619f1 	.word	0x057619f1

08001518 <ADC_IRQHandler>:

}


void ADC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <ADC_IRQHandler+0x10>)
 800151e:	f7fe fed3 	bl	80002c8 <HAL_ADC_IRQHandler>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000038 	.word	0x20000038

0800152c <HAL_SPI_TxRxCpltCallback>:

int counter;


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	//Do something
	counter++;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_SPI_TxRxCpltCallback+0x20>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_SPI_TxRxCpltCallback+0x20>)
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200000e4 	.word	0x200000e4

08001550 <main>:

int main()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8001554:	f7fe fe3e 	bl	80001d4 <HAL_Init>
	spi1_init();
 8001558:	f000 f80e 	bl	8001578 <spi1_init>


	HAL_SPI_TransmitReceive_IT(&hspi1, tx_buffer, rx_buffer, 10);
 800155c:	230a      	movs	r3, #10
 800155e:	4a03      	ldr	r2, [pc, #12]	@ (800156c <main+0x1c>)
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <main+0x20>)
 8001562:	4804      	ldr	r0, [pc, #16]	@ (8001574 <main+0x24>)
 8001564:	f7ff fb6e 	bl	8000c44 <HAL_SPI_TransmitReceive_IT>



	while(1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <main+0x18>
 800156c:	200000d8 	.word	0x200000d8
 8001570:	20000008 	.word	0x20000008
 8001574:	20000080 	.word	0x20000080

08001578 <spi1_init>:

	}
}

void spi1_init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_SPI1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <spi1_init+0xd4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <spi1_init+0xd4>)
 8001598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <spi1_init+0xd4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <spi1_init+0xd4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a26      	ldr	r2, [pc, #152]	@ (800164c <spi1_init+0xd4>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <spi1_init+0xd4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

//	PA5 -->SPI1_SCK
//	PA6 -->SPI1_MISO
//	PA7 -->SPI1_MOSI

	GPIO_InitStruct.Pin 		= GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80015c6:	23e0      	movs	r3, #224	@ 0xe0
 80015c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 80015ce:	2305      	movs	r3, #5
 80015d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	481b      	ldr	r0, [pc, #108]	@ (8001650 <spi1_init+0xd8>)
 80015e2:	f7ff f90f 	bl	8000804 <HAL_GPIO_Init>

	//Configure SPI module

	hspi1.Instance 					= SPI1;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <spi1_init+0xdc>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <spi1_init+0xe0>)
 80015ea:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode 				= SPI_MODE_MASTER;
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <spi1_init+0xdc>)
 80015ee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f2:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction 			= SPI_DIRECTION_2LINES;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <spi1_init+0xdc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <spi1_init+0xdc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity 			= SPI_POLARITY_LOW;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <spi1_init+0xdc>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <spi1_init+0xdc>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS 					= SPI_NSS_SOFT;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <spi1_init+0xdc>)
 800160e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001612:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_8;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <spi1_init+0xdc>)
 8001616:	2210      	movs	r2, #16
 8001618:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <spi1_init+0xdc>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode 				= SPI_TIMODE_DISABLE;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <spi1_init+0xdc>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <spi1_init+0xdc>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_SPI_Init(&hspi1);
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <spi1_init+0xdc>)
 800162e:	f7ff fa6d 	bl	8000b0c <HAL_SPI_Init>

	HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2023      	movs	r0, #35	@ 0x23
 8001638:	f7ff f88b 	bl	8000752 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800163c:	2023      	movs	r0, #35	@ 0x23
 800163e:	f7ff f8a4 	bl	800078a <HAL_NVIC_EnableIRQ>


}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	20000080 	.word	0x20000080
 8001658:	40013000 	.word	0x40013000

0800165c <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <SPI1_IRQHandler+0x10>)
 8001662:	f7ff fb97 	bl	8000d94 <HAL_SPI_IRQHandler>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000080 	.word	0x20000080

08001670 <SysTick_Handler>:



void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 8001674:	f7fe fe08 	bl	8000288 <HAL_IncTick>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800167c:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800167e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopForever+0xe>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopForever+0x16>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016aa:	f000 f811 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ae:	f7ff ff4f 	bl	8001550 <main>

080016b2 <LoopForever>:

LoopForever:
  b LoopForever
 80016b2:	e7fe      	b.n	80016b2 <LoopForever>
  ldr   r0, =_estack
 80016b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80016c0:	08001738 	.word	0x08001738
  ldr r2, =_sbss
 80016c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80016c8:	200000e8 	.word	0x200000e8

080016cc <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <BusFault_Handler>
	...

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	4d0d      	ldr	r5, [pc, #52]	@ (8001708 <__libc_init_array+0x38>)
 80016d4:	4c0d      	ldr	r4, [pc, #52]	@ (800170c <__libc_init_array+0x3c>)
 80016d6:	1b64      	subs	r4, r4, r5
 80016d8:	10a4      	asrs	r4, r4, #2
 80016da:	2600      	movs	r6, #0
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	4d0b      	ldr	r5, [pc, #44]	@ (8001710 <__libc_init_array+0x40>)
 80016e2:	4c0c      	ldr	r4, [pc, #48]	@ (8001714 <__libc_init_array+0x44>)
 80016e4:	f000 f818 	bl	8001718 <_init>
 80016e8:	1b64      	subs	r4, r4, r5
 80016ea:	10a4      	asrs	r4, r4, #2
 80016ec:	2600      	movs	r6, #0
 80016ee:	42a6      	cmp	r6, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f8:	4798      	blx	r3
 80016fa:	3601      	adds	r6, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001702:	4798      	blx	r3
 8001704:	3601      	adds	r6, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	08001730 	.word	0x08001730
 800170c:	08001730 	.word	0x08001730
 8001710:	08001730 	.word	0x08001730
 8001714:	08001734 	.word	0x08001734

08001718 <_init>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr

08001724 <_fini>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr
