
11_ADC_DMA_MultiChannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd0  08003cd0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003cd0  08003cd0  00004cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd8  08003cd8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd8  08003cd8  00004cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ce0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08003d48  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003d48  000052c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008225  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfc  00000000  00000000  0000d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000654  00000000  00000000  0000f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f77  00000000  00000000  0000fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3e7  00000000  00000000  00026d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8ef  00000000  00000000  000320fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be9e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000bea2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c1390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c44 	.word	0x08003c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003c44 	.word	0x08003c44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fe67 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe77 	bl	80012d6 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fe3f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e033      	b.n	80006e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f831 	bl	80006ea <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d118      	bne.n	80006d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80006aa:	f023 0302 	bic.w	r3, r3, #2
 80006ae:	f043 0202 	orr.w	r2, r3, #2
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fb80 	bl	8000dbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	f043 0201 	orr.w	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d2:	e001      	b.n	80006d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	2b02      	cmp	r3, #2
 800071a:	bf0c      	ite	eq
 800071c:	2301      	moveq	r3, #1
 800071e:	2300      	movne	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f003 0320 	and.w	r3, r3, #32
 800072e:	2b20      	cmp	r3, #32
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d049      	beq.n	80007d4 <HAL_ADC_IRQHandler+0xd6>
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d046      	beq.n	80007d4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12b      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000770:	2b00      	cmp	r3, #0
 8000772:	d127      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800078c:	2b00      	cmp	r3, #0
 800078e:	d119      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0220 	bic.w	r2, r2, #32
 800079e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d105      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f043 0201 	orr.w	r2, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f9af 	bl	8000b28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f06f 0212 	mvn.w	r2, #18
 80007d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f4:	2b80      	cmp	r3, #128	@ 0x80
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d057      	beq.n	80008b6 <HAL_ADC_IRQHandler+0x1b8>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d054      	beq.n	80008b6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d139      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000838:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800084a:	2b00      	cmp	r3, #0
 800084c:	d12b      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000858:	2b00      	cmp	r3, #0
 800085a:	d124      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000866:	2b00      	cmp	r3, #0
 8000868:	d11d      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800086e:	2b00      	cmp	r3, #0
 8000870:	d119      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000880:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f043 0201 	orr.w	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 fc06 	bl	80010b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f06f 020c 	mvn.w	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	bf0c      	ite	eq
 80008c4:	2301      	moveq	r3, #1
 80008c6:	2300      	movne	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d6:	2b40      	cmp	r3, #64	@ 0x40
 80008d8:	bf0c      	ite	eq
 80008da:	2301      	moveq	r3, #1
 80008dc:	2300      	movne	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d017      	beq.n	8000918 <HAL_ADC_IRQHandler+0x21a>
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d014      	beq.n	8000918 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10d      	bne.n	8000918 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f921 	bl	8000b50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f06f 0201 	mvn.w	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	2b20      	cmp	r3, #32
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d015      	beq.n	8000978 <HAL_ADC_IRQHandler+0x27a>
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d012      	beq.n	8000978 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f043 0202 	orr.w	r2, r3, #2
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f06f 0220 	mvn.w	r2, #32
 8000966:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f8fb 	bl	8000b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f06f 0220 	mvn.w	r2, #32
 8000976:	601a      	str	r2, [r3, #0]
  }
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000996:	2b01      	cmp	r3, #1
 8000998:	d101      	bne.n	800099e <HAL_ADC_Start_DMA+0x1e>
 800099a:	2302      	movs	r3, #2
 800099c:	e0b1      	b.n	8000b02 <HAL_ADC_Start_DMA+0x182>
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d018      	beq.n	80009e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0201 	orr.w	r2, r2, #1
 80009c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009c4:	4b51      	ldr	r3, [pc, #324]	@ (8000b0c <HAL_ADC_Start_DMA+0x18c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a51      	ldr	r2, [pc, #324]	@ (8000b10 <HAL_ADC_Start_DMA+0x190>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9a      	lsrs	r2, r3, #18
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80009d8:	e002      	b.n	80009e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	3b01      	subs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f9      	bne.n	80009da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	f040 8085 	bne.w	8000b00 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d007      	beq.n	8000a28 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a34:	d106      	bne.n	8000a44 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	f023 0206 	bic.w	r2, r3, #6
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a42:	e002      	b.n	8000a4a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2200      	movs	r2, #0
 8000a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <HAL_ADC_Start_DMA+0x194>)
 8000a54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <HAL_ADC_Start_DMA+0x198>)
 8000a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a62:	4a2e      	ldr	r2, [pc, #184]	@ (8000b1c <HAL_ADC_Start_DMA+0x19c>)
 8000a64:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b20 <HAL_ADC_Start_DMA+0x1a0>)
 8000a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000a76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000a86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	334c      	adds	r3, #76	@ 0x4c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f000 fcd0 	bl	800144c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11c      	bne.n	8000b00 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	e013      	b.n	8000b00 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <HAL_ADC_Start_DMA+0x1a4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10e      	bne.n	8000b00 <HAL_ADC_Start_DMA+0x180>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000afe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	40012300 	.word	0x40012300
 8000b18:	08000fb5 	.word	0x08000fb5
 8000b1c:	0800106f 	.word	0x0800106f
 8000b20:	0800108b 	.word	0x0800108b
 8000b24:	40012000 	.word	0x40012000

08000b28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_ConfigChannel+0x1c>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e105      	b.n	8000da0 <HAL_ADC_ConfigChannel+0x228>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d925      	bls.n	8000bf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68d9      	ldr	r1, [r3, #12]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3b1e      	subs	r3, #30
 8000bba:	2207      	movs	r2, #7
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68d9      	ldr	r1, [r3, #12]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4403      	add	r3, r0
 8000be2:	3b1e      	subs	r3, #30
 8000be4:	409a      	lsls	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	e022      	b.n	8000c36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6919      	ldr	r1, [r3, #16]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	2207      	movs	r2, #7
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	400a      	ands	r2, r1
 8000c12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	4603      	mov	r3, r0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4403      	add	r3, r0
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d824      	bhi.n	8000c88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3b05      	subs	r3, #5
 8000c50:	221f      	movs	r2, #31
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	3b05      	subs	r3, #5
 8000c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c86:	e04c      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b0c      	cmp	r3, #12
 8000c8e:	d824      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b23      	subs	r3, #35	@ 0x23
 8000ca2:	221f      	movs	r2, #31
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	400a      	ands	r2, r1
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b23      	subs	r3, #35	@ 0x23
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cd8:	e023      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b41      	subs	r3, #65	@ 0x41
 8000cec:	221f      	movs	r2, #31
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	3b41      	subs	r3, #65	@ 0x41
 8000d16:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d22:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <HAL_ADC_ConfigChannel+0x234>)
 8000d24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <HAL_ADC_ConfigChannel+0x238>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d109      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x1cc>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d105      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_ADC_ConfigChannel+0x238>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d123      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x21e>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b10      	cmp	r3, #16
 8000d54:	d003      	beq.n	8000d5e <HAL_ADC_ConfigChannel+0x1e6>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b11      	cmp	r3, #17
 8000d5c:	d11b      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	d111      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_ADC_ConfigChannel+0x23c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_ADC_ConfigChannel+0x240>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9a      	lsrs	r2, r3, #18
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d88:	e002      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f9      	bne.n	8000d8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40012300 	.word	0x40012300
 8000db0:	40012000 	.word	0x40012000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	431bde83 	.word	0x431bde83

08000dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dc4:	4b79      	ldr	r3, [pc, #484]	@ (8000fac <ADC_Init+0x1f0>)
 8000dc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6859      	ldr	r1, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	021a      	lsls	r2, r3, #8
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6899      	ldr	r1, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e4e:	4a58      	ldr	r2, [pc, #352]	@ (8000fb0 <ADC_Init+0x1f4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d022      	beq.n	8000e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6899      	ldr	r1, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6899      	ldr	r1, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e00f      	b.n	8000eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0202 	bic.w	r2, r2, #2
 8000ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6899      	ldr	r1, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e1b      	ldrb	r3, [r3, #24]
 8000ed4:	005a      	lsls	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d01b      	beq.n	8000f20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ef6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	3b01      	subs	r3, #1
 8000f14:	035a      	lsls	r2, r3, #13
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	e007      	b.n	8000f30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	051a      	lsls	r2, r3, #20
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6899      	ldr	r1, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f72:	025a      	lsls	r2, r3, #9
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6899      	ldr	r1, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	029a      	lsls	r2, r3, #10
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	609a      	str	r2, [r3, #8]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40012300 	.word	0x40012300
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d13c      	bne.n	8001048 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d12b      	bne.n	8001040 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d127      	bne.n	8001040 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001008:	2b00      	cmp	r3, #0
 800100a:	d119      	bne.n	8001040 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0220 	bic.w	r2, r2, #32
 800101a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff fd71 	bl	8000b28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001046:	e00e      	b.n	8001066 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fd85 	bl	8000b64 <HAL_ADC_ErrorCallback>
}
 800105a:	e004      	b.n	8001066 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800107a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fd5d 	bl	8000b3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001096:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2240      	movs	r2, #64	@ 0x40
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f043 0204 	orr.w	r2, r3, #4
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff fd5a 	bl	8000b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff f9a6 	bl	800064c <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e099      	b.n	8001440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132c:	e00f      	b.n	800134e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132e:	f7ff f98d 	bl	800064c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b05      	cmp	r3, #5
 800133a:	d908      	bls.n	800134e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2220      	movs	r2, #32
 8001340:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e078      	b.n	8001440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e8      	bne.n	800132e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_DMA_Init+0x158>)
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d107      	bne.n	80013b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4313      	orrs	r3, r2
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f023 0307 	bic.w	r3, r3, #7
 80013ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d117      	bne.n	8001412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa6f 	bl	80018d8 <DMA_CheckFifoParam>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2240      	movs	r2, #64	@ 0x40
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800140e:	2301      	movs	r3, #1
 8001410:	e016      	b.n	8001440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa26 	bl	800186c <DMA_CalcBaseAndBitshift>
 8001420:	4603      	mov	r3, r0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	223f      	movs	r2, #63	@ 0x3f
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	f010803f 	.word	0xf010803f

0800144c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Start_IT+0x26>
 800146e:	2302      	movs	r3, #2
 8001470:	e040      	b.n	80014f4 <HAL_DMA_Start_IT+0xa8>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d12f      	bne.n	80014e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f9b8 	bl	8001810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	223f      	movs	r2, #63	@ 0x3f
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0216 	orr.w	r2, r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e005      	b.n	80014f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001508:	4b8e      	ldr	r3, [pc, #568]	@ (8001744 <HAL_DMA_IRQHandler+0x248>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a8e      	ldr	r2, [pc, #568]	@ (8001748 <HAL_DMA_IRQHandler+0x24c>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001526:	2208      	movs	r2, #8
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d01a      	beq.n	8001568 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	2208      	movs	r2, #8
 8001556:	409a      	lsls	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156c:	2201      	movs	r2, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d012      	beq.n	800159e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a2:	2204      	movs	r2, #4
 80015a4:	409a      	lsls	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d012      	beq.n	80015d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	2204      	movs	r2, #4
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015cc:	f043 0204 	orr.w	r2, r3, #4
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	2210      	movs	r2, #16
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d043      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03c      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f6:	2210      	movs	r2, #16
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d018      	beq.n	800163e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d024      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
 800162a:	e01f      	b.n	800166c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01b      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
 800163c:	e016      	b.n	800166c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0208 	bic.w	r2, r2, #8
 800165a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2220      	movs	r2, #32
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 808f 	beq.w	800179c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8087 	beq.w	800179c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001692:	2220      	movs	r2, #32
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d136      	bne.n	8001714 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0216 	bic.w	r2, r2, #22
 80016b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <HAL_DMA_IRQHandler+0x1da>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0208 	bic.w	r2, r2, #8
 80016e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	223f      	movs	r2, #63	@ 0x3f
 80016ec:	409a      	lsls	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001706:	2b00      	cmp	r3, #0
 8001708:	d07e      	beq.n	8001808 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
        }
        return;
 8001712:	e079      	b.n	8001808 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01d      	beq.n	800175e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10d      	bne.n	800174c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001734:	2b00      	cmp	r3, #0
 8001736:	d031      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
 8001740:	e02c      	b.n	800179c <HAL_DMA_IRQHandler+0x2a0>
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
 800175c:	e01e      	b.n	800179c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0210 	bic.w	r2, r2, #16
 800177a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d032      	beq.n	800180a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2205      	movs	r2, #5
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d307      	bcc.n	80017e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f2      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x2cc>
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017e4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e000      	b.n	800180a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001808:	bf00      	nop
    }
  }
}
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800182c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	d108      	bne.n	8001850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800184e:	e007      	b.n	8001860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b10      	subs	r3, #16
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <DMA_CalcBaseAndBitshift+0x64>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d909      	bls.n	80018ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	1d1a      	adds	r2, r3, #4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80018ac:	e007      	b.n	80018be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	aaaaaaab 	.word	0xaaaaaaab
 80018d4:	08003c8c 	.word	0x08003c8c

080018d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11f      	bne.n	8001932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d856      	bhi.n	80019a6 <DMA_CheckFifoParam+0xce>
 80018f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <DMA_CheckFifoParam+0x28>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001923 	.word	0x08001923
 8001908:	08001911 	.word	0x08001911
 800190c:	080019a7 	.word	0x080019a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d046      	beq.n	80019aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001920:	e043      	b.n	80019aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800192a:	d140      	bne.n	80019ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e03d      	b.n	80019ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800193a:	d121      	bne.n	8001980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d837      	bhi.n	80019b2 <DMA_CheckFifoParam+0xda>
 8001942:	a201      	add	r2, pc, #4	@ (adr r2, 8001948 <DMA_CheckFifoParam+0x70>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	08001959 	.word	0x08001959
 800194c:	0800195f 	.word	0x0800195f
 8001950:	08001959 	.word	0x08001959
 8001954:	08001971 	.word	0x08001971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      break;
 800195c:	e030      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d025      	beq.n	80019b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196e:	e022      	b.n	80019b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001978:	d11f      	bne.n	80019ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800197e:	e01c      	b.n	80019ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d903      	bls.n	800198e <DMA_CheckFifoParam+0xb6>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800198c:	e018      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
      break;
 8001992:	e015      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      break;
 80019a4:	e00b      	b.n	80019be <DMA_CheckFifoParam+0xe6>
      break;
 80019a6:	bf00      	nop
 80019a8:	e00a      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e008      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e006      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e004      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e002      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
    }
  } 
  
  return status; 
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e159      	b.n	8001ca0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8148 	bne.w	8001c9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00b      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0xfc>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a2 	beq.w	8001c9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b57      	ldr	r3, [pc, #348]	@ (8001cb8 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <HAL_GPIO_Init+0x2e8>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <HAL_GPIO_Init+0x2e8>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a52      	ldr	r2, [pc, #328]	@ (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a49      	ldr	r2, [pc, #292]	@ (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x202>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a48      	ldr	r2, [pc, #288]	@ (8001cc4 <HAL_GPIO_Init+0x2f4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x1fe>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a47      	ldr	r2, [pc, #284]	@ (8001cc8 <HAL_GPIO_Init+0x2f8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x1fa>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a46      	ldr	r2, [pc, #280]	@ (8001ccc <HAL_GPIO_Init+0x2fc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x1f6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a45      	ldr	r2, [pc, #276]	@ (8001cd0 <HAL_GPIO_Init+0x300>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x1f2>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x204>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x204>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x204>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x204>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x204>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	@ (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c16:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c40:	4a24      	ldr	r2, [pc, #144]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f aea2 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08003c94 	.word	0x08003c94

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08003c94 	.word	0x08003c94

08001d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e03f      	b.n	8001dd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f837 	bl	8001dda <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f915 	bl	8001fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	f040 8083 	bne.w	8001f16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_UART_Transmit+0x2e>
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e07b      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Transmit+0x40>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e074      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2221      	movs	r2, #33	@ 0x21
 8001e40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e44:	f7fe fc02 	bl	800064c <HAL_GetTick>
 8001e48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8001e5e:	e042      	b.n	8001ee6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e76:	d122      	bne.n	8001ebe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f84c 	bl	8001f20 <UART_WaitOnFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e042      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	e017      	b.n	8001ee6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	e013      	b.n	8001ee6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2180      	movs	r1, #128	@ 0x80
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f829 	bl	8001f20 <UART_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e01f      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1b7      	bne.n	8001e60 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2140      	movs	r1, #64	@ 0x40
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f810 	bl	8001f20 <UART_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e006      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f30:	e02c      	b.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d028      	beq.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f40:	f7fe fb84 	bl	800064c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d21d      	bcs.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8001f5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e00f      	b.n	8001fac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4013      	ands	r3, r2
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d0c3      	beq.n	8001f32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	ea40 0301 	orr.w	r3, r0, r1
 8001fde:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002002:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800200e:	f021 010c 	bic.w	r1, r1, #12
 8002012:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800201c:	430b      	orrs	r3, r1
 800201e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800202c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002030:	6999      	ldr	r1, [r3, #24]
 8002032:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	ea40 0301 	orr.w	r3, r0, r1
 800203c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800203e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002048:	f040 824a 	bne.w	80024e0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800204c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <UART_SetConfig+0x2f8>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d006      	beq.n	8002066 <UART_SetConfig+0xb2>
 8002058:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b94      	ldr	r3, [pc, #592]	@ (80022b0 <UART_SetConfig+0x2fc>)
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8129 	bne.w	80022b8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002066:	f7ff fe57 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 800206a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800206e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002072:	2200      	movs	r2, #0
 8002074:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8002078:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 800207c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002080:	4622      	mov	r2, r4
 8002082:	462b      	mov	r3, r5
 8002084:	1891      	adds	r1, r2, r2
 8002086:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800208a:	415b      	adcs	r3, r3
 800208c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002090:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002094:	4621      	mov	r1, r4
 8002096:	1851      	adds	r1, r2, r1
 8002098:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800209c:	4629      	mov	r1, r5
 800209e:	414b      	adcs	r3, r1
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80020b0:	4649      	mov	r1, r9
 80020b2:	00cb      	lsls	r3, r1, #3
 80020b4:	4641      	mov	r1, r8
 80020b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ba:	4641      	mov	r1, r8
 80020bc:	00ca      	lsls	r2, r1, #3
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	4622      	mov	r2, r4
 80020c6:	189b      	adds	r3, r3, r2
 80020c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020cc:	462b      	mov	r3, r5
 80020ce:	460a      	mov	r2, r1
 80020d0:	eb42 0303 	adc.w	r3, r2, r3
 80020d4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80020d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020e4:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80020e8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80020ec:	460b      	mov	r3, r1
 80020ee:	18db      	adds	r3, r3, r3
 80020f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020f4:	4613      	mov	r3, r2
 80020f6:	eb42 0303 	adc.w	r3, r2, r3
 80020fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020fe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002102:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8002106:	f7fe f8bb 	bl	8000280 <__aeabi_uldivmod>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4b69      	ldr	r3, [pc, #420]	@ (80022b4 <UART_SetConfig+0x300>)
 8002110:	fba3 2302 	umull	r2, r3, r3, r2
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	011c      	lsls	r4, r3, #4
 8002118:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8002122:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002126:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800212a:	4642      	mov	r2, r8
 800212c:	464b      	mov	r3, r9
 800212e:	1891      	adds	r1, r2, r2
 8002130:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002134:	415b      	adcs	r3, r3
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800213a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800213e:	4641      	mov	r1, r8
 8002140:	1851      	adds	r1, r2, r1
 8002142:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002146:	4649      	mov	r1, r9
 8002148:	414b      	adcs	r3, r1
 800214a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800215a:	4659      	mov	r1, fp
 800215c:	00cb      	lsls	r3, r1, #3
 800215e:	4651      	mov	r1, sl
 8002160:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002164:	4651      	mov	r1, sl
 8002166:	00ca      	lsls	r2, r1, #3
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	4603      	mov	r3, r0
 800216e:	4642      	mov	r2, r8
 8002170:	189b      	adds	r3, r3, r2
 8002172:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8002176:	464b      	mov	r3, r9
 8002178:	460a      	mov	r2, r1
 800217a:	eb42 0303 	adc.w	r3, r2, r3
 800217e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8002182:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800218e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8002192:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8002196:	460b      	mov	r3, r1
 8002198:	18db      	adds	r3, r3, r3
 800219a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800219e:	4613      	mov	r3, r2
 80021a0:	eb42 0303 	adc.w	r3, r2, r3
 80021a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80021a8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80021ac:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80021b0:	f7fe f866 	bl	8000280 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	4b3e      	ldr	r3, [pc, #248]	@ (80022b4 <UART_SetConfig+0x300>)
 80021bc:	fba3 2301 	umull	r2, r3, r3, r1
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2264      	movs	r2, #100	@ 0x64
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	1acb      	subs	r3, r1, r3
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021d0:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <UART_SetConfig+0x300>)
 80021d2:	fba3 2302 	umull	r2, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021de:	441c      	add	r4, r3
 80021e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021ea:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80021ee:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80021f2:	4642      	mov	r2, r8
 80021f4:	464b      	mov	r3, r9
 80021f6:	1891      	adds	r1, r2, r2
 80021f8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80021fc:	415b      	adcs	r3, r3
 80021fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002202:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002206:	4641      	mov	r1, r8
 8002208:	1851      	adds	r1, r2, r1
 800220a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800220e:	4649      	mov	r1, r9
 8002210:	414b      	adcs	r3, r1
 8002212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8002222:	4659      	mov	r1, fp
 8002224:	00cb      	lsls	r3, r1, #3
 8002226:	4651      	mov	r1, sl
 8002228:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800222c:	4651      	mov	r1, sl
 800222e:	00ca      	lsls	r2, r1, #3
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	4603      	mov	r3, r0
 8002236:	4642      	mov	r2, r8
 8002238:	189b      	adds	r3, r3, r2
 800223a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800223e:	464b      	mov	r3, r9
 8002240:	460a      	mov	r2, r1
 8002242:	eb42 0303 	adc.w	r3, r2, r3
 8002246:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800224a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002256:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800225a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800225e:	460b      	mov	r3, r1
 8002260:	18db      	adds	r3, r3, r3
 8002262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002266:	4613      	mov	r3, r2
 8002268:	eb42 0303 	adc.w	r3, r2, r3
 800226c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002270:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002274:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002278:	f7fe f802 	bl	8000280 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <UART_SetConfig+0x300>)
 8002282:	fba3 1302 	umull	r1, r3, r3, r2
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2164      	movs	r1, #100	@ 0x64
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	3332      	adds	r3, #50	@ 0x32
 8002294:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <UART_SetConfig+0x300>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	f003 0207 	and.w	r2, r3, #7
 80022a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4422      	add	r2, r4
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e34a      	b.n	8002942 <UART_SetConfig+0x98e>
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022b8:	f7ff fd1a 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80022bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c4:	2200      	movs	r2, #0
 80022c6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022ca:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80022ce:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80022d2:	4622      	mov	r2, r4
 80022d4:	462b      	mov	r3, r5
 80022d6:	1891      	adds	r1, r2, r2
 80022d8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80022dc:	415b      	adcs	r3, r3
 80022de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022e6:	4621      	mov	r1, r4
 80022e8:	eb12 0a01 	adds.w	sl, r2, r1
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb43 0b01 	adc.w	fp, r3, r1
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002306:	4692      	mov	sl, r2
 8002308:	469b      	mov	fp, r3
 800230a:	4623      	mov	r3, r4
 800230c:	eb1a 0303 	adds.w	r3, sl, r3
 8002310:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002314:	462b      	mov	r3, r5
 8002316:	eb4b 0303 	adc.w	r3, fp, r3
 800231a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800231e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800232a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800232e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8002332:	460b      	mov	r3, r1
 8002334:	18db      	adds	r3, r3, r3
 8002336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800233a:	4613      	mov	r3, r2
 800233c:	eb42 0303 	adc.w	r3, r2, r3
 8002340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002344:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002348:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800234c:	f7fd ff98 	bl	8000280 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <UART_SetConfig+0x528>)
 8002356:	fba3 2302 	umull	r2, r3, r3, r2
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	011c      	lsls	r4, r3, #4
 800235e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002368:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800236c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	1891      	adds	r1, r2, r2
 8002376:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002378:	415b      	adcs	r3, r3
 800237a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800237c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002380:	4641      	mov	r1, r8
 8002382:	1851      	adds	r1, r2, r1
 8002384:	6739      	str	r1, [r7, #112]	@ 0x70
 8002386:	4649      	mov	r1, r9
 8002388:	414b      	adcs	r3, r1
 800238a:	677b      	str	r3, [r7, #116]	@ 0x74
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8002398:	4659      	mov	r1, fp
 800239a:	00cb      	lsls	r3, r1, #3
 800239c:	4651      	mov	r1, sl
 800239e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a2:	4651      	mov	r1, sl
 80023a4:	00ca      	lsls	r2, r1, #3
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	4642      	mov	r2, r8
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80023b4:	464b      	mov	r3, r9
 80023b6:	460a      	mov	r2, r1
 80023b8:	eb42 0303 	adc.w	r3, r2, r3
 80023bc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80023c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023cc:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80023d0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80023d4:	460b      	mov	r3, r1
 80023d6:	18db      	adds	r3, r3, r3
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023da:	4613      	mov	r3, r2
 80023dc:	eb42 0303 	adc.w	r3, r2, r3
 80023e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80023ea:	f7fd ff49 	bl	8000280 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <UART_SetConfig+0x528>)
 80023f6:	fba3 2301 	umull	r2, r3, r3, r1
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2264      	movs	r2, #100	@ 0x64
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <UART_SetConfig+0x528>)
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002418:	441c      	add	r4, r3
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002424:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002428:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	6639      	str	r1, [r7, #96]	@ 0x60
 8002434:	415b      	adcs	r3, r3
 8002436:	667b      	str	r3, [r7, #100]	@ 0x64
 8002438:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800243c:	4641      	mov	r1, r8
 800243e:	1851      	adds	r1, r2, r1
 8002440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002442:	4649      	mov	r1, r9
 8002444:	414b      	adcs	r3, r1
 8002446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002454:	4659      	mov	r1, fp
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4651      	mov	r1, sl
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4642      	mov	r2, r8
 800246a:	189b      	adds	r3, r3, r2
 800246c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002470:	464b      	mov	r3, r9
 8002472:	460a      	mov	r2, r1
 8002474:	eb42 0303 	adc.w	r3, r2, r3
 8002478:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800247c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002488:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800248c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8002490:	460b      	mov	r3, r1
 8002492:	18db      	adds	r3, r3, r3
 8002494:	653b      	str	r3, [r7, #80]	@ 0x50
 8002496:	4613      	mov	r3, r2
 8002498:	eb42 0303 	adc.w	r3, r2, r3
 800249c:	657b      	str	r3, [r7, #84]	@ 0x54
 800249e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024a2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80024a6:	f7fd feeb 	bl	8000280 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <UART_SetConfig+0x528>)
 80024b0:	fba3 1302 	umull	r1, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	2164      	movs	r1, #100	@ 0x64
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	3332      	adds	r3, #50	@ 0x32
 80024c2:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <UART_SetConfig+0x528>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	f003 0207 	and.w	r2, r3, #7
 80024ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4422      	add	r2, r4
 80024d6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024d8:	e233      	b.n	8002942 <UART_SetConfig+0x98e>
 80024da:	bf00      	nop
 80024dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b8d      	ldr	r3, [pc, #564]	@ (800271c <UART_SetConfig+0x768>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d006      	beq.n	80024fa <UART_SetConfig+0x546>
 80024ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002720 <UART_SetConfig+0x76c>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8117 	bne.w	8002728 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024fa:	f7ff fc0d 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 80024fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002502:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800250c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002510:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002514:	4622      	mov	r2, r4
 8002516:	462b      	mov	r3, r5
 8002518:	1891      	adds	r1, r2, r2
 800251a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800251c:	415b      	adcs	r3, r3
 800251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002524:	4621      	mov	r1, r4
 8002526:	eb12 0801 	adds.w	r8, r2, r1
 800252a:	4629      	mov	r1, r5
 800252c:	eb43 0901 	adc.w	r9, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800253c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002540:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002544:	4690      	mov	r8, r2
 8002546:	4699      	mov	r9, r3
 8002548:	4623      	mov	r3, r4
 800254a:	eb18 0303 	adds.w	r3, r8, r3
 800254e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002552:	462b      	mov	r3, r5
 8002554:	eb49 0303 	adc.w	r3, r9, r3
 8002558:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800255c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002568:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8002578:	4629      	mov	r1, r5
 800257a:	008b      	lsls	r3, r1, #2
 800257c:	4621      	mov	r1, r4
 800257e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002582:	4621      	mov	r1, r4
 8002584:	008a      	lsls	r2, r1, #2
 8002586:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800258a:	f7fd fe79 	bl	8000280 <__aeabi_uldivmod>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <UART_SetConfig+0x770>)
 8002594:	fba3 2302 	umull	r2, r3, r3, r2
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	011c      	lsls	r4, r3, #4
 800259c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80025a6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80025aa:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80025ae:	4642      	mov	r2, r8
 80025b0:	464b      	mov	r3, r9
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	6439      	str	r1, [r7, #64]	@ 0x40
 80025b6:	415b      	adcs	r3, r3
 80025b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025be:	4641      	mov	r1, r8
 80025c0:	1851      	adds	r1, r2, r1
 80025c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025c4:	4649      	mov	r1, r9
 80025c6:	414b      	adcs	r3, r1
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80025d6:	4659      	mov	r1, fp
 80025d8:	00cb      	lsls	r3, r1, #3
 80025da:	4651      	mov	r1, sl
 80025dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e0:	4651      	mov	r1, sl
 80025e2:	00ca      	lsls	r2, r1, #3
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	4642      	mov	r2, r8
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80025f2:	464b      	mov	r3, r9
 80025f4:	460a      	mov	r2, r1
 80025f6:	eb42 0303 	adc.w	r3, r2, r3
 80025fa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80025fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800260a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800261a:	4649      	mov	r1, r9
 800261c:	008b      	lsls	r3, r1, #2
 800261e:	4641      	mov	r1, r8
 8002620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002624:	4641      	mov	r1, r8
 8002626:	008a      	lsls	r2, r1, #2
 8002628:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800262c:	f7fd fe28 	bl	8000280 <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4611      	mov	r1, r2
 8002636:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <UART_SetConfig+0x770>)
 8002638:	fba3 2301 	umull	r2, r3, r3, r1
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	2264      	movs	r2, #100	@ 0x64
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	1acb      	subs	r3, r1, r3
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	3332      	adds	r3, #50	@ 0x32
 800264a:	4a36      	ldr	r2, [pc, #216]	@ (8002724 <UART_SetConfig+0x770>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002656:	441c      	add	r4, r3
 8002658:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800265c:	2200      	movs	r2, #0
 800265e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002662:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8002666:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 800266a:	4642      	mov	r2, r8
 800266c:	464b      	mov	r3, r9
 800266e:	1891      	adds	r1, r2, r2
 8002670:	6339      	str	r1, [r7, #48]	@ 0x30
 8002672:	415b      	adcs	r3, r3
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
 8002676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800267a:	4641      	mov	r1, r8
 800267c:	1851      	adds	r1, r2, r1
 800267e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002680:	4649      	mov	r1, r9
 8002682:	414b      	adcs	r3, r1
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8002692:	4659      	mov	r1, fp
 8002694:	00cb      	lsls	r3, r1, #3
 8002696:	4651      	mov	r1, sl
 8002698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269c:	4651      	mov	r1, sl
 800269e:	00ca      	lsls	r2, r1, #3
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	4642      	mov	r2, r8
 80026a8:	189b      	adds	r3, r3, r2
 80026aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80026ae:	464b      	mov	r3, r9
 80026b0:	460a      	mov	r2, r1
 80026b2:	eb42 0303 	adc.w	r3, r2, r3
 80026b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80026ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026c6:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80026d6:	4649      	mov	r1, r9
 80026d8:	008b      	lsls	r3, r1, #2
 80026da:	4641      	mov	r1, r8
 80026dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e0:	4641      	mov	r1, r8
 80026e2:	008a      	lsls	r2, r1, #2
 80026e4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80026e8:	f7fd fdca 	bl	8000280 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <UART_SetConfig+0x770>)
 80026f2:	fba3 1302 	umull	r1, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2164      	movs	r1, #100	@ 0x64
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	3332      	adds	r3, #50	@ 0x32
 8002704:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <UART_SetConfig+0x770>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4422      	add	r2, r4
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e112      	b.n	8002942 <UART_SetConfig+0x98e>
 800271c:	40011000 	.word	0x40011000
 8002720:	40011400 	.word	0x40011400
 8002724:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8002728:	f7ff fae2 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 800272c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002730:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002734:	2200      	movs	r2, #0
 8002736:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800273a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800273e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8002742:	4642      	mov	r2, r8
 8002744:	464b      	mov	r3, r9
 8002746:	1891      	adds	r1, r2, r2
 8002748:	6239      	str	r1, [r7, #32]
 800274a:	415b      	adcs	r3, r3
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
 800274e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002752:	4641      	mov	r1, r8
 8002754:	1854      	adds	r4, r2, r1
 8002756:	4649      	mov	r1, r9
 8002758:	eb43 0501 	adc.w	r5, r3, r1
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	00eb      	lsls	r3, r5, #3
 8002766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276a:	00e2      	lsls	r2, r4, #3
 800276c:	4614      	mov	r4, r2
 800276e:	461d      	mov	r5, r3
 8002770:	4643      	mov	r3, r8
 8002772:	18e3      	adds	r3, r4, r3
 8002774:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002778:	464b      	mov	r3, r9
 800277a:	eb45 0303 	adc.w	r3, r5, r3
 800277e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002782:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800278e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800279e:	4629      	mov	r1, r5
 80027a0:	008b      	lsls	r3, r1, #2
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a8:	4621      	mov	r1, r4
 80027aa:	008a      	lsls	r2, r1, #2
 80027ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80027b0:	f7fd fd66 	bl	8000280 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4b65      	ldr	r3, [pc, #404]	@ (8002950 <UART_SetConfig+0x99c>)
 80027ba:	fba3 2302 	umull	r2, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	011c      	lsls	r4, r3, #4
 80027c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80027cc:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80027d0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80027d4:	4642      	mov	r2, r8
 80027d6:	464b      	mov	r3, r9
 80027d8:	1891      	adds	r1, r2, r2
 80027da:	61b9      	str	r1, [r7, #24]
 80027dc:	415b      	adcs	r3, r3
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e4:	4641      	mov	r1, r8
 80027e6:	1851      	adds	r1, r2, r1
 80027e8:	6139      	str	r1, [r7, #16]
 80027ea:	4649      	mov	r1, r9
 80027ec:	414b      	adcs	r3, r1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027fc:	4659      	mov	r1, fp
 80027fe:	00cb      	lsls	r3, r1, #3
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002806:	4651      	mov	r1, sl
 8002808:	00ca      	lsls	r2, r1, #3
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	4603      	mov	r3, r0
 8002810:	4642      	mov	r2, r8
 8002812:	189b      	adds	r3, r3, r2
 8002814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002818:	464b      	mov	r3, r9
 800281a:	460a      	mov	r2, r1
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002824:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002830:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8002840:	4649      	mov	r1, r9
 8002842:	008b      	lsls	r3, r1, #2
 8002844:	4641      	mov	r1, r8
 8002846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284a:	4641      	mov	r1, r8
 800284c:	008a      	lsls	r2, r1, #2
 800284e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002852:	f7fd fd15 	bl	8000280 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4611      	mov	r1, r2
 800285c:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <UART_SetConfig+0x99c>)
 800285e:	fba3 2301 	umull	r2, r3, r3, r1
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2264      	movs	r2, #100	@ 0x64
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	1acb      	subs	r3, r1, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	@ 0x32
 8002870:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <UART_SetConfig+0x99c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800287c:	441c      	add	r4, r3
 800287e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002888:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800288c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	415b      	adcs	r3, r3
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80028fc:	4649      	mov	r1, r9
 80028fe:	008b      	lsls	r3, r1, #2
 8002900:	4641      	mov	r1, r8
 8002902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002906:	4641      	mov	r1, r8
 8002908:	008a      	lsls	r2, r1, #2
 800290a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800290e:	f7fd fcb7 	bl	8000280 <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <UART_SetConfig+0x99c>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	@ 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	3332      	adds	r3, #50	@ 0x32
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <UART_SetConfig+0x99c>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4422      	add	r2, r4
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	e7ff      	b.n	8002942 <UART_SetConfig+0x98e>
 8002942:	bf00      	nop
 8002944:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	51eb851f 	.word	0x51eb851f

08002954 <adc_pa0pa4_dma_init>:
	hadc1.DMA_Handle = &hdma_adc1;
}


void adc_pa0pa4_dma_init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	@ 0x30
 8002958:	af00      	add	r7, sp, #0
	//Configure pa0 and pa4 as analog pin

	GPIO_InitTypeDef 		GPIO_InitStruct = {0};
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef 	sConfig 		= {0};
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	4a52      	ldr	r2, [pc, #328]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6313      	str	r3, [r2, #48]	@ 0x30
 8002988:	4b50      	ldr	r3, [pc, #320]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin 		= GPIO_PIN_0 | GPIO_PIN_4;
 8002994:	2311      	movs	r3, #17
 8002996:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_ANALOG;
 8002998:	2303      	movs	r3, #3
 800299a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull		= GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	484a      	ldr	r0, [pc, #296]	@ (8002ad0 <adc_pa0pa4_dma_init+0x17c>)
 80029a8:	f7ff f812 	bl	80019d0 <HAL_GPIO_Init>


	//Configure adc module for continuous conversion

	__HAL_RCC_ADC1_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	4b46      	ldr	r3, [pc, #280]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	4a45      	ldr	r2, [pc, #276]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80029bc:	4b43      	ldr	r3, [pc, #268]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance 						= ADC1;
 80029c8:	4b42      	ldr	r3, [pc, #264]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029ca:	4a43      	ldr	r2, [pc, #268]	@ (8002ad8 <adc_pa0pa4_dma_init+0x184>)
 80029cc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler 			= ADC_CLOCK_SYNC_PCLK_DIV2;
 80029ce:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution				= ADC_RESOLUTION_12B;
 80029d4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode		= ENABLE;
 80029da:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029dc:	2201      	movs	r2, #1
 80029de:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ScanConvMode				= ENABLE;
 80029e0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
	hadc1.Init.DiscontinuousConvMode	= DISABLE;
 80029e6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ee:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv			= ADC_SOFTWARE_START;
 80029f4:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029f6:	4a39      	ldr	r2, [pc, #228]	@ (8002adc <adc_pa0pa4_dma_init+0x188>)
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 80029fa:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion			= 2;
 8002a00:	4b34      	ldr	r3, [pc, #208]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a02:	2202      	movs	r2, #2
 8002a04:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests	= ENABLE;
 8002a06:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection				= ADC_EOC_SINGLE_CONV;
 8002a0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8002a14:	482f      	ldr	r0, [pc, #188]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a16:	f7fd fe25 	bl	8000664 <HAL_ADC_Init>

	sConfig.Channel		 = ADC_CHANNEL_0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank   		 = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a22:	2307      	movs	r3, #7
 8002a24:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4829      	ldr	r0, [pc, #164]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a2e:	f7fe f8a3 	bl	8000b78 <HAL_ADC_ConfigChannel>

	sConfig.Channel		 = ADC_CHANNEL_4;
 8002a32:	2304      	movs	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
	sConfig.Rank   		 = 2;
 8002a36:	2302      	movs	r3, #2
 8002a38:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4824      	ldr	r0, [pc, #144]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002a42:	f7fe f899 	bl	8000b78 <HAL_ADC_ConfigChannel>





	__HAL_RCC_DMA2_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 8002a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <adc_pa0pa4_dma_init+0x178>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2038      	movs	r0, #56	@ 0x38
 8002a68:	f7fe fc0b 	bl	8001282 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a6c:	2038      	movs	r0, #56	@ 0x38
 8002a6e:	f7fe fc24 	bl	80012ba <HAL_NVIC_EnableIRQ>


	hdma_adc1.Instance 					= DMA2_Stream0;
 8002a72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <adc_pa0pa4_dma_init+0x190>)
 8002a76:	601a      	str	r2, [r3, #0]
	hdma_adc1.Init.Channel 				= DMA_CHANNEL_0;
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
	hdma_adc1.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
	hdma_adc1.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002a84:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
	hdma_adc1.Init.MemInc 				= DMA_MINC_ENABLE;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a90:	611a      	str	r2, [r3, #16]
	hdma_adc1.Init.PeriphDataAlignment  = DMA_PDATAALIGN_WORD;
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a98:	615a      	str	r2, [r3, #20]
	hdma_adc1.Init.MemDataAlignment 	= DMA_MDATAALIGN_WORD;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002a9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aa0:	619a      	str	r2, [r3, #24]
	hdma_adc1.Init.Mode 				= DMA_CIRCULAR;
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aa8:	61da      	str	r2, [r3, #28]
	hdma_adc1.Init.Priority 			= DMA_PRIORITY_LOW;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
	hdma_adc1.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_DMA_Init(&hdma_adc1);
 8002ab6:	480a      	ldr	r0, [pc, #40]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002ab8:	f7fe fc1a 	bl	80012f0 <HAL_DMA_Init>

	//Link adc to dma
	hadc1.DMA_Handle = &hdma_adc1;
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <adc_pa0pa4_dma_init+0x180>)
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <adc_pa0pa4_dma_init+0x18c>)
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ac2:	bf00      	nop
 8002ac4:	3730      	adds	r7, #48	@ 0x30
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	200000e8 	.word	0x200000e8
 8002ad8:	40012000 	.word	0x40012000
 8002adc:	0f000001 	.word	0x0f000001
 8002ae0:	20000088 	.word	0x20000088
 8002ae4:	40026410 	.word	0x40026410

08002ae8 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 8002aec:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <DMA2_Stream0_IRQHandler+0x10>)
 8002aee:	f7fe fd05 	bl	80014fc <HAL_DMA_IRQHandler>
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000088 	.word	0x20000088

08002afc <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <ADC_IRQHandler+0x10>)
 8002b02:	f7fd fdfc 	bl	80006fe <HAL_ADC_IRQHandler>
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200000e8 	.word	0x200000e8

08002b10 <main>:


uint32_t sensor_value[2];

int main()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8002b14:	f7fd fd2c 	bl	8000570 <HAL_Init>
	uart_init() ;
 8002b18:	f000 f8da 	bl	8002cd0 <uart_init>
	adc_pa0pa4_dma_init();
 8002b1c:	f7ff ff1a 	bl	8002954 <adc_pa0pa4_dma_init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)sensor_value, 2);
 8002b20:	2202      	movs	r2, #2
 8002b22:	4909      	ldr	r1, [pc, #36]	@ (8002b48 <main+0x38>)
 8002b24:	4809      	ldr	r0, [pc, #36]	@ (8002b4c <main+0x3c>)
 8002b26:	f7fd ff2b 	bl	8000980 <HAL_ADC_Start_DMA>


	while(1)
	{

		printf("Sensor 1 Data : %d \n\r", (int)sensor_value[0]);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <main+0x38>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <main+0x40>)
 8002b32:	f000 fa19 	bl	8002f68 <iprintf>
		printf("Sensor 2 Data : %d \n\r", (int)sensor_value[1]);
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <main+0x38>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <main+0x44>)
 8002b3e:	f000 fa13 	bl	8002f68 <iprintf>
		printf("Sensor 1 Data : %d \n\r", (int)sensor_value[0]);
 8002b42:	bf00      	nop
 8002b44:	e7f1      	b.n	8002b2a <main+0x1a>
 8002b46:	bf00      	nop
 8002b48:	20000130 	.word	0x20000130
 8002b4c:	200000e8 	.word	0x200000e8
 8002b50:	08003c5c 	.word	0x08003c5c
 8002b54:	08003c74 	.word	0x08003c74

08002b58 <SysTick_Handler>:




void SysTick_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 8002b5c:	f7fd fd62 	bl	8000624 <HAL_IncTick>
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e00a      	b.n	8002b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b76:	f3af 8000 	nop.w
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60ba      	str	r2, [r7, #8]
 8002b82:	b2ca      	uxtb	r2, r1
 8002b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbf0      	blt.n	8002b76 <_read+0x12>
  }

  return len;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e009      	b.n	8002bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f877 	bl	8002cac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf1      	blt.n	8002bb0 <_write+0x12>
  }
  return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_close>:

int _close(int file)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_isatty>:

int _isatty(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c48:	4a14      	ldr	r2, [pc, #80]	@ (8002c9c <_sbrk+0x5c>)
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <_sbrk+0x60>)
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <_sbrk+0x64>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <_sbrk+0x68>)
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c70:	f000 fa1e 	bl	80030b0 <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	220c      	movs	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e009      	b.n	8002c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <_sbrk+0x64>)
 8002c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20018000 	.word	0x20018000
 8002ca0:	00000400 	.word	0x00000400
 8002ca4:	20000138 	.word	0x20000138
 8002ca8:	200002c8 	.word	0x200002c8

08002cac <__io_putchar>:
UART_HandleTypeDef huart2 ;



int __io_putchar(int ch)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 8002cb4:	1d39      	adds	r1, r7, #4
 8002cb6:	230a      	movs	r3, #10
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4804      	ldr	r0, [pc, #16]	@ (8002ccc <__io_putchar+0x20>)
 8002cbc:	f7ff f897 	bl	8001dee <HAL_UART_Transmit>
	return ch ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000013c 	.word	0x2000013c

08002cd0 <uart_init>:

void uart_init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <uart_init+0xb0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <uart_init+0xb0>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <uart_init+0xb0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <uart_init+0xb0>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <uart_init+0xb0>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <uart_init+0xb0>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 8002d1e:	230c      	movs	r3, #12
 8002d20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8002d22:	2302      	movs	r3, #2
 8002d24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 8002d26:	2307      	movs	r3, #7
 8002d28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	4619      	mov	r1, r3
 8002d38:	4812      	ldr	r0, [pc, #72]	@ (8002d84 <uart_init+0xb4>)
 8002d3a:	f7fe fe49 	bl	80019d0 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 8002d3e:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <uart_init+0xb8>)
 8002d40:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <uart_init+0xbc>)
 8002d42:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 8002d44:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <uart_init+0xb8>)
 8002d46:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d4a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <uart_init+0xb8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <uart_init+0xb8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <uart_init+0xb8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <uart_init+0xb8>)
 8002d60:	2208      	movs	r2, #8
 8002d62:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <uart_init+0xb8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <uart_init+0xb8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 8002d70:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <uart_init+0xb8>)
 8002d72:	f7fe ffe5 	bl	8001d40 <HAL_UART_Init>




}
 8002d76:	bf00      	nop
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	2000013c 	.word	0x2000013c
 8002d8c:	40004400 	.word	0x40004400

08002d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d90:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d98:	480c      	ldr	r0, [pc, #48]	@ (8002dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9a:	490d      	ldr	r1, [pc, #52]	@ (8002dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd4 <LoopForever+0xe>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ddc <LoopForever+0x16>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dbe:	f000 f97d 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dc2:	f7ff fea5 	bl	8002b10 <main>

08002dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8002dc6:	e7fe      	b.n	8002dc6 <LoopForever>
  ldr   r0, =_estack
 8002dc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002dd4:	08003ce0 	.word	0x08003ce0
  ldr r2, =_sbss
 8002dd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002ddc:	200002c8 	.word	0x200002c8

08002de0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <BusFault_Handler>
	...

08002de4 <std>:
 8002de4:	2300      	movs	r3, #0
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
 8002dea:	e9c0 3300 	strd	r3, r3, [r0]
 8002dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002df2:	6083      	str	r3, [r0, #8]
 8002df4:	8181      	strh	r1, [r0, #12]
 8002df6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002df8:	81c2      	strh	r2, [r0, #14]
 8002dfa:	6183      	str	r3, [r0, #24]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	2208      	movs	r2, #8
 8002e00:	305c      	adds	r0, #92	@ 0x5c
 8002e02:	f000 f906 	bl	8003012 <memset>
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <std+0x58>)
 8002e08:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <std+0x5c>)
 8002e0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <std+0x60>)
 8002e10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <std+0x64>)
 8002e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <std+0x68>)
 8002e18:	6224      	str	r4, [r4, #32]
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	d006      	beq.n	8002e2c <std+0x48>
 8002e1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e22:	4294      	cmp	r4, r2
 8002e24:	d002      	beq.n	8002e2c <std+0x48>
 8002e26:	33d0      	adds	r3, #208	@ 0xd0
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	d105      	bne.n	8002e38 <std+0x54>
 8002e2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e34:	f000 b966 	b.w	8003104 <__retarget_lock_init_recursive>
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	08002f8d 	.word	0x08002f8d
 8002e40:	08002faf 	.word	0x08002faf
 8002e44:	08002fe7 	.word	0x08002fe7
 8002e48:	0800300b 	.word	0x0800300b
 8002e4c:	2000017c 	.word	0x2000017c

08002e50 <stdio_exit_handler>:
 8002e50:	4a02      	ldr	r2, [pc, #8]	@ (8002e5c <stdio_exit_handler+0xc>)
 8002e52:	4903      	ldr	r1, [pc, #12]	@ (8002e60 <stdio_exit_handler+0x10>)
 8002e54:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <stdio_exit_handler+0x14>)
 8002e56:	f000 b869 	b.w	8002f2c <_fwalk_sglue>
 8002e5a:	bf00      	nop
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	080039a5 	.word	0x080039a5
 8002e64:	2000001c 	.word	0x2000001c

08002e68 <cleanup_stdio>:
 8002e68:	6841      	ldr	r1, [r0, #4]
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <cleanup_stdio+0x34>)
 8002e6c:	4299      	cmp	r1, r3
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	4604      	mov	r4, r0
 8002e72:	d001      	beq.n	8002e78 <cleanup_stdio+0x10>
 8002e74:	f000 fd96 	bl	80039a4 <_fflush_r>
 8002e78:	68a1      	ldr	r1, [r4, #8]
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <cleanup_stdio+0x38>)
 8002e7c:	4299      	cmp	r1, r3
 8002e7e:	d002      	beq.n	8002e86 <cleanup_stdio+0x1e>
 8002e80:	4620      	mov	r0, r4
 8002e82:	f000 fd8f 	bl	80039a4 <_fflush_r>
 8002e86:	68e1      	ldr	r1, [r4, #12]
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <cleanup_stdio+0x3c>)
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	d004      	beq.n	8002e98 <cleanup_stdio+0x30>
 8002e8e:	4620      	mov	r0, r4
 8002e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e94:	f000 bd86 	b.w	80039a4 <_fflush_r>
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000017c 	.word	0x2000017c
 8002ea0:	200001e4 	.word	0x200001e4
 8002ea4:	2000024c 	.word	0x2000024c

08002ea8 <global_stdio_init.part.0>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <global_stdio_init.part.0+0x30>)
 8002eac:	4c0b      	ldr	r4, [pc, #44]	@ (8002edc <global_stdio_init.part.0+0x34>)
 8002eae:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <global_stdio_init.part.0+0x38>)
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	f7ff ff94 	bl	8002de4 <std>
 8002ebc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2109      	movs	r1, #9
 8002ec4:	f7ff ff8e 	bl	8002de4 <std>
 8002ec8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ecc:	2202      	movs	r2, #2
 8002ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed2:	2112      	movs	r1, #18
 8002ed4:	f7ff bf86 	b.w	8002de4 <std>
 8002ed8:	200002b4 	.word	0x200002b4
 8002edc:	2000017c 	.word	0x2000017c
 8002ee0:	08002e51 	.word	0x08002e51

08002ee4 <__sfp_lock_acquire>:
 8002ee4:	4801      	ldr	r0, [pc, #4]	@ (8002eec <__sfp_lock_acquire+0x8>)
 8002ee6:	f000 b90e 	b.w	8003106 <__retarget_lock_acquire_recursive>
 8002eea:	bf00      	nop
 8002eec:	200002bd 	.word	0x200002bd

08002ef0 <__sfp_lock_release>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	@ (8002ef8 <__sfp_lock_release+0x8>)
 8002ef2:	f000 b909 	b.w	8003108 <__retarget_lock_release_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	200002bd 	.word	0x200002bd

08002efc <__sinit>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	f7ff fff0 	bl	8002ee4 <__sfp_lock_acquire>
 8002f04:	6a23      	ldr	r3, [r4, #32]
 8002f06:	b11b      	cbz	r3, 8002f10 <__sinit+0x14>
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f0c:	f7ff bff0 	b.w	8002ef0 <__sfp_lock_release>
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__sinit+0x28>)
 8002f12:	6223      	str	r3, [r4, #32]
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <__sinit+0x2c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f5      	bne.n	8002f08 <__sinit+0xc>
 8002f1c:	f7ff ffc4 	bl	8002ea8 <global_stdio_init.part.0>
 8002f20:	e7f2      	b.n	8002f08 <__sinit+0xc>
 8002f22:	bf00      	nop
 8002f24:	08002e69 	.word	0x08002e69
 8002f28:	200002b4 	.word	0x200002b4

08002f2c <_fwalk_sglue>:
 8002f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f30:	4607      	mov	r7, r0
 8002f32:	4688      	mov	r8, r1
 8002f34:	4614      	mov	r4, r2
 8002f36:	2600      	movs	r6, #0
 8002f38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f3c:	f1b9 0901 	subs.w	r9, r9, #1
 8002f40:	d505      	bpl.n	8002f4e <_fwalk_sglue+0x22>
 8002f42:	6824      	ldr	r4, [r4, #0]
 8002f44:	2c00      	cmp	r4, #0
 8002f46:	d1f7      	bne.n	8002f38 <_fwalk_sglue+0xc>
 8002f48:	4630      	mov	r0, r6
 8002f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f4e:	89ab      	ldrh	r3, [r5, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d907      	bls.n	8002f64 <_fwalk_sglue+0x38>
 8002f54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	d003      	beq.n	8002f64 <_fwalk_sglue+0x38>
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	4638      	mov	r0, r7
 8002f60:	47c0      	blx	r8
 8002f62:	4306      	orrs	r6, r0
 8002f64:	3568      	adds	r5, #104	@ 0x68
 8002f66:	e7e9      	b.n	8002f3c <_fwalk_sglue+0x10>

08002f68 <iprintf>:
 8002f68:	b40f      	push	{r0, r1, r2, r3}
 8002f6a:	b507      	push	{r0, r1, r2, lr}
 8002f6c:	4906      	ldr	r1, [pc, #24]	@ (8002f88 <iprintf+0x20>)
 8002f6e:	ab04      	add	r3, sp, #16
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f76:	6881      	ldr	r1, [r0, #8]
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	f000 f9e9 	bl	8003350 <_vfiprintf_r>
 8002f7e:	b003      	add	sp, #12
 8002f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f84:	b004      	add	sp, #16
 8002f86:	4770      	bx	lr
 8002f88:	20000018 	.word	0x20000018

08002f8c <__sread>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	460c      	mov	r4, r1
 8002f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f94:	f000 f868 	bl	8003068 <_read_r>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	bfab      	itete	ge
 8002f9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8002fa0:	181b      	addge	r3, r3, r0
 8002fa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fa6:	bfac      	ite	ge
 8002fa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002faa:	81a3      	strhlt	r3, [r4, #12]
 8002fac:	bd10      	pop	{r4, pc}

08002fae <__swrite>:
 8002fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb2:	461f      	mov	r7, r3
 8002fb4:	898b      	ldrh	r3, [r1, #12]
 8002fb6:	05db      	lsls	r3, r3, #23
 8002fb8:	4605      	mov	r5, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	4616      	mov	r6, r2
 8002fbe:	d505      	bpl.n	8002fcc <__swrite+0x1e>
 8002fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f000 f83c 	bl	8003044 <_lseek_r>
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	4632      	mov	r2, r6
 8002fda:	463b      	mov	r3, r7
 8002fdc:	4628      	mov	r0, r5
 8002fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	f000 b853 	b.w	800308c <_write_r>

08002fe6 <__sseek>:
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	460c      	mov	r4, r1
 8002fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fee:	f000 f829 	bl	8003044 <_lseek_r>
 8002ff2:	1c43      	adds	r3, r0, #1
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	bf15      	itete	ne
 8002ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003002:	81a3      	strheq	r3, [r4, #12]
 8003004:	bf18      	it	ne
 8003006:	81a3      	strhne	r3, [r4, #12]
 8003008:	bd10      	pop	{r4, pc}

0800300a <__sclose>:
 800300a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300e:	f000 b809 	b.w	8003024 <_close_r>

08003012 <memset>:
 8003012:	4402      	add	r2, r0
 8003014:	4603      	mov	r3, r0
 8003016:	4293      	cmp	r3, r2
 8003018:	d100      	bne.n	800301c <memset+0xa>
 800301a:	4770      	bx	lr
 800301c:	f803 1b01 	strb.w	r1, [r3], #1
 8003020:	e7f9      	b.n	8003016 <memset+0x4>
	...

08003024 <_close_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4d06      	ldr	r5, [pc, #24]	@ (8003040 <_close_r+0x1c>)
 8003028:	2300      	movs	r3, #0
 800302a:	4604      	mov	r4, r0
 800302c:	4608      	mov	r0, r1
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	f7ff fdd1 	bl	8002bd6 <_close>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_close_r+0x1a>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_close_r+0x1a>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	200002b8 	.word	0x200002b8

08003044 <_lseek_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d07      	ldr	r5, [pc, #28]	@ (8003064 <_lseek_r+0x20>)
 8003048:	4604      	mov	r4, r0
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	2200      	movs	r2, #0
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7ff fde6 	bl	8002c24 <_lseek>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_lseek_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_lseek_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	200002b8 	.word	0x200002b8

08003068 <_read_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d07      	ldr	r5, [pc, #28]	@ (8003088 <_read_r+0x20>)
 800306c:	4604      	mov	r4, r0
 800306e:	4608      	mov	r0, r1
 8003070:	4611      	mov	r1, r2
 8003072:	2200      	movs	r2, #0
 8003074:	602a      	str	r2, [r5, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f7ff fd74 	bl	8002b64 <_read>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_read_r+0x1e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_read_r+0x1e>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	200002b8 	.word	0x200002b8

0800308c <_write_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d07      	ldr	r5, [pc, #28]	@ (80030ac <_write_r+0x20>)
 8003090:	4604      	mov	r4, r0
 8003092:	4608      	mov	r0, r1
 8003094:	4611      	mov	r1, r2
 8003096:	2200      	movs	r2, #0
 8003098:	602a      	str	r2, [r5, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f7ff fd7f 	bl	8002b9e <_write>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_write_r+0x1e>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_write_r+0x1e>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	200002b8 	.word	0x200002b8

080030b0 <__errno>:
 80030b0:	4b01      	ldr	r3, [pc, #4]	@ (80030b8 <__errno+0x8>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000018 	.word	0x20000018

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	@ (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	@ (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	@ (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 fdb8 	bl	8003c44 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	08003cd8 	.word	0x08003cd8
 80030f8:	08003cd8 	.word	0x08003cd8
 80030fc:	08003cd8 	.word	0x08003cd8
 8003100:	08003cdc 	.word	0x08003cdc

08003104 <__retarget_lock_init_recursive>:
 8003104:	4770      	bx	lr

08003106 <__retarget_lock_acquire_recursive>:
 8003106:	4770      	bx	lr

08003108 <__retarget_lock_release_recursive>:
 8003108:	4770      	bx	lr
	...

0800310c <_free_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4605      	mov	r5, r0
 8003110:	2900      	cmp	r1, #0
 8003112:	d041      	beq.n	8003198 <_free_r+0x8c>
 8003114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003118:	1f0c      	subs	r4, r1, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	bfb8      	it	lt
 800311e:	18e4      	addlt	r4, r4, r3
 8003120:	f000 f8e0 	bl	80032e4 <__malloc_lock>
 8003124:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <_free_r+0x90>)
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	b933      	cbnz	r3, 8003138 <_free_r+0x2c>
 800312a:	6063      	str	r3, [r4, #4]
 800312c:	6014      	str	r4, [r2, #0]
 800312e:	4628      	mov	r0, r5
 8003130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003134:	f000 b8dc 	b.w	80032f0 <__malloc_unlock>
 8003138:	42a3      	cmp	r3, r4
 800313a:	d908      	bls.n	800314e <_free_r+0x42>
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	1821      	adds	r1, r4, r0
 8003140:	428b      	cmp	r3, r1
 8003142:	bf01      	itttt	eq
 8003144:	6819      	ldreq	r1, [r3, #0]
 8003146:	685b      	ldreq	r3, [r3, #4]
 8003148:	1809      	addeq	r1, r1, r0
 800314a:	6021      	streq	r1, [r4, #0]
 800314c:	e7ed      	b.n	800312a <_free_r+0x1e>
 800314e:	461a      	mov	r2, r3
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	b10b      	cbz	r3, 8003158 <_free_r+0x4c>
 8003154:	42a3      	cmp	r3, r4
 8003156:	d9fa      	bls.n	800314e <_free_r+0x42>
 8003158:	6811      	ldr	r1, [r2, #0]
 800315a:	1850      	adds	r0, r2, r1
 800315c:	42a0      	cmp	r0, r4
 800315e:	d10b      	bne.n	8003178 <_free_r+0x6c>
 8003160:	6820      	ldr	r0, [r4, #0]
 8003162:	4401      	add	r1, r0
 8003164:	1850      	adds	r0, r2, r1
 8003166:	4283      	cmp	r3, r0
 8003168:	6011      	str	r1, [r2, #0]
 800316a:	d1e0      	bne.n	800312e <_free_r+0x22>
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6053      	str	r3, [r2, #4]
 8003172:	4408      	add	r0, r1
 8003174:	6010      	str	r0, [r2, #0]
 8003176:	e7da      	b.n	800312e <_free_r+0x22>
 8003178:	d902      	bls.n	8003180 <_free_r+0x74>
 800317a:	230c      	movs	r3, #12
 800317c:	602b      	str	r3, [r5, #0]
 800317e:	e7d6      	b.n	800312e <_free_r+0x22>
 8003180:	6820      	ldr	r0, [r4, #0]
 8003182:	1821      	adds	r1, r4, r0
 8003184:	428b      	cmp	r3, r1
 8003186:	bf04      	itt	eq
 8003188:	6819      	ldreq	r1, [r3, #0]
 800318a:	685b      	ldreq	r3, [r3, #4]
 800318c:	6063      	str	r3, [r4, #4]
 800318e:	bf04      	itt	eq
 8003190:	1809      	addeq	r1, r1, r0
 8003192:	6021      	streq	r1, [r4, #0]
 8003194:	6054      	str	r4, [r2, #4]
 8003196:	e7ca      	b.n	800312e <_free_r+0x22>
 8003198:	bd38      	pop	{r3, r4, r5, pc}
 800319a:	bf00      	nop
 800319c:	200002c4 	.word	0x200002c4

080031a0 <sbrk_aligned>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4e0f      	ldr	r6, [pc, #60]	@ (80031e0 <sbrk_aligned+0x40>)
 80031a4:	460c      	mov	r4, r1
 80031a6:	6831      	ldr	r1, [r6, #0]
 80031a8:	4605      	mov	r5, r0
 80031aa:	b911      	cbnz	r1, 80031b2 <sbrk_aligned+0x12>
 80031ac:	f000 fcb6 	bl	8003b1c <_sbrk_r>
 80031b0:	6030      	str	r0, [r6, #0]
 80031b2:	4621      	mov	r1, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f000 fcb1 	bl	8003b1c <_sbrk_r>
 80031ba:	1c43      	adds	r3, r0, #1
 80031bc:	d103      	bne.n	80031c6 <sbrk_aligned+0x26>
 80031be:	f04f 34ff 	mov.w	r4, #4294967295
 80031c2:	4620      	mov	r0, r4
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	1cc4      	adds	r4, r0, #3
 80031c8:	f024 0403 	bic.w	r4, r4, #3
 80031cc:	42a0      	cmp	r0, r4
 80031ce:	d0f8      	beq.n	80031c2 <sbrk_aligned+0x22>
 80031d0:	1a21      	subs	r1, r4, r0
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 fca2 	bl	8003b1c <_sbrk_r>
 80031d8:	3001      	adds	r0, #1
 80031da:	d1f2      	bne.n	80031c2 <sbrk_aligned+0x22>
 80031dc:	e7ef      	b.n	80031be <sbrk_aligned+0x1e>
 80031de:	bf00      	nop
 80031e0:	200002c0 	.word	0x200002c0

080031e4 <_malloc_r>:
 80031e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e8:	1ccd      	adds	r5, r1, #3
 80031ea:	f025 0503 	bic.w	r5, r5, #3
 80031ee:	3508      	adds	r5, #8
 80031f0:	2d0c      	cmp	r5, #12
 80031f2:	bf38      	it	cc
 80031f4:	250c      	movcc	r5, #12
 80031f6:	2d00      	cmp	r5, #0
 80031f8:	4606      	mov	r6, r0
 80031fa:	db01      	blt.n	8003200 <_malloc_r+0x1c>
 80031fc:	42a9      	cmp	r1, r5
 80031fe:	d904      	bls.n	800320a <_malloc_r+0x26>
 8003200:	230c      	movs	r3, #12
 8003202:	6033      	str	r3, [r6, #0]
 8003204:	2000      	movs	r0, #0
 8003206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800320a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032e0 <_malloc_r+0xfc>
 800320e:	f000 f869 	bl	80032e4 <__malloc_lock>
 8003212:	f8d8 3000 	ldr.w	r3, [r8]
 8003216:	461c      	mov	r4, r3
 8003218:	bb44      	cbnz	r4, 800326c <_malloc_r+0x88>
 800321a:	4629      	mov	r1, r5
 800321c:	4630      	mov	r0, r6
 800321e:	f7ff ffbf 	bl	80031a0 <sbrk_aligned>
 8003222:	1c43      	adds	r3, r0, #1
 8003224:	4604      	mov	r4, r0
 8003226:	d158      	bne.n	80032da <_malloc_r+0xf6>
 8003228:	f8d8 4000 	ldr.w	r4, [r8]
 800322c:	4627      	mov	r7, r4
 800322e:	2f00      	cmp	r7, #0
 8003230:	d143      	bne.n	80032ba <_malloc_r+0xd6>
 8003232:	2c00      	cmp	r4, #0
 8003234:	d04b      	beq.n	80032ce <_malloc_r+0xea>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	4639      	mov	r1, r7
 800323a:	4630      	mov	r0, r6
 800323c:	eb04 0903 	add.w	r9, r4, r3
 8003240:	f000 fc6c 	bl	8003b1c <_sbrk_r>
 8003244:	4581      	cmp	r9, r0
 8003246:	d142      	bne.n	80032ce <_malloc_r+0xea>
 8003248:	6821      	ldr	r1, [r4, #0]
 800324a:	1a6d      	subs	r5, r5, r1
 800324c:	4629      	mov	r1, r5
 800324e:	4630      	mov	r0, r6
 8003250:	f7ff ffa6 	bl	80031a0 <sbrk_aligned>
 8003254:	3001      	adds	r0, #1
 8003256:	d03a      	beq.n	80032ce <_malloc_r+0xea>
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	442b      	add	r3, r5
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	f8d8 3000 	ldr.w	r3, [r8]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	bb62      	cbnz	r2, 80032c0 <_malloc_r+0xdc>
 8003266:	f8c8 7000 	str.w	r7, [r8]
 800326a:	e00f      	b.n	800328c <_malloc_r+0xa8>
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	1b52      	subs	r2, r2, r5
 8003270:	d420      	bmi.n	80032b4 <_malloc_r+0xd0>
 8003272:	2a0b      	cmp	r2, #11
 8003274:	d917      	bls.n	80032a6 <_malloc_r+0xc2>
 8003276:	1961      	adds	r1, r4, r5
 8003278:	42a3      	cmp	r3, r4
 800327a:	6025      	str	r5, [r4, #0]
 800327c:	bf18      	it	ne
 800327e:	6059      	strne	r1, [r3, #4]
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	bf08      	it	eq
 8003284:	f8c8 1000 	streq.w	r1, [r8]
 8003288:	5162      	str	r2, [r4, r5]
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	4630      	mov	r0, r6
 800328e:	f000 f82f 	bl	80032f0 <__malloc_unlock>
 8003292:	f104 000b 	add.w	r0, r4, #11
 8003296:	1d23      	adds	r3, r4, #4
 8003298:	f020 0007 	bic.w	r0, r0, #7
 800329c:	1ac2      	subs	r2, r0, r3
 800329e:	bf1c      	itt	ne
 80032a0:	1a1b      	subne	r3, r3, r0
 80032a2:	50a3      	strne	r3, [r4, r2]
 80032a4:	e7af      	b.n	8003206 <_malloc_r+0x22>
 80032a6:	6862      	ldr	r2, [r4, #4]
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	bf0c      	ite	eq
 80032ac:	f8c8 2000 	streq.w	r2, [r8]
 80032b0:	605a      	strne	r2, [r3, #4]
 80032b2:	e7eb      	b.n	800328c <_malloc_r+0xa8>
 80032b4:	4623      	mov	r3, r4
 80032b6:	6864      	ldr	r4, [r4, #4]
 80032b8:	e7ae      	b.n	8003218 <_malloc_r+0x34>
 80032ba:	463c      	mov	r4, r7
 80032bc:	687f      	ldr	r7, [r7, #4]
 80032be:	e7b6      	b.n	800322e <_malloc_r+0x4a>
 80032c0:	461a      	mov	r2, r3
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	42a3      	cmp	r3, r4
 80032c6:	d1fb      	bne.n	80032c0 <_malloc_r+0xdc>
 80032c8:	2300      	movs	r3, #0
 80032ca:	6053      	str	r3, [r2, #4]
 80032cc:	e7de      	b.n	800328c <_malloc_r+0xa8>
 80032ce:	230c      	movs	r3, #12
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	4630      	mov	r0, r6
 80032d4:	f000 f80c 	bl	80032f0 <__malloc_unlock>
 80032d8:	e794      	b.n	8003204 <_malloc_r+0x20>
 80032da:	6005      	str	r5, [r0, #0]
 80032dc:	e7d6      	b.n	800328c <_malloc_r+0xa8>
 80032de:	bf00      	nop
 80032e0:	200002c4 	.word	0x200002c4

080032e4 <__malloc_lock>:
 80032e4:	4801      	ldr	r0, [pc, #4]	@ (80032ec <__malloc_lock+0x8>)
 80032e6:	f7ff bf0e 	b.w	8003106 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	200002bc 	.word	0x200002bc

080032f0 <__malloc_unlock>:
 80032f0:	4801      	ldr	r0, [pc, #4]	@ (80032f8 <__malloc_unlock+0x8>)
 80032f2:	f7ff bf09 	b.w	8003108 <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	200002bc 	.word	0x200002bc

080032fc <__sfputc_r>:
 80032fc:	6893      	ldr	r3, [r2, #8]
 80032fe:	3b01      	subs	r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	b410      	push	{r4}
 8003304:	6093      	str	r3, [r2, #8]
 8003306:	da08      	bge.n	800331a <__sfputc_r+0x1e>
 8003308:	6994      	ldr	r4, [r2, #24]
 800330a:	42a3      	cmp	r3, r4
 800330c:	db01      	blt.n	8003312 <__sfputc_r+0x16>
 800330e:	290a      	cmp	r1, #10
 8003310:	d103      	bne.n	800331a <__sfputc_r+0x1e>
 8003312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003316:	f000 bb6d 	b.w	80039f4 <__swbuf_r>
 800331a:	6813      	ldr	r3, [r2, #0]
 800331c:	1c58      	adds	r0, r3, #1
 800331e:	6010      	str	r0, [r2, #0]
 8003320:	7019      	strb	r1, [r3, #0]
 8003322:	4608      	mov	r0, r1
 8003324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003328:	4770      	bx	lr

0800332a <__sfputs_r>:
 800332a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332c:	4606      	mov	r6, r0
 800332e:	460f      	mov	r7, r1
 8003330:	4614      	mov	r4, r2
 8003332:	18d5      	adds	r5, r2, r3
 8003334:	42ac      	cmp	r4, r5
 8003336:	d101      	bne.n	800333c <__sfputs_r+0x12>
 8003338:	2000      	movs	r0, #0
 800333a:	e007      	b.n	800334c <__sfputs_r+0x22>
 800333c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003340:	463a      	mov	r2, r7
 8003342:	4630      	mov	r0, r6
 8003344:	f7ff ffda 	bl	80032fc <__sfputc_r>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d1f3      	bne.n	8003334 <__sfputs_r+0xa>
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003350 <_vfiprintf_r>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	460d      	mov	r5, r1
 8003356:	b09d      	sub	sp, #116	@ 0x74
 8003358:	4614      	mov	r4, r2
 800335a:	4698      	mov	r8, r3
 800335c:	4606      	mov	r6, r0
 800335e:	b118      	cbz	r0, 8003368 <_vfiprintf_r+0x18>
 8003360:	6a03      	ldr	r3, [r0, #32]
 8003362:	b90b      	cbnz	r3, 8003368 <_vfiprintf_r+0x18>
 8003364:	f7ff fdca 	bl	8002efc <__sinit>
 8003368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800336a:	07d9      	lsls	r1, r3, #31
 800336c:	d405      	bmi.n	800337a <_vfiprintf_r+0x2a>
 800336e:	89ab      	ldrh	r3, [r5, #12]
 8003370:	059a      	lsls	r2, r3, #22
 8003372:	d402      	bmi.n	800337a <_vfiprintf_r+0x2a>
 8003374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003376:	f7ff fec6 	bl	8003106 <__retarget_lock_acquire_recursive>
 800337a:	89ab      	ldrh	r3, [r5, #12]
 800337c:	071b      	lsls	r3, r3, #28
 800337e:	d501      	bpl.n	8003384 <_vfiprintf_r+0x34>
 8003380:	692b      	ldr	r3, [r5, #16]
 8003382:	b99b      	cbnz	r3, 80033ac <_vfiprintf_r+0x5c>
 8003384:	4629      	mov	r1, r5
 8003386:	4630      	mov	r0, r6
 8003388:	f000 fb72 	bl	8003a70 <__swsetup_r>
 800338c:	b170      	cbz	r0, 80033ac <_vfiprintf_r+0x5c>
 800338e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003390:	07dc      	lsls	r4, r3, #31
 8003392:	d504      	bpl.n	800339e <_vfiprintf_r+0x4e>
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	b01d      	add	sp, #116	@ 0x74
 800339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339e:	89ab      	ldrh	r3, [r5, #12]
 80033a0:	0598      	lsls	r0, r3, #22
 80033a2:	d4f7      	bmi.n	8003394 <_vfiprintf_r+0x44>
 80033a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033a6:	f7ff feaf 	bl	8003108 <__retarget_lock_release_recursive>
 80033aa:	e7f3      	b.n	8003394 <_vfiprintf_r+0x44>
 80033ac:	2300      	movs	r3, #0
 80033ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80033b0:	2320      	movs	r3, #32
 80033b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ba:	2330      	movs	r3, #48	@ 0x30
 80033bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800356c <_vfiprintf_r+0x21c>
 80033c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033c4:	f04f 0901 	mov.w	r9, #1
 80033c8:	4623      	mov	r3, r4
 80033ca:	469a      	mov	sl, r3
 80033cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033d0:	b10a      	cbz	r2, 80033d6 <_vfiprintf_r+0x86>
 80033d2:	2a25      	cmp	r2, #37	@ 0x25
 80033d4:	d1f9      	bne.n	80033ca <_vfiprintf_r+0x7a>
 80033d6:	ebba 0b04 	subs.w	fp, sl, r4
 80033da:	d00b      	beq.n	80033f4 <_vfiprintf_r+0xa4>
 80033dc:	465b      	mov	r3, fp
 80033de:	4622      	mov	r2, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7ff ffa1 	bl	800332a <__sfputs_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	f000 80a7 	beq.w	800353c <_vfiprintf_r+0x1ec>
 80033ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033f0:	445a      	add	r2, fp
 80033f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80033f4:	f89a 3000 	ldrb.w	r3, [sl]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 809f 	beq.w	800353c <_vfiprintf_r+0x1ec>
 80033fe:	2300      	movs	r3, #0
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003408:	f10a 0a01 	add.w	sl, sl, #1
 800340c:	9304      	str	r3, [sp, #16]
 800340e:	9307      	str	r3, [sp, #28]
 8003410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003414:	931a      	str	r3, [sp, #104]	@ 0x68
 8003416:	4654      	mov	r4, sl
 8003418:	2205      	movs	r2, #5
 800341a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800341e:	4853      	ldr	r0, [pc, #332]	@ (800356c <_vfiprintf_r+0x21c>)
 8003420:	f7fc fede 	bl	80001e0 <memchr>
 8003424:	9a04      	ldr	r2, [sp, #16]
 8003426:	b9d8      	cbnz	r0, 8003460 <_vfiprintf_r+0x110>
 8003428:	06d1      	lsls	r1, r2, #27
 800342a:	bf44      	itt	mi
 800342c:	2320      	movmi	r3, #32
 800342e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003432:	0713      	lsls	r3, r2, #28
 8003434:	bf44      	itt	mi
 8003436:	232b      	movmi	r3, #43	@ 0x2b
 8003438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800343c:	f89a 3000 	ldrb.w	r3, [sl]
 8003440:	2b2a      	cmp	r3, #42	@ 0x2a
 8003442:	d015      	beq.n	8003470 <_vfiprintf_r+0x120>
 8003444:	9a07      	ldr	r2, [sp, #28]
 8003446:	4654      	mov	r4, sl
 8003448:	2000      	movs	r0, #0
 800344a:	f04f 0c0a 	mov.w	ip, #10
 800344e:	4621      	mov	r1, r4
 8003450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003454:	3b30      	subs	r3, #48	@ 0x30
 8003456:	2b09      	cmp	r3, #9
 8003458:	d94b      	bls.n	80034f2 <_vfiprintf_r+0x1a2>
 800345a:	b1b0      	cbz	r0, 800348a <_vfiprintf_r+0x13a>
 800345c:	9207      	str	r2, [sp, #28]
 800345e:	e014      	b.n	800348a <_vfiprintf_r+0x13a>
 8003460:	eba0 0308 	sub.w	r3, r0, r8
 8003464:	fa09 f303 	lsl.w	r3, r9, r3
 8003468:	4313      	orrs	r3, r2
 800346a:	9304      	str	r3, [sp, #16]
 800346c:	46a2      	mov	sl, r4
 800346e:	e7d2      	b.n	8003416 <_vfiprintf_r+0xc6>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	1d19      	adds	r1, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	9103      	str	r1, [sp, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	bfbb      	ittet	lt
 800347c:	425b      	neglt	r3, r3
 800347e:	f042 0202 	orrlt.w	r2, r2, #2
 8003482:	9307      	strge	r3, [sp, #28]
 8003484:	9307      	strlt	r3, [sp, #28]
 8003486:	bfb8      	it	lt
 8003488:	9204      	strlt	r2, [sp, #16]
 800348a:	7823      	ldrb	r3, [r4, #0]
 800348c:	2b2e      	cmp	r3, #46	@ 0x2e
 800348e:	d10a      	bne.n	80034a6 <_vfiprintf_r+0x156>
 8003490:	7863      	ldrb	r3, [r4, #1]
 8003492:	2b2a      	cmp	r3, #42	@ 0x2a
 8003494:	d132      	bne.n	80034fc <_vfiprintf_r+0x1ac>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	1d1a      	adds	r2, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9203      	str	r2, [sp, #12]
 800349e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034a2:	3402      	adds	r4, #2
 80034a4:	9305      	str	r3, [sp, #20]
 80034a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800357c <_vfiprintf_r+0x22c>
 80034aa:	7821      	ldrb	r1, [r4, #0]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4650      	mov	r0, sl
 80034b0:	f7fc fe96 	bl	80001e0 <memchr>
 80034b4:	b138      	cbz	r0, 80034c6 <_vfiprintf_r+0x176>
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	eba0 000a 	sub.w	r0, r0, sl
 80034bc:	2240      	movs	r2, #64	@ 0x40
 80034be:	4082      	lsls	r2, r0
 80034c0:	4313      	orrs	r3, r2
 80034c2:	3401      	adds	r4, #1
 80034c4:	9304      	str	r3, [sp, #16]
 80034c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ca:	4829      	ldr	r0, [pc, #164]	@ (8003570 <_vfiprintf_r+0x220>)
 80034cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034d0:	2206      	movs	r2, #6
 80034d2:	f7fc fe85 	bl	80001e0 <memchr>
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d03f      	beq.n	800355a <_vfiprintf_r+0x20a>
 80034da:	4b26      	ldr	r3, [pc, #152]	@ (8003574 <_vfiprintf_r+0x224>)
 80034dc:	bb1b      	cbnz	r3, 8003526 <_vfiprintf_r+0x1d6>
 80034de:	9b03      	ldr	r3, [sp, #12]
 80034e0:	3307      	adds	r3, #7
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	3308      	adds	r3, #8
 80034e8:	9303      	str	r3, [sp, #12]
 80034ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ec:	443b      	add	r3, r7
 80034ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80034f0:	e76a      	b.n	80033c8 <_vfiprintf_r+0x78>
 80034f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034f6:	460c      	mov	r4, r1
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7a8      	b.n	800344e <_vfiprintf_r+0xfe>
 80034fc:	2300      	movs	r3, #0
 80034fe:	3401      	adds	r4, #1
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	4619      	mov	r1, r3
 8003504:	f04f 0c0a 	mov.w	ip, #10
 8003508:	4620      	mov	r0, r4
 800350a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800350e:	3a30      	subs	r2, #48	@ 0x30
 8003510:	2a09      	cmp	r2, #9
 8003512:	d903      	bls.n	800351c <_vfiprintf_r+0x1cc>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0c6      	beq.n	80034a6 <_vfiprintf_r+0x156>
 8003518:	9105      	str	r1, [sp, #20]
 800351a:	e7c4      	b.n	80034a6 <_vfiprintf_r+0x156>
 800351c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003520:	4604      	mov	r4, r0
 8003522:	2301      	movs	r3, #1
 8003524:	e7f0      	b.n	8003508 <_vfiprintf_r+0x1b8>
 8003526:	ab03      	add	r3, sp, #12
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	462a      	mov	r2, r5
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <_vfiprintf_r+0x228>)
 800352e:	a904      	add	r1, sp, #16
 8003530:	4630      	mov	r0, r6
 8003532:	f3af 8000 	nop.w
 8003536:	4607      	mov	r7, r0
 8003538:	1c78      	adds	r0, r7, #1
 800353a:	d1d6      	bne.n	80034ea <_vfiprintf_r+0x19a>
 800353c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800353e:	07d9      	lsls	r1, r3, #31
 8003540:	d405      	bmi.n	800354e <_vfiprintf_r+0x1fe>
 8003542:	89ab      	ldrh	r3, [r5, #12]
 8003544:	059a      	lsls	r2, r3, #22
 8003546:	d402      	bmi.n	800354e <_vfiprintf_r+0x1fe>
 8003548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800354a:	f7ff fddd 	bl	8003108 <__retarget_lock_release_recursive>
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	065b      	lsls	r3, r3, #25
 8003552:	f53f af1f 	bmi.w	8003394 <_vfiprintf_r+0x44>
 8003556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003558:	e71e      	b.n	8003398 <_vfiprintf_r+0x48>
 800355a:	ab03      	add	r3, sp, #12
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	462a      	mov	r2, r5
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <_vfiprintf_r+0x228>)
 8003562:	a904      	add	r1, sp, #16
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f879 	bl	800365c <_printf_i>
 800356a:	e7e4      	b.n	8003536 <_vfiprintf_r+0x1e6>
 800356c:	08003c9c 	.word	0x08003c9c
 8003570:	08003ca6 	.word	0x08003ca6
 8003574:	00000000 	.word	0x00000000
 8003578:	0800332b 	.word	0x0800332b
 800357c:	08003ca2 	.word	0x08003ca2

08003580 <_printf_common>:
 8003580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003584:	4616      	mov	r6, r2
 8003586:	4698      	mov	r8, r3
 8003588:	688a      	ldr	r2, [r1, #8]
 800358a:	690b      	ldr	r3, [r1, #16]
 800358c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003590:	4293      	cmp	r3, r2
 8003592:	bfb8      	it	lt
 8003594:	4613      	movlt	r3, r2
 8003596:	6033      	str	r3, [r6, #0]
 8003598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800359c:	4607      	mov	r7, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	b10a      	cbz	r2, 80035a6 <_printf_common+0x26>
 80035a2:	3301      	adds	r3, #1
 80035a4:	6033      	str	r3, [r6, #0]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	0699      	lsls	r1, r3, #26
 80035aa:	bf42      	ittt	mi
 80035ac:	6833      	ldrmi	r3, [r6, #0]
 80035ae:	3302      	addmi	r3, #2
 80035b0:	6033      	strmi	r3, [r6, #0]
 80035b2:	6825      	ldr	r5, [r4, #0]
 80035b4:	f015 0506 	ands.w	r5, r5, #6
 80035b8:	d106      	bne.n	80035c8 <_printf_common+0x48>
 80035ba:	f104 0a19 	add.w	sl, r4, #25
 80035be:	68e3      	ldr	r3, [r4, #12]
 80035c0:	6832      	ldr	r2, [r6, #0]
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	42ab      	cmp	r3, r5
 80035c6:	dc26      	bgt.n	8003616 <_printf_common+0x96>
 80035c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	3b00      	subs	r3, #0
 80035d0:	bf18      	it	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	0692      	lsls	r2, r2, #26
 80035d6:	d42b      	bmi.n	8003630 <_printf_common+0xb0>
 80035d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035dc:	4641      	mov	r1, r8
 80035de:	4638      	mov	r0, r7
 80035e0:	47c8      	blx	r9
 80035e2:	3001      	adds	r0, #1
 80035e4:	d01e      	beq.n	8003624 <_printf_common+0xa4>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	6922      	ldr	r2, [r4, #16]
 80035ea:	f003 0306 	and.w	r3, r3, #6
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf02      	ittt	eq
 80035f2:	68e5      	ldreq	r5, [r4, #12]
 80035f4:	6833      	ldreq	r3, [r6, #0]
 80035f6:	1aed      	subeq	r5, r5, r3
 80035f8:	68a3      	ldr	r3, [r4, #8]
 80035fa:	bf0c      	ite	eq
 80035fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003600:	2500      	movne	r5, #0
 8003602:	4293      	cmp	r3, r2
 8003604:	bfc4      	itt	gt
 8003606:	1a9b      	subgt	r3, r3, r2
 8003608:	18ed      	addgt	r5, r5, r3
 800360a:	2600      	movs	r6, #0
 800360c:	341a      	adds	r4, #26
 800360e:	42b5      	cmp	r5, r6
 8003610:	d11a      	bne.n	8003648 <_printf_common+0xc8>
 8003612:	2000      	movs	r0, #0
 8003614:	e008      	b.n	8003628 <_printf_common+0xa8>
 8003616:	2301      	movs	r3, #1
 8003618:	4652      	mov	r2, sl
 800361a:	4641      	mov	r1, r8
 800361c:	4638      	mov	r0, r7
 800361e:	47c8      	blx	r9
 8003620:	3001      	adds	r0, #1
 8003622:	d103      	bne.n	800362c <_printf_common+0xac>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	3501      	adds	r5, #1
 800362e:	e7c6      	b.n	80035be <_printf_common+0x3e>
 8003630:	18e1      	adds	r1, r4, r3
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	2030      	movs	r0, #48	@ 0x30
 8003636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800363a:	4422      	add	r2, r4
 800363c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003644:	3302      	adds	r3, #2
 8003646:	e7c7      	b.n	80035d8 <_printf_common+0x58>
 8003648:	2301      	movs	r3, #1
 800364a:	4622      	mov	r2, r4
 800364c:	4641      	mov	r1, r8
 800364e:	4638      	mov	r0, r7
 8003650:	47c8      	blx	r9
 8003652:	3001      	adds	r0, #1
 8003654:	d0e6      	beq.n	8003624 <_printf_common+0xa4>
 8003656:	3601      	adds	r6, #1
 8003658:	e7d9      	b.n	800360e <_printf_common+0x8e>
	...

0800365c <_printf_i>:
 800365c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003660:	7e0f      	ldrb	r7, [r1, #24]
 8003662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003664:	2f78      	cmp	r7, #120	@ 0x78
 8003666:	4691      	mov	r9, r2
 8003668:	4680      	mov	r8, r0
 800366a:	460c      	mov	r4, r1
 800366c:	469a      	mov	sl, r3
 800366e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003672:	d807      	bhi.n	8003684 <_printf_i+0x28>
 8003674:	2f62      	cmp	r7, #98	@ 0x62
 8003676:	d80a      	bhi.n	800368e <_printf_i+0x32>
 8003678:	2f00      	cmp	r7, #0
 800367a:	f000 80d2 	beq.w	8003822 <_printf_i+0x1c6>
 800367e:	2f58      	cmp	r7, #88	@ 0x58
 8003680:	f000 80b9 	beq.w	80037f6 <_printf_i+0x19a>
 8003684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800368c:	e03a      	b.n	8003704 <_printf_i+0xa8>
 800368e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003692:	2b15      	cmp	r3, #21
 8003694:	d8f6      	bhi.n	8003684 <_printf_i+0x28>
 8003696:	a101      	add	r1, pc, #4	@ (adr r1, 800369c <_printf_i+0x40>)
 8003698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800369c:	080036f5 	.word	0x080036f5
 80036a0:	08003709 	.word	0x08003709
 80036a4:	08003685 	.word	0x08003685
 80036a8:	08003685 	.word	0x08003685
 80036ac:	08003685 	.word	0x08003685
 80036b0:	08003685 	.word	0x08003685
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003685 	.word	0x08003685
 80036bc:	08003685 	.word	0x08003685
 80036c0:	08003685 	.word	0x08003685
 80036c4:	08003685 	.word	0x08003685
 80036c8:	08003809 	.word	0x08003809
 80036cc:	08003733 	.word	0x08003733
 80036d0:	080037c3 	.word	0x080037c3
 80036d4:	08003685 	.word	0x08003685
 80036d8:	08003685 	.word	0x08003685
 80036dc:	0800382b 	.word	0x0800382b
 80036e0:	08003685 	.word	0x08003685
 80036e4:	08003733 	.word	0x08003733
 80036e8:	08003685 	.word	0x08003685
 80036ec:	08003685 	.word	0x08003685
 80036f0:	080037cb 	.word	0x080037cb
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6032      	str	r2, [r6, #0]
 80036fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003704:	2301      	movs	r3, #1
 8003706:	e09d      	b.n	8003844 <_printf_i+0x1e8>
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	1d19      	adds	r1, r3, #4
 800370e:	6031      	str	r1, [r6, #0]
 8003710:	0606      	lsls	r6, r0, #24
 8003712:	d501      	bpl.n	8003718 <_printf_i+0xbc>
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	e003      	b.n	8003720 <_printf_i+0xc4>
 8003718:	0645      	lsls	r5, r0, #25
 800371a:	d5fb      	bpl.n	8003714 <_printf_i+0xb8>
 800371c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003720:	2d00      	cmp	r5, #0
 8003722:	da03      	bge.n	800372c <_printf_i+0xd0>
 8003724:	232d      	movs	r3, #45	@ 0x2d
 8003726:	426d      	negs	r5, r5
 8003728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800372c:	4859      	ldr	r0, [pc, #356]	@ (8003894 <_printf_i+0x238>)
 800372e:	230a      	movs	r3, #10
 8003730:	e011      	b.n	8003756 <_printf_i+0xfa>
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	0608      	lsls	r0, r1, #24
 8003738:	f853 5b04 	ldr.w	r5, [r3], #4
 800373c:	d402      	bmi.n	8003744 <_printf_i+0xe8>
 800373e:	0649      	lsls	r1, r1, #25
 8003740:	bf48      	it	mi
 8003742:	b2ad      	uxthmi	r5, r5
 8003744:	2f6f      	cmp	r7, #111	@ 0x6f
 8003746:	4853      	ldr	r0, [pc, #332]	@ (8003894 <_printf_i+0x238>)
 8003748:	6033      	str	r3, [r6, #0]
 800374a:	bf14      	ite	ne
 800374c:	230a      	movne	r3, #10
 800374e:	2308      	moveq	r3, #8
 8003750:	2100      	movs	r1, #0
 8003752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003756:	6866      	ldr	r6, [r4, #4]
 8003758:	60a6      	str	r6, [r4, #8]
 800375a:	2e00      	cmp	r6, #0
 800375c:	bfa2      	ittt	ge
 800375e:	6821      	ldrge	r1, [r4, #0]
 8003760:	f021 0104 	bicge.w	r1, r1, #4
 8003764:	6021      	strge	r1, [r4, #0]
 8003766:	b90d      	cbnz	r5, 800376c <_printf_i+0x110>
 8003768:	2e00      	cmp	r6, #0
 800376a:	d04b      	beq.n	8003804 <_printf_i+0x1a8>
 800376c:	4616      	mov	r6, r2
 800376e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003772:	fb03 5711 	mls	r7, r3, r1, r5
 8003776:	5dc7      	ldrb	r7, [r0, r7]
 8003778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800377c:	462f      	mov	r7, r5
 800377e:	42bb      	cmp	r3, r7
 8003780:	460d      	mov	r5, r1
 8003782:	d9f4      	bls.n	800376e <_printf_i+0x112>
 8003784:	2b08      	cmp	r3, #8
 8003786:	d10b      	bne.n	80037a0 <_printf_i+0x144>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	07df      	lsls	r7, r3, #31
 800378c:	d508      	bpl.n	80037a0 <_printf_i+0x144>
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	6861      	ldr	r1, [r4, #4]
 8003792:	4299      	cmp	r1, r3
 8003794:	bfde      	ittt	le
 8003796:	2330      	movle	r3, #48	@ 0x30
 8003798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800379c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037a0:	1b92      	subs	r2, r2, r6
 80037a2:	6122      	str	r2, [r4, #16]
 80037a4:	f8cd a000 	str.w	sl, [sp]
 80037a8:	464b      	mov	r3, r9
 80037aa:	aa03      	add	r2, sp, #12
 80037ac:	4621      	mov	r1, r4
 80037ae:	4640      	mov	r0, r8
 80037b0:	f7ff fee6 	bl	8003580 <_printf_common>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d14a      	bne.n	800384e <_printf_i+0x1f2>
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	b004      	add	sp, #16
 80037be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	4833      	ldr	r0, [pc, #204]	@ (8003898 <_printf_i+0x23c>)
 80037cc:	2778      	movs	r7, #120	@ 0x78
 80037ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	6831      	ldr	r1, [r6, #0]
 80037d6:	061f      	lsls	r7, r3, #24
 80037d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80037dc:	d402      	bmi.n	80037e4 <_printf_i+0x188>
 80037de:	065f      	lsls	r7, r3, #25
 80037e0:	bf48      	it	mi
 80037e2:	b2ad      	uxthmi	r5, r5
 80037e4:	6031      	str	r1, [r6, #0]
 80037e6:	07d9      	lsls	r1, r3, #31
 80037e8:	bf44      	itt	mi
 80037ea:	f043 0320 	orrmi.w	r3, r3, #32
 80037ee:	6023      	strmi	r3, [r4, #0]
 80037f0:	b11d      	cbz	r5, 80037fa <_printf_i+0x19e>
 80037f2:	2310      	movs	r3, #16
 80037f4:	e7ac      	b.n	8003750 <_printf_i+0xf4>
 80037f6:	4827      	ldr	r0, [pc, #156]	@ (8003894 <_printf_i+0x238>)
 80037f8:	e7e9      	b.n	80037ce <_printf_i+0x172>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f023 0320 	bic.w	r3, r3, #32
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	e7f6      	b.n	80037f2 <_printf_i+0x196>
 8003804:	4616      	mov	r6, r2
 8003806:	e7bd      	b.n	8003784 <_printf_i+0x128>
 8003808:	6833      	ldr	r3, [r6, #0]
 800380a:	6825      	ldr	r5, [r4, #0]
 800380c:	6961      	ldr	r1, [r4, #20]
 800380e:	1d18      	adds	r0, r3, #4
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	062e      	lsls	r6, r5, #24
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	d501      	bpl.n	800381c <_printf_i+0x1c0>
 8003818:	6019      	str	r1, [r3, #0]
 800381a:	e002      	b.n	8003822 <_printf_i+0x1c6>
 800381c:	0668      	lsls	r0, r5, #25
 800381e:	d5fb      	bpl.n	8003818 <_printf_i+0x1bc>
 8003820:	8019      	strh	r1, [r3, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	4616      	mov	r6, r2
 8003828:	e7bc      	b.n	80037a4 <_printf_i+0x148>
 800382a:	6833      	ldr	r3, [r6, #0]
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	6032      	str	r2, [r6, #0]
 8003830:	681e      	ldr	r6, [r3, #0]
 8003832:	6862      	ldr	r2, [r4, #4]
 8003834:	2100      	movs	r1, #0
 8003836:	4630      	mov	r0, r6
 8003838:	f7fc fcd2 	bl	80001e0 <memchr>
 800383c:	b108      	cbz	r0, 8003842 <_printf_i+0x1e6>
 800383e:	1b80      	subs	r0, r0, r6
 8003840:	6060      	str	r0, [r4, #4]
 8003842:	6863      	ldr	r3, [r4, #4]
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	2300      	movs	r3, #0
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800384c:	e7aa      	b.n	80037a4 <_printf_i+0x148>
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	4632      	mov	r2, r6
 8003852:	4649      	mov	r1, r9
 8003854:	4640      	mov	r0, r8
 8003856:	47d0      	blx	sl
 8003858:	3001      	adds	r0, #1
 800385a:	d0ad      	beq.n	80037b8 <_printf_i+0x15c>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	079b      	lsls	r3, r3, #30
 8003860:	d413      	bmi.n	800388a <_printf_i+0x22e>
 8003862:	68e0      	ldr	r0, [r4, #12]
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	4298      	cmp	r0, r3
 8003868:	bfb8      	it	lt
 800386a:	4618      	movlt	r0, r3
 800386c:	e7a6      	b.n	80037bc <_printf_i+0x160>
 800386e:	2301      	movs	r3, #1
 8003870:	4632      	mov	r2, r6
 8003872:	4649      	mov	r1, r9
 8003874:	4640      	mov	r0, r8
 8003876:	47d0      	blx	sl
 8003878:	3001      	adds	r0, #1
 800387a:	d09d      	beq.n	80037b8 <_printf_i+0x15c>
 800387c:	3501      	adds	r5, #1
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	9903      	ldr	r1, [sp, #12]
 8003882:	1a5b      	subs	r3, r3, r1
 8003884:	42ab      	cmp	r3, r5
 8003886:	dcf2      	bgt.n	800386e <_printf_i+0x212>
 8003888:	e7eb      	b.n	8003862 <_printf_i+0x206>
 800388a:	2500      	movs	r5, #0
 800388c:	f104 0619 	add.w	r6, r4, #25
 8003890:	e7f5      	b.n	800387e <_printf_i+0x222>
 8003892:	bf00      	nop
 8003894:	08003cad 	.word	0x08003cad
 8003898:	08003cbe 	.word	0x08003cbe

0800389c <__sflush_r>:
 800389c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a4:	0716      	lsls	r6, r2, #28
 80038a6:	4605      	mov	r5, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	d454      	bmi.n	8003956 <__sflush_r+0xba>
 80038ac:	684b      	ldr	r3, [r1, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dc02      	bgt.n	80038b8 <__sflush_r+0x1c>
 80038b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dd48      	ble.n	800394a <__sflush_r+0xae>
 80038b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	d045      	beq.n	800394a <__sflush_r+0xae>
 80038be:	2300      	movs	r3, #0
 80038c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038c4:	682f      	ldr	r7, [r5, #0]
 80038c6:	6a21      	ldr	r1, [r4, #32]
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	d030      	beq.n	800392e <__sflush_r+0x92>
 80038cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	0759      	lsls	r1, r3, #29
 80038d2:	d505      	bpl.n	80038e0 <__sflush_r+0x44>
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038da:	b10b      	cbz	r3, 80038e0 <__sflush_r+0x44>
 80038dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038e4:	6a21      	ldr	r1, [r4, #32]
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b0      	blx	r6
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	d106      	bne.n	80038fe <__sflush_r+0x62>
 80038f0:	6829      	ldr	r1, [r5, #0]
 80038f2:	291d      	cmp	r1, #29
 80038f4:	d82b      	bhi.n	800394e <__sflush_r+0xb2>
 80038f6:	4a2a      	ldr	r2, [pc, #168]	@ (80039a0 <__sflush_r+0x104>)
 80038f8:	410a      	asrs	r2, r1
 80038fa:	07d6      	lsls	r6, r2, #31
 80038fc:	d427      	bmi.n	800394e <__sflush_r+0xb2>
 80038fe:	2200      	movs	r2, #0
 8003900:	6062      	str	r2, [r4, #4]
 8003902:	04d9      	lsls	r1, r3, #19
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	6022      	str	r2, [r4, #0]
 8003908:	d504      	bpl.n	8003914 <__sflush_r+0x78>
 800390a:	1c42      	adds	r2, r0, #1
 800390c:	d101      	bne.n	8003912 <__sflush_r+0x76>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	b903      	cbnz	r3, 8003914 <__sflush_r+0x78>
 8003912:	6560      	str	r0, [r4, #84]	@ 0x54
 8003914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003916:	602f      	str	r7, [r5, #0]
 8003918:	b1b9      	cbz	r1, 800394a <__sflush_r+0xae>
 800391a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800391e:	4299      	cmp	r1, r3
 8003920:	d002      	beq.n	8003928 <__sflush_r+0x8c>
 8003922:	4628      	mov	r0, r5
 8003924:	f7ff fbf2 	bl	800310c <_free_r>
 8003928:	2300      	movs	r3, #0
 800392a:	6363      	str	r3, [r4, #52]	@ 0x34
 800392c:	e00d      	b.n	800394a <__sflush_r+0xae>
 800392e:	2301      	movs	r3, #1
 8003930:	4628      	mov	r0, r5
 8003932:	47b0      	blx	r6
 8003934:	4602      	mov	r2, r0
 8003936:	1c50      	adds	r0, r2, #1
 8003938:	d1c9      	bne.n	80038ce <__sflush_r+0x32>
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0c6      	beq.n	80038ce <__sflush_r+0x32>
 8003940:	2b1d      	cmp	r3, #29
 8003942:	d001      	beq.n	8003948 <__sflush_r+0xac>
 8003944:	2b16      	cmp	r3, #22
 8003946:	d11e      	bne.n	8003986 <__sflush_r+0xea>
 8003948:	602f      	str	r7, [r5, #0]
 800394a:	2000      	movs	r0, #0
 800394c:	e022      	b.n	8003994 <__sflush_r+0xf8>
 800394e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003952:	b21b      	sxth	r3, r3
 8003954:	e01b      	b.n	800398e <__sflush_r+0xf2>
 8003956:	690f      	ldr	r7, [r1, #16]
 8003958:	2f00      	cmp	r7, #0
 800395a:	d0f6      	beq.n	800394a <__sflush_r+0xae>
 800395c:	0793      	lsls	r3, r2, #30
 800395e:	680e      	ldr	r6, [r1, #0]
 8003960:	bf08      	it	eq
 8003962:	694b      	ldreq	r3, [r1, #20]
 8003964:	600f      	str	r7, [r1, #0]
 8003966:	bf18      	it	ne
 8003968:	2300      	movne	r3, #0
 800396a:	eba6 0807 	sub.w	r8, r6, r7
 800396e:	608b      	str	r3, [r1, #8]
 8003970:	f1b8 0f00 	cmp.w	r8, #0
 8003974:	dde9      	ble.n	800394a <__sflush_r+0xae>
 8003976:	6a21      	ldr	r1, [r4, #32]
 8003978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800397a:	4643      	mov	r3, r8
 800397c:	463a      	mov	r2, r7
 800397e:	4628      	mov	r0, r5
 8003980:	47b0      	blx	r6
 8003982:	2800      	cmp	r0, #0
 8003984:	dc08      	bgt.n	8003998 <__sflush_r+0xfc>
 8003986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398e:	81a3      	strh	r3, [r4, #12]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003998:	4407      	add	r7, r0
 800399a:	eba8 0800 	sub.w	r8, r8, r0
 800399e:	e7e7      	b.n	8003970 <__sflush_r+0xd4>
 80039a0:	dfbffffe 	.word	0xdfbffffe

080039a4 <_fflush_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	690b      	ldr	r3, [r1, #16]
 80039a8:	4605      	mov	r5, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	b913      	cbnz	r3, 80039b4 <_fflush_r+0x10>
 80039ae:	2500      	movs	r5, #0
 80039b0:	4628      	mov	r0, r5
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	b118      	cbz	r0, 80039be <_fflush_r+0x1a>
 80039b6:	6a03      	ldr	r3, [r0, #32]
 80039b8:	b90b      	cbnz	r3, 80039be <_fflush_r+0x1a>
 80039ba:	f7ff fa9f 	bl	8002efc <__sinit>
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f3      	beq.n	80039ae <_fflush_r+0xa>
 80039c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039c8:	07d0      	lsls	r0, r2, #31
 80039ca:	d404      	bmi.n	80039d6 <_fflush_r+0x32>
 80039cc:	0599      	lsls	r1, r3, #22
 80039ce:	d402      	bmi.n	80039d6 <_fflush_r+0x32>
 80039d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039d2:	f7ff fb98 	bl	8003106 <__retarget_lock_acquire_recursive>
 80039d6:	4628      	mov	r0, r5
 80039d8:	4621      	mov	r1, r4
 80039da:	f7ff ff5f 	bl	800389c <__sflush_r>
 80039de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039e0:	07da      	lsls	r2, r3, #31
 80039e2:	4605      	mov	r5, r0
 80039e4:	d4e4      	bmi.n	80039b0 <_fflush_r+0xc>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	059b      	lsls	r3, r3, #22
 80039ea:	d4e1      	bmi.n	80039b0 <_fflush_r+0xc>
 80039ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ee:	f7ff fb8b 	bl	8003108 <__retarget_lock_release_recursive>
 80039f2:	e7dd      	b.n	80039b0 <_fflush_r+0xc>

080039f4 <__swbuf_r>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	460e      	mov	r6, r1
 80039f8:	4614      	mov	r4, r2
 80039fa:	4605      	mov	r5, r0
 80039fc:	b118      	cbz	r0, 8003a06 <__swbuf_r+0x12>
 80039fe:	6a03      	ldr	r3, [r0, #32]
 8003a00:	b90b      	cbnz	r3, 8003a06 <__swbuf_r+0x12>
 8003a02:	f7ff fa7b 	bl	8002efc <__sinit>
 8003a06:	69a3      	ldr	r3, [r4, #24]
 8003a08:	60a3      	str	r3, [r4, #8]
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	071a      	lsls	r2, r3, #28
 8003a0e:	d501      	bpl.n	8003a14 <__swbuf_r+0x20>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	b943      	cbnz	r3, 8003a26 <__swbuf_r+0x32>
 8003a14:	4621      	mov	r1, r4
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f82a 	bl	8003a70 <__swsetup_r>
 8003a1c:	b118      	cbz	r0, 8003a26 <__swbuf_r+0x32>
 8003a1e:	f04f 37ff 	mov.w	r7, #4294967295
 8003a22:	4638      	mov	r0, r7
 8003a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	6922      	ldr	r2, [r4, #16]
 8003a2a:	1a98      	subs	r0, r3, r2
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	b2f6      	uxtb	r6, r6
 8003a30:	4283      	cmp	r3, r0
 8003a32:	4637      	mov	r7, r6
 8003a34:	dc05      	bgt.n	8003a42 <__swbuf_r+0x4e>
 8003a36:	4621      	mov	r1, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f7ff ffb3 	bl	80039a4 <_fflush_r>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d1ed      	bne.n	8003a1e <__swbuf_r+0x2a>
 8003a42:	68a3      	ldr	r3, [r4, #8]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	701e      	strb	r6, [r3, #0]
 8003a50:	6962      	ldr	r2, [r4, #20]
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d004      	beq.n	8003a62 <__swbuf_r+0x6e>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	07db      	lsls	r3, r3, #31
 8003a5c:	d5e1      	bpl.n	8003a22 <__swbuf_r+0x2e>
 8003a5e:	2e0a      	cmp	r6, #10
 8003a60:	d1df      	bne.n	8003a22 <__swbuf_r+0x2e>
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f7ff ff9d 	bl	80039a4 <_fflush_r>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d0d9      	beq.n	8003a22 <__swbuf_r+0x2e>
 8003a6e:	e7d6      	b.n	8003a1e <__swbuf_r+0x2a>

08003a70 <__swsetup_r>:
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <__swsetup_r+0xa8>)
 8003a74:	4605      	mov	r5, r0
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	460c      	mov	r4, r1
 8003a7a:	b118      	cbz	r0, 8003a84 <__swsetup_r+0x14>
 8003a7c:	6a03      	ldr	r3, [r0, #32]
 8003a7e:	b90b      	cbnz	r3, 8003a84 <__swsetup_r+0x14>
 8003a80:	f7ff fa3c 	bl	8002efc <__sinit>
 8003a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a88:	0719      	lsls	r1, r3, #28
 8003a8a:	d422      	bmi.n	8003ad2 <__swsetup_r+0x62>
 8003a8c:	06da      	lsls	r2, r3, #27
 8003a8e:	d407      	bmi.n	8003aa0 <__swsetup_r+0x30>
 8003a90:	2209      	movs	r2, #9
 8003a92:	602a      	str	r2, [r5, #0]
 8003a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	e033      	b.n	8003b08 <__swsetup_r+0x98>
 8003aa0:	0758      	lsls	r0, r3, #29
 8003aa2:	d512      	bpl.n	8003aca <__swsetup_r+0x5a>
 8003aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003aa6:	b141      	cbz	r1, 8003aba <__swsetup_r+0x4a>
 8003aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003aac:	4299      	cmp	r1, r3
 8003aae:	d002      	beq.n	8003ab6 <__swsetup_r+0x46>
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f7ff fb2b 	bl	800310c <_free_r>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	b94b      	cbnz	r3, 8003aea <__swsetup_r+0x7a>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d003      	beq.n	8003aea <__swsetup_r+0x7a>
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f84f 	bl	8003b88 <__smakebuf_r>
 8003aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aee:	f013 0201 	ands.w	r2, r3, #1
 8003af2:	d00a      	beq.n	8003b0a <__swsetup_r+0x9a>
 8003af4:	2200      	movs	r2, #0
 8003af6:	60a2      	str	r2, [r4, #8]
 8003af8:	6962      	ldr	r2, [r4, #20]
 8003afa:	4252      	negs	r2, r2
 8003afc:	61a2      	str	r2, [r4, #24]
 8003afe:	6922      	ldr	r2, [r4, #16]
 8003b00:	b942      	cbnz	r2, 8003b14 <__swsetup_r+0xa4>
 8003b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b06:	d1c5      	bne.n	8003a94 <__swsetup_r+0x24>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	0799      	lsls	r1, r3, #30
 8003b0c:	bf58      	it	pl
 8003b0e:	6962      	ldrpl	r2, [r4, #20]
 8003b10:	60a2      	str	r2, [r4, #8]
 8003b12:	e7f4      	b.n	8003afe <__swsetup_r+0x8e>
 8003b14:	2000      	movs	r0, #0
 8003b16:	e7f7      	b.n	8003b08 <__swsetup_r+0x98>
 8003b18:	20000018 	.word	0x20000018

08003b1c <_sbrk_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4d06      	ldr	r5, [pc, #24]	@ (8003b38 <_sbrk_r+0x1c>)
 8003b20:	2300      	movs	r3, #0
 8003b22:	4604      	mov	r4, r0
 8003b24:	4608      	mov	r0, r1
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	f7ff f88a 	bl	8002c40 <_sbrk>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_sbrk_r+0x1a>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_sbrk_r+0x1a>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	200002b8 	.word	0x200002b8

08003b3c <__swhatbuf_r>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	460c      	mov	r4, r1
 8003b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b44:	2900      	cmp	r1, #0
 8003b46:	b096      	sub	sp, #88	@ 0x58
 8003b48:	4615      	mov	r5, r2
 8003b4a:	461e      	mov	r6, r3
 8003b4c:	da0d      	bge.n	8003b6a <__swhatbuf_r+0x2e>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2340      	movne	r3, #64	@ 0x40
 8003b5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b60:	2000      	movs	r0, #0
 8003b62:	6031      	str	r1, [r6, #0]
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	b016      	add	sp, #88	@ 0x58
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	466a      	mov	r2, sp
 8003b6c:	f000 f848 	bl	8003c00 <_fstat_r>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	dbec      	blt.n	8003b4e <__swhatbuf_r+0x12>
 8003b74:	9901      	ldr	r1, [sp, #4]
 8003b76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b7e:	4259      	negs	r1, r3
 8003b80:	4159      	adcs	r1, r3
 8003b82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b86:	e7eb      	b.n	8003b60 <__swhatbuf_r+0x24>

08003b88 <__smakebuf_r>:
 8003b88:	898b      	ldrh	r3, [r1, #12]
 8003b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8c:	079d      	lsls	r5, r3, #30
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	d507      	bpl.n	8003ba4 <__smakebuf_r+0x1c>
 8003b94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6163      	str	r3, [r4, #20]
 8003ba0:	b003      	add	sp, #12
 8003ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba4:	ab01      	add	r3, sp, #4
 8003ba6:	466a      	mov	r2, sp
 8003ba8:	f7ff ffc8 	bl	8003b3c <__swhatbuf_r>
 8003bac:	9f00      	ldr	r7, [sp, #0]
 8003bae:	4605      	mov	r5, r0
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7ff fb16 	bl	80031e4 <_malloc_r>
 8003bb8:	b948      	cbnz	r0, 8003bce <__smakebuf_r+0x46>
 8003bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbe:	059a      	lsls	r2, r3, #22
 8003bc0:	d4ee      	bmi.n	8003ba0 <__smakebuf_r+0x18>
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	e7e2      	b.n	8003b94 <__smakebuf_r+0xc>
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	6020      	str	r0, [r4, #0]
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd6:	81a3      	strh	r3, [r4, #12]
 8003bd8:	9b01      	ldr	r3, [sp, #4]
 8003bda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bde:	b15b      	cbz	r3, 8003bf8 <__smakebuf_r+0x70>
 8003be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 f81d 	bl	8003c24 <_isatty_r>
 8003bea:	b128      	cbz	r0, 8003bf8 <__smakebuf_r+0x70>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	431d      	orrs	r5, r3
 8003bfc:	81a5      	strh	r5, [r4, #12]
 8003bfe:	e7cf      	b.n	8003ba0 <__smakebuf_r+0x18>

08003c00 <_fstat_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4d07      	ldr	r5, [pc, #28]	@ (8003c20 <_fstat_r+0x20>)
 8003c04:	2300      	movs	r3, #0
 8003c06:	4604      	mov	r4, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	f7fe ffee 	bl	8002bee <_fstat>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	d102      	bne.n	8003c1c <_fstat_r+0x1c>
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	b103      	cbz	r3, 8003c1c <_fstat_r+0x1c>
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	bd38      	pop	{r3, r4, r5, pc}
 8003c1e:	bf00      	nop
 8003c20:	200002b8 	.word	0x200002b8

08003c24 <_isatty_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d06      	ldr	r5, [pc, #24]	@ (8003c40 <_isatty_r+0x1c>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fe ffed 	bl	8002c0e <_isatty>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_isatty_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_isatty_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200002b8 	.word	0x200002b8

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
