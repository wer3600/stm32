
3_UartTx_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002398  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002538  08002538  00003538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002590  08002590  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002598  08002598  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002598  08002598  00003598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002608  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002608  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067bb  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000125c  00000000  00000000  0000a853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004af  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e78  00000000  00000000  0000c597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007aec  00000000  00000000  0002240f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f40  00000000  00000000  00029efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002064  00000000  00000000  000b1e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b3ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002520 	.word	0x08002520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002520 	.word	0x08002520

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f939 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f93b 	bl	800085e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f911 	bl	8000826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	@ (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	@ (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	@ 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	@ 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff8e 	bl	8000710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	@ (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff47 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff5c 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff8e 	bl	8000764 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ffb0 	bl	80007cc <SysTick_Config>
 800086c:	4603      	mov	r3, r0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	@ 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
 8000892:	e159      	b.n	8000b48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8148 	bne.w	8000b42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d005      	beq.n	80008ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d130      	bne.n	800092c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4013      	ands	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	68da      	ldr	r2, [r3, #12]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000900:	2201      	movs	r2, #1
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4013      	ands	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	091b      	lsrs	r3, r3, #4
 8000916:	f003 0201 	and.w	r2, r3, #1
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4313      	orrs	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b03      	cmp	r3, #3
 8000936:	d017      	beq.n	8000968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d123      	bne.n	80009bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	08da      	lsrs	r2, r3, #3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3208      	adds	r2, #8
 80009b6:	69b9      	ldr	r1, [r7, #24]
 80009b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0203 	and.w	r2, r3, #3
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f000 80a2 	beq.w	8000b42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b57      	ldr	r3, [pc, #348]	@ (8000b60 <HAL_GPIO_Init+0x2e8>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a56      	ldr	r2, [pc, #344]	@ (8000b60 <HAL_GPIO_Init+0x2e8>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b54      	ldr	r3, [pc, #336]	@ (8000b60 <HAL_GPIO_Init+0x2e8>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a1a:	4a52      	ldr	r2, [pc, #328]	@ (8000b64 <HAL_GPIO_Init+0x2ec>)
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	220f      	movs	r2, #15
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a49      	ldr	r2, [pc, #292]	@ (8000b68 <HAL_GPIO_Init+0x2f0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d019      	beq.n	8000a7a <HAL_GPIO_Init+0x202>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a48      	ldr	r2, [pc, #288]	@ (8000b6c <HAL_GPIO_Init+0x2f4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0x1fe>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a47      	ldr	r2, [pc, #284]	@ (8000b70 <HAL_GPIO_Init+0x2f8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d00d      	beq.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a46      	ldr	r2, [pc, #280]	@ (8000b74 <HAL_GPIO_Init+0x2fc>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d007      	beq.n	8000a6e <HAL_GPIO_Init+0x1f6>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a45      	ldr	r2, [pc, #276]	@ (8000b78 <HAL_GPIO_Init+0x300>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_GPIO_Init+0x1f2>
 8000a66:	2304      	movs	r3, #4
 8000a68:	e008      	b.n	8000a7c <HAL_GPIO_Init+0x204>
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x204>
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e004      	b.n	8000a7c <HAL_GPIO_Init+0x204>
 8000a72:	2302      	movs	r3, #2
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_Init+0x204>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <HAL_GPIO_Init+0x204>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	f002 0203 	and.w	r2, r2, #3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4093      	lsls	r3, r2
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a8c:	4935      	ldr	r1, [pc, #212]	@ (8000b64 <HAL_GPIO_Init+0x2ec>)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a2f      	ldr	r2, [pc, #188]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b12:	4a1a      	ldr	r2, [pc, #104]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <HAL_GPIO_Init+0x304>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3301      	adds	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	f67f aea2 	bls.w	8000894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3724      	adds	r7, #36	@ 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40013c00 	.word	0x40013c00

08000b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b9c:	f7ff fff0 	bl	8000b80 <HAL_RCC_GetHCLKFreq>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	0a9b      	lsrs	r3, r3, #10
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	4903      	ldr	r1, [pc, #12]	@ (8000bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	08002554 	.word	0x08002554

08000bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000bc4:	f7ff ffdc 	bl	8000b80 <HAL_RCC_GetHCLKFreq>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	0b5b      	lsrs	r3, r3, #13
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	4903      	ldr	r1, [pc, #12]	@ (8000be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bd6:	5ccb      	ldrb	r3, [r1, r3]
 8000bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	08002554 	.word	0x08002554

08000be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e042      	b.n	8000c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d106      	bne.n	8000c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f83a 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2224      	movs	r2, #36	@ 0x24
 8000c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f97d 	bl	8000f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2220      	movs	r2, #32
 8000c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b20      	cmp	r3, #32
 8000cba:	d175      	bne.n	8000da8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_UART_Transmit+0x2c>
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e06e      	b.n	8000daa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2221      	movs	r2, #33	@ 0x21
 8000cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000cda:	f7ff fcb7 	bl	800064c <HAL_GetTick>
 8000cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cf4:	d108      	bne.n	8000d08 <HAL_UART_Transmit+0x6c>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d104      	bne.n	8000d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	e003      	b.n	8000d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000d10:	e02e      	b.n	8000d70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f848 	bl	8000db2 <UART_WaitOnFlagUntilTimeout>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e03a      	b.n	8000daa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10b      	bne.n	8000d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	e007      	b.n	8000d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1cb      	bne.n	8000d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2200      	movs	r2, #0
 8000d82:	2140      	movs	r1, #64	@ 0x40
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f814 	bl	8000db2 <UART_WaitOnFlagUntilTimeout>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2220      	movs	r2, #32
 8000d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e006      	b.n	8000daa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e000      	b.n	8000daa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8000da8:	2302      	movs	r3, #2
  }
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dc2:	e03b      	b.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dca:	d037      	beq.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dcc:	f7ff fc3e 	bl	800064c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	6a3a      	ldr	r2, [r7, #32]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d302      	bcc.n	8000de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e03a      	b.n	8000e5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d023      	beq.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b80      	cmp	r3, #128	@ 0x80
 8000df8:	d020      	beq.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b40      	cmp	r3, #64	@ 0x40
 8000dfe:	d01d      	beq.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d116      	bne.n	8000e3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 f81d 	bl	8000e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e00f      	b.n	8000e5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4013      	ands	r3, r2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	bf0c      	ite	eq
 8000e4c:	2301      	moveq	r3, #1
 8000e4e:	2300      	movne	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d0b4      	beq.n	8000dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b095      	sub	sp, #84	@ 0x54
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	330c      	adds	r3, #12
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e76:	e853 3f00 	ldrex	r3, [r3]
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8000e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	330c      	adds	r3, #12
 8000e8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8000e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000e92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e94:	e841 2300 	strex	r3, r2, [r1]
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e5      	bne.n	8000e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3314      	adds	r3, #20
 8000ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	e853 3f00 	ldrex	r3, [r3]
 8000eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ec8:	e841 2300 	strex	r3, r2, [r1]
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e5      	bne.n	8000ea0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d119      	bne.n	8000f10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	e853 3f00 	ldrex	r3, [r3]
 8000eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f023 0310 	bic.w	r3, r3, #16
 8000ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000efc:	61ba      	str	r2, [r7, #24]
 8000efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f00:	6979      	ldr	r1, [r7, #20]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	e841 2300 	strex	r3, r2, [r1]
 8000f08:	613b      	str	r3, [r7, #16]
   return(result);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e5      	bne.n	8000edc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2220      	movs	r2, #32
 8000f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000f1e:	bf00      	nop
 8000f20:	3754      	adds	r7, #84	@ 0x54
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f30:	b0c0      	sub	sp, #256	@ 0x100
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8000f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f48:	68d9      	ldr	r1, [r3, #12]
 8000f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	ea40 0301 	orr.w	r3, r0, r1
 8000f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8000f84:	f021 010c 	bic.w	r1, r1, #12
 8000f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000f92:	430b      	orrs	r3, r1
 8000f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8000fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fa6:	6999      	ldr	r1, [r3, #24]
 8000fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	ea40 0301 	orr.w	r3, r0, r1
 8000fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b8f      	ldr	r3, [pc, #572]	@ (80011f8 <UART_SetConfig+0x2cc>)
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d005      	beq.n	8000fcc <UART_SetConfig+0xa0>
 8000fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80011fc <UART_SetConfig+0x2d0>)
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d104      	bne.n	8000fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000fcc:	f7ff fdf8 	bl	8000bc0 <HAL_RCC_GetPCLK2Freq>
 8000fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8000fd4:	e003      	b.n	8000fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fd6:	f7ff fddf 	bl	8000b98 <HAL_RCC_GetPCLK1Freq>
 8000fda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fe8:	f040 810c 	bne.w	8001204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000ffe:	4622      	mov	r2, r4
 8001000:	462b      	mov	r3, r5
 8001002:	1891      	adds	r1, r2, r2
 8001004:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001006:	415b      	adcs	r3, r3
 8001008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800100a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800100e:	4621      	mov	r1, r4
 8001010:	eb12 0801 	adds.w	r8, r2, r1
 8001014:	4629      	mov	r1, r5
 8001016:	eb43 0901 	adc.w	r9, r3, r1
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800102a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800102e:	4690      	mov	r8, r2
 8001030:	4699      	mov	r9, r3
 8001032:	4623      	mov	r3, r4
 8001034:	eb18 0303 	adds.w	r3, r8, r3
 8001038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800103c:	462b      	mov	r3, r5
 800103e:	eb49 0303 	adc.w	r3, r9, r3
 8001042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001052:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800105a:	460b      	mov	r3, r1
 800105c:	18db      	adds	r3, r3, r3
 800105e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001060:	4613      	mov	r3, r2
 8001062:	eb42 0303 	adc.w	r3, r2, r3
 8001066:	657b      	str	r3, [r7, #84]	@ 0x54
 8001068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800106c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001070:	f7ff f906 	bl	8000280 <__aeabi_uldivmod>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4b61      	ldr	r3, [pc, #388]	@ (8001200 <UART_SetConfig+0x2d4>)
 800107a:	fba3 2302 	umull	r2, r3, r3, r2
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	011c      	lsls	r4, r3, #4
 8001082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001086:	2200      	movs	r2, #0
 8001088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800108c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001094:	4642      	mov	r2, r8
 8001096:	464b      	mov	r3, r9
 8001098:	1891      	adds	r1, r2, r2
 800109a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800109c:	415b      	adcs	r3, r3
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80010a4:	4641      	mov	r1, r8
 80010a6:	eb12 0a01 	adds.w	sl, r2, r1
 80010aa:	4649      	mov	r1, r9
 80010ac:	eb43 0b01 	adc.w	fp, r3, r1
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010c4:	4692      	mov	sl, r2
 80010c6:	469b      	mov	fp, r3
 80010c8:	4643      	mov	r3, r8
 80010ca:	eb1a 0303 	adds.w	r3, sl, r3
 80010ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010d2:	464b      	mov	r3, r9
 80010d4:	eb4b 0303 	adc.w	r3, fp, r3
 80010d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80010e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80010ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80010f0:	460b      	mov	r3, r1
 80010f2:	18db      	adds	r3, r3, r3
 80010f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f6:	4613      	mov	r3, r2
 80010f8:	eb42 0303 	adc.w	r3, r2, r3
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80010fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001106:	f7ff f8bb 	bl	8000280 <__aeabi_uldivmod>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4611      	mov	r1, r2
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <UART_SetConfig+0x2d4>)
 8001112:	fba3 2301 	umull	r2, r3, r3, r1
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2264      	movs	r2, #100	@ 0x64
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	1acb      	subs	r3, r1, r3
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001126:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <UART_SetConfig+0x2d4>)
 8001128:	fba3 2302 	umull	r2, r3, r3, r2
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001134:	441c      	add	r4, r3
 8001136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800113a:	2200      	movs	r2, #0
 800113c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001140:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001148:	4642      	mov	r2, r8
 800114a:	464b      	mov	r3, r9
 800114c:	1891      	adds	r1, r2, r2
 800114e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001150:	415b      	adcs	r3, r3
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001158:	4641      	mov	r1, r8
 800115a:	1851      	adds	r1, r2, r1
 800115c:	6339      	str	r1, [r7, #48]	@ 0x30
 800115e:	4649      	mov	r1, r9
 8001160:	414b      	adcs	r3, r1
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001170:	4659      	mov	r1, fp
 8001172:	00cb      	lsls	r3, r1, #3
 8001174:	4651      	mov	r1, sl
 8001176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800117a:	4651      	mov	r1, sl
 800117c:	00ca      	lsls	r2, r1, #3
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	4603      	mov	r3, r0
 8001184:	4642      	mov	r2, r8
 8001186:	189b      	adds	r3, r3, r2
 8001188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800118c:	464b      	mov	r3, r9
 800118e:	460a      	mov	r2, r1
 8001190:	eb42 0303 	adc.w	r3, r2, r3
 8001194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80011a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80011a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80011ac:	460b      	mov	r3, r1
 80011ae:	18db      	adds	r3, r3, r3
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b2:	4613      	mov	r3, r2
 80011b4:	eb42 0303 	adc.w	r3, r2, r3
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80011c2:	f7ff f85d 	bl	8000280 <__aeabi_uldivmod>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <UART_SetConfig+0x2d4>)
 80011cc:	fba3 1302 	umull	r1, r3, r3, r2
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	2164      	movs	r1, #100	@ 0x64
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	3332      	adds	r3, #50	@ 0x32
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <UART_SetConfig+0x2d4>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	095b      	lsrs	r3, r3, #5
 80011e6:	f003 0207 	and.w	r2, r3, #7
 80011ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4422      	add	r2, r4
 80011f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80011f4:	e106      	b.n	8001404 <UART_SetConfig+0x4d8>
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001208:	2200      	movs	r2, #0
 800120a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800120e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001216:	4642      	mov	r2, r8
 8001218:	464b      	mov	r3, r9
 800121a:	1891      	adds	r1, r2, r2
 800121c:	6239      	str	r1, [r7, #32]
 800121e:	415b      	adcs	r3, r3
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
 8001222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001226:	4641      	mov	r1, r8
 8001228:	1854      	adds	r4, r2, r1
 800122a:	4649      	mov	r1, r9
 800122c:	eb43 0501 	adc.w	r5, r3, r1
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	00eb      	lsls	r3, r5, #3
 800123a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800123e:	00e2      	lsls	r2, r4, #3
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	4643      	mov	r3, r8
 8001246:	18e3      	adds	r3, r4, r3
 8001248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800124c:	464b      	mov	r3, r9
 800124e:	eb45 0303 	adc.w	r3, r5, r3
 8001252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001272:	4629      	mov	r1, r5
 8001274:	008b      	lsls	r3, r1, #2
 8001276:	4621      	mov	r1, r4
 8001278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800127c:	4621      	mov	r1, r4
 800127e:	008a      	lsls	r2, r1, #2
 8001280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001284:	f7fe fffc 	bl	8000280 <__aeabi_uldivmod>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4b60      	ldr	r3, [pc, #384]	@ (8001410 <UART_SetConfig+0x4e4>)
 800128e:	fba3 2302 	umull	r2, r3, r3, r2
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	011c      	lsls	r4, r3, #4
 8001296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800129a:	2200      	movs	r2, #0
 800129c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80012a8:	4642      	mov	r2, r8
 80012aa:	464b      	mov	r3, r9
 80012ac:	1891      	adds	r1, r2, r2
 80012ae:	61b9      	str	r1, [r7, #24]
 80012b0:	415b      	adcs	r3, r3
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012b8:	4641      	mov	r1, r8
 80012ba:	1851      	adds	r1, r2, r1
 80012bc:	6139      	str	r1, [r7, #16]
 80012be:	4649      	mov	r1, r9
 80012c0:	414b      	adcs	r3, r1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012d0:	4659      	mov	r1, fp
 80012d2:	00cb      	lsls	r3, r1, #3
 80012d4:	4651      	mov	r1, sl
 80012d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012da:	4651      	mov	r1, sl
 80012dc:	00ca      	lsls	r2, r1, #3
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	4642      	mov	r2, r8
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012ec:	464b      	mov	r3, r9
 80012ee:	460a      	mov	r2, r1
 80012f0:	eb42 0303 	adc.w	r3, r2, r3
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80012f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001302:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001310:	4649      	mov	r1, r9
 8001312:	008b      	lsls	r3, r1, #2
 8001314:	4641      	mov	r1, r8
 8001316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800131a:	4641      	mov	r1, r8
 800131c:	008a      	lsls	r2, r1, #2
 800131e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001322:	f7fe ffad 	bl	8000280 <__aeabi_uldivmod>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4611      	mov	r1, r2
 800132c:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <UART_SetConfig+0x4e4>)
 800132e:	fba3 2301 	umull	r2, r3, r3, r1
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2264      	movs	r2, #100	@ 0x64
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	3332      	adds	r3, #50	@ 0x32
 8001340:	4a33      	ldr	r2, [pc, #204]	@ (8001410 <UART_SetConfig+0x4e4>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800134c:	441c      	add	r4, r3
 800134e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001352:	2200      	movs	r2, #0
 8001354:	673b      	str	r3, [r7, #112]	@ 0x70
 8001356:	677a      	str	r2, [r7, #116]	@ 0x74
 8001358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800135c:	4642      	mov	r2, r8
 800135e:	464b      	mov	r3, r9
 8001360:	1891      	adds	r1, r2, r2
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	415b      	adcs	r3, r3
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136c:	4641      	mov	r1, r8
 800136e:	1851      	adds	r1, r2, r1
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	4649      	mov	r1, r9
 8001374:	414b      	adcs	r3, r1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001384:	4659      	mov	r1, fp
 8001386:	00cb      	lsls	r3, r1, #3
 8001388:	4651      	mov	r1, sl
 800138a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800138e:	4651      	mov	r1, sl
 8001390:	00ca      	lsls	r2, r1, #3
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	4603      	mov	r3, r0
 8001398:	4642      	mov	r2, r8
 800139a:	189b      	adds	r3, r3, r2
 800139c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800139e:	464b      	mov	r3, r9
 80013a0:	460a      	mov	r2, r1
 80013a2:	eb42 0303 	adc.w	r3, r2, r3
 80013a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80013b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80013c0:	4649      	mov	r1, r9
 80013c2:	008b      	lsls	r3, r1, #2
 80013c4:	4641      	mov	r1, r8
 80013c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80013ca:	4641      	mov	r1, r8
 80013cc:	008a      	lsls	r2, r1, #2
 80013ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80013d2:	f7fe ff55 	bl	8000280 <__aeabi_uldivmod>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <UART_SetConfig+0x4e4>)
 80013dc:	fba3 1302 	umull	r1, r3, r3, r2
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	2164      	movs	r1, #100	@ 0x64
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	3332      	adds	r3, #50	@ 0x32
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <UART_SetConfig+0x4e4>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	f003 020f 	and.w	r2, r3, #15
 80013fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4422      	add	r2, r4
 8001402:	609a      	str	r2, [r3, #8]
}
 8001404:	bf00      	nop
 8001406:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800140a:	46bd      	mov	sp, r7
 800140c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001410:	51eb851f 	.word	0x51eb851f

08001414 <__io_putchar>:

char message[20] = "Hello from STM32\r\n" ;


int __io_putchar(int ch)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	230a      	movs	r3, #10
 8001420:	2201      	movs	r2, #1
 8001422:	4804      	ldr	r0, [pc, #16]	@ (8001434 <__io_putchar+0x20>)
 8001424:	f7ff fc3a 	bl	8000c9c <HAL_UART_Transmit>
	return ch ;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000088 	.word	0x20000088

08001438 <main>:


int main()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0

	HAL_Init() ;
 800143c:	f7ff f898 	bl	8000570 <HAL_Init>
	uart_init();
 8001440:	f000 f810 	bl	8001464 <uart_init>



	while(1)
	{
		printf("Printf is being used ! \n\r") ;
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <main+0x1c>)
 8001446:	f000 f9fd 	bl	8001844 <iprintf>
		HAL_Delay(10) ;
 800144a:	200a      	movs	r0, #10
 800144c:	f7ff f90a 	bl	8000664 <HAL_Delay>
		printf("Printf is being used ! \n\r") ;
 8001450:	bf00      	nop
 8001452:	e7f7      	b.n	8001444 <main+0xc>
 8001454:	08002538 	.word	0x08002538

08001458 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 800145c:	f7ff f8e2 	bl	8000624 <HAL_IncTick>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <uart_init>:


void uart_init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <uart_init+0xb0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <uart_init+0xb0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <uart_init+0xb0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <uart_init+0xb0>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a1d      	ldr	r2, [pc, #116]	@ (8001514 <uart_init+0xb0>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <uart_init+0xb0>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 80014b2:	230c      	movs	r3, #12
 80014b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 80014ba:	2307      	movs	r3, #7
 80014bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <uart_init+0xb4>)
 80014ce:	f7ff f9d3 	bl	8000878 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <uart_init+0xb8>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <uart_init+0xbc>)
 80014d6:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <uart_init+0xb8>)
 80014da:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014de:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <uart_init+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <uart_init+0xb8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <uart_init+0xb8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <uart_init+0xb8>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <uart_init+0xb8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <uart_init+0xb8>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <uart_init+0xb8>)
 8001506:	f7ff fb6f 	bl	8000be8 <HAL_UART_Init>




}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	20000088 	.word	0x20000088
 8001520:	40004400 	.word	0x40004400

08001524 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e00a      	b.n	800154c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001536:	f3af 8000 	nop.w
 800153a:	4601      	mov	r1, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf0      	blt.n	8001536 <_read+0x12>
  }

  return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e009      	b.n	8001584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff4b 	bl	8001414 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf1      	blt.n	8001570 <_write+0x12>
  }
  return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_close>:

int _close(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015be:	605a      	str	r2, [r3, #4]
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_isatty>:

int _isatty(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	@ (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f000 f9ac 	bl	800198c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20018000 	.word	0x20018000
 8001660:	00000400 	.word	0x00000400
 8001664:	200000d0 	.word	0x200000d0
 8001668:	20000220 	.word	0x20000220

0800166c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800166c:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800166e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001670:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800169a:	f000 f97d 	bl	8001998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fecb 	bl	8001438 <main>

080016a2 <LoopForever>:

LoopForever:
  b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   r0, =_estack
 80016a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016b0:	080025a0 	.word	0x080025a0
  ldr r2, =_sbss
 80016b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016b8:	20000220 	.word	0x20000220

080016bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <std>:
 80016c0:	2300      	movs	r3, #0
 80016c2:	b510      	push	{r4, lr}
 80016c4:	4604      	mov	r4, r0
 80016c6:	e9c0 3300 	strd	r3, r3, [r0]
 80016ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016ce:	6083      	str	r3, [r0, #8]
 80016d0:	8181      	strh	r1, [r0, #12]
 80016d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80016d4:	81c2      	strh	r2, [r0, #14]
 80016d6:	6183      	str	r3, [r0, #24]
 80016d8:	4619      	mov	r1, r3
 80016da:	2208      	movs	r2, #8
 80016dc:	305c      	adds	r0, #92	@ 0x5c
 80016de:	f000 f906 	bl	80018ee <memset>
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <std+0x58>)
 80016e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <std+0x5c>)
 80016e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <std+0x60>)
 80016ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <std+0x64>)
 80016f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <std+0x68>)
 80016f4:	6224      	str	r4, [r4, #32]
 80016f6:	429c      	cmp	r4, r3
 80016f8:	d006      	beq.n	8001708 <std+0x48>
 80016fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016fe:	4294      	cmp	r4, r2
 8001700:	d002      	beq.n	8001708 <std+0x48>
 8001702:	33d0      	adds	r3, #208	@ 0xd0
 8001704:	429c      	cmp	r4, r3
 8001706:	d105      	bne.n	8001714 <std+0x54>
 8001708:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001710:	f000 b966 	b.w	80019e0 <__retarget_lock_init_recursive>
 8001714:	bd10      	pop	{r4, pc}
 8001716:	bf00      	nop
 8001718:	08001869 	.word	0x08001869
 800171c:	0800188b 	.word	0x0800188b
 8001720:	080018c3 	.word	0x080018c3
 8001724:	080018e7 	.word	0x080018e7
 8001728:	200000d4 	.word	0x200000d4

0800172c <stdio_exit_handler>:
 800172c:	4a02      	ldr	r2, [pc, #8]	@ (8001738 <stdio_exit_handler+0xc>)
 800172e:	4903      	ldr	r1, [pc, #12]	@ (800173c <stdio_exit_handler+0x10>)
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <stdio_exit_handler+0x14>)
 8001732:	f000 b869 	b.w	8001808 <_fwalk_sglue>
 8001736:	bf00      	nop
 8001738:	2000000c 	.word	0x2000000c
 800173c:	08002281 	.word	0x08002281
 8001740:	2000001c 	.word	0x2000001c

08001744 <cleanup_stdio>:
 8001744:	6841      	ldr	r1, [r0, #4]
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <cleanup_stdio+0x34>)
 8001748:	4299      	cmp	r1, r3
 800174a:	b510      	push	{r4, lr}
 800174c:	4604      	mov	r4, r0
 800174e:	d001      	beq.n	8001754 <cleanup_stdio+0x10>
 8001750:	f000 fd96 	bl	8002280 <_fflush_r>
 8001754:	68a1      	ldr	r1, [r4, #8]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <cleanup_stdio+0x38>)
 8001758:	4299      	cmp	r1, r3
 800175a:	d002      	beq.n	8001762 <cleanup_stdio+0x1e>
 800175c:	4620      	mov	r0, r4
 800175e:	f000 fd8f 	bl	8002280 <_fflush_r>
 8001762:	68e1      	ldr	r1, [r4, #12]
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <cleanup_stdio+0x3c>)
 8001766:	4299      	cmp	r1, r3
 8001768:	d004      	beq.n	8001774 <cleanup_stdio+0x30>
 800176a:	4620      	mov	r0, r4
 800176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001770:	f000 bd86 	b.w	8002280 <_fflush_r>
 8001774:	bd10      	pop	{r4, pc}
 8001776:	bf00      	nop
 8001778:	200000d4 	.word	0x200000d4
 800177c:	2000013c 	.word	0x2000013c
 8001780:	200001a4 	.word	0x200001a4

08001784 <global_stdio_init.part.0>:
 8001784:	b510      	push	{r4, lr}
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <global_stdio_init.part.0+0x30>)
 8001788:	4c0b      	ldr	r4, [pc, #44]	@ (80017b8 <global_stdio_init.part.0+0x34>)
 800178a:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <global_stdio_init.part.0+0x38>)
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	4620      	mov	r0, r4
 8001790:	2200      	movs	r2, #0
 8001792:	2104      	movs	r1, #4
 8001794:	f7ff ff94 	bl	80016c0 <std>
 8001798:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800179c:	2201      	movs	r2, #1
 800179e:	2109      	movs	r1, #9
 80017a0:	f7ff ff8e 	bl	80016c0 <std>
 80017a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80017a8:	2202      	movs	r2, #2
 80017aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ae:	2112      	movs	r1, #18
 80017b0:	f7ff bf86 	b.w	80016c0 <std>
 80017b4:	2000020c 	.word	0x2000020c
 80017b8:	200000d4 	.word	0x200000d4
 80017bc:	0800172d 	.word	0x0800172d

080017c0 <__sfp_lock_acquire>:
 80017c0:	4801      	ldr	r0, [pc, #4]	@ (80017c8 <__sfp_lock_acquire+0x8>)
 80017c2:	f000 b90e 	b.w	80019e2 <__retarget_lock_acquire_recursive>
 80017c6:	bf00      	nop
 80017c8:	20000215 	.word	0x20000215

080017cc <__sfp_lock_release>:
 80017cc:	4801      	ldr	r0, [pc, #4]	@ (80017d4 <__sfp_lock_release+0x8>)
 80017ce:	f000 b909 	b.w	80019e4 <__retarget_lock_release_recursive>
 80017d2:	bf00      	nop
 80017d4:	20000215 	.word	0x20000215

080017d8 <__sinit>:
 80017d8:	b510      	push	{r4, lr}
 80017da:	4604      	mov	r4, r0
 80017dc:	f7ff fff0 	bl	80017c0 <__sfp_lock_acquire>
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	b11b      	cbz	r3, 80017ec <__sinit+0x14>
 80017e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e8:	f7ff bff0 	b.w	80017cc <__sfp_lock_release>
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <__sinit+0x28>)
 80017ee:	6223      	str	r3, [r4, #32]
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__sinit+0x2c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f5      	bne.n	80017e4 <__sinit+0xc>
 80017f8:	f7ff ffc4 	bl	8001784 <global_stdio_init.part.0>
 80017fc:	e7f2      	b.n	80017e4 <__sinit+0xc>
 80017fe:	bf00      	nop
 8001800:	08001745 	.word	0x08001745
 8001804:	2000020c 	.word	0x2000020c

08001808 <_fwalk_sglue>:
 8001808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800180c:	4607      	mov	r7, r0
 800180e:	4688      	mov	r8, r1
 8001810:	4614      	mov	r4, r2
 8001812:	2600      	movs	r6, #0
 8001814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001818:	f1b9 0901 	subs.w	r9, r9, #1
 800181c:	d505      	bpl.n	800182a <_fwalk_sglue+0x22>
 800181e:	6824      	ldr	r4, [r4, #0]
 8001820:	2c00      	cmp	r4, #0
 8001822:	d1f7      	bne.n	8001814 <_fwalk_sglue+0xc>
 8001824:	4630      	mov	r0, r6
 8001826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800182a:	89ab      	ldrh	r3, [r5, #12]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d907      	bls.n	8001840 <_fwalk_sglue+0x38>
 8001830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001834:	3301      	adds	r3, #1
 8001836:	d003      	beq.n	8001840 <_fwalk_sglue+0x38>
 8001838:	4629      	mov	r1, r5
 800183a:	4638      	mov	r0, r7
 800183c:	47c0      	blx	r8
 800183e:	4306      	orrs	r6, r0
 8001840:	3568      	adds	r5, #104	@ 0x68
 8001842:	e7e9      	b.n	8001818 <_fwalk_sglue+0x10>

08001844 <iprintf>:
 8001844:	b40f      	push	{r0, r1, r2, r3}
 8001846:	b507      	push	{r0, r1, r2, lr}
 8001848:	4906      	ldr	r1, [pc, #24]	@ (8001864 <iprintf+0x20>)
 800184a:	ab04      	add	r3, sp, #16
 800184c:	6808      	ldr	r0, [r1, #0]
 800184e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001852:	6881      	ldr	r1, [r0, #8]
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	f000 f9e9 	bl	8001c2c <_vfiprintf_r>
 800185a:	b003      	add	sp, #12
 800185c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001860:	b004      	add	sp, #16
 8001862:	4770      	bx	lr
 8001864:	20000018 	.word	0x20000018

08001868 <__sread>:
 8001868:	b510      	push	{r4, lr}
 800186a:	460c      	mov	r4, r1
 800186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001870:	f000 f868 	bl	8001944 <_read_r>
 8001874:	2800      	cmp	r0, #0
 8001876:	bfab      	itete	ge
 8001878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800187a:	89a3      	ldrhlt	r3, [r4, #12]
 800187c:	181b      	addge	r3, r3, r0
 800187e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001882:	bfac      	ite	ge
 8001884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001886:	81a3      	strhlt	r3, [r4, #12]
 8001888:	bd10      	pop	{r4, pc}

0800188a <__swrite>:
 800188a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188e:	461f      	mov	r7, r3
 8001890:	898b      	ldrh	r3, [r1, #12]
 8001892:	05db      	lsls	r3, r3, #23
 8001894:	4605      	mov	r5, r0
 8001896:	460c      	mov	r4, r1
 8001898:	4616      	mov	r6, r2
 800189a:	d505      	bpl.n	80018a8 <__swrite+0x1e>
 800189c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a0:	2302      	movs	r3, #2
 80018a2:	2200      	movs	r2, #0
 80018a4:	f000 f83c 	bl	8001920 <_lseek_r>
 80018a8:	89a3      	ldrh	r3, [r4, #12]
 80018aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b2:	81a3      	strh	r3, [r4, #12]
 80018b4:	4632      	mov	r2, r6
 80018b6:	463b      	mov	r3, r7
 80018b8:	4628      	mov	r0, r5
 80018ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018be:	f000 b853 	b.w	8001968 <_write_r>

080018c2 <__sseek>:
 80018c2:	b510      	push	{r4, lr}
 80018c4:	460c      	mov	r4, r1
 80018c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ca:	f000 f829 	bl	8001920 <_lseek_r>
 80018ce:	1c43      	adds	r3, r0, #1
 80018d0:	89a3      	ldrh	r3, [r4, #12]
 80018d2:	bf15      	itete	ne
 80018d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018de:	81a3      	strheq	r3, [r4, #12]
 80018e0:	bf18      	it	ne
 80018e2:	81a3      	strhne	r3, [r4, #12]
 80018e4:	bd10      	pop	{r4, pc}

080018e6 <__sclose>:
 80018e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ea:	f000 b809 	b.w	8001900 <_close_r>

080018ee <memset>:
 80018ee:	4402      	add	r2, r0
 80018f0:	4603      	mov	r3, r0
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d100      	bne.n	80018f8 <memset+0xa>
 80018f6:	4770      	bx	lr
 80018f8:	f803 1b01 	strb.w	r1, [r3], #1
 80018fc:	e7f9      	b.n	80018f2 <memset+0x4>
	...

08001900 <_close_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4d06      	ldr	r5, [pc, #24]	@ (800191c <_close_r+0x1c>)
 8001904:	2300      	movs	r3, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	f7ff fe43 	bl	8001596 <_close>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_close_r+0x1a>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_close_r+0x1a>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	20000210 	.word	0x20000210

08001920 <_lseek_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4d07      	ldr	r5, [pc, #28]	@ (8001940 <_lseek_r+0x20>)
 8001924:	4604      	mov	r4, r0
 8001926:	4608      	mov	r0, r1
 8001928:	4611      	mov	r1, r2
 800192a:	2200      	movs	r2, #0
 800192c:	602a      	str	r2, [r5, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fe58 	bl	80015e4 <_lseek>
 8001934:	1c43      	adds	r3, r0, #1
 8001936:	d102      	bne.n	800193e <_lseek_r+0x1e>
 8001938:	682b      	ldr	r3, [r5, #0]
 800193a:	b103      	cbz	r3, 800193e <_lseek_r+0x1e>
 800193c:	6023      	str	r3, [r4, #0]
 800193e:	bd38      	pop	{r3, r4, r5, pc}
 8001940:	20000210 	.word	0x20000210

08001944 <_read_r>:
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	4d07      	ldr	r5, [pc, #28]	@ (8001964 <_read_r+0x20>)
 8001948:	4604      	mov	r4, r0
 800194a:	4608      	mov	r0, r1
 800194c:	4611      	mov	r1, r2
 800194e:	2200      	movs	r2, #0
 8001950:	602a      	str	r2, [r5, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	f7ff fde6 	bl	8001524 <_read>
 8001958:	1c43      	adds	r3, r0, #1
 800195a:	d102      	bne.n	8001962 <_read_r+0x1e>
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	b103      	cbz	r3, 8001962 <_read_r+0x1e>
 8001960:	6023      	str	r3, [r4, #0]
 8001962:	bd38      	pop	{r3, r4, r5, pc}
 8001964:	20000210 	.word	0x20000210

08001968 <_write_r>:
 8001968:	b538      	push	{r3, r4, r5, lr}
 800196a:	4d07      	ldr	r5, [pc, #28]	@ (8001988 <_write_r+0x20>)
 800196c:	4604      	mov	r4, r0
 800196e:	4608      	mov	r0, r1
 8001970:	4611      	mov	r1, r2
 8001972:	2200      	movs	r2, #0
 8001974:	602a      	str	r2, [r5, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	f7ff fdf1 	bl	800155e <_write>
 800197c:	1c43      	adds	r3, r0, #1
 800197e:	d102      	bne.n	8001986 <_write_r+0x1e>
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	b103      	cbz	r3, 8001986 <_write_r+0x1e>
 8001984:	6023      	str	r3, [r4, #0]
 8001986:	bd38      	pop	{r3, r4, r5, pc}
 8001988:	20000210 	.word	0x20000210

0800198c <__errno>:
 800198c:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <__errno+0x8>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000018 	.word	0x20000018

08001998 <__libc_init_array>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	4d0d      	ldr	r5, [pc, #52]	@ (80019d0 <__libc_init_array+0x38>)
 800199c:	4c0d      	ldr	r4, [pc, #52]	@ (80019d4 <__libc_init_array+0x3c>)
 800199e:	1b64      	subs	r4, r4, r5
 80019a0:	10a4      	asrs	r4, r4, #2
 80019a2:	2600      	movs	r6, #0
 80019a4:	42a6      	cmp	r6, r4
 80019a6:	d109      	bne.n	80019bc <__libc_init_array+0x24>
 80019a8:	4d0b      	ldr	r5, [pc, #44]	@ (80019d8 <__libc_init_array+0x40>)
 80019aa:	4c0c      	ldr	r4, [pc, #48]	@ (80019dc <__libc_init_array+0x44>)
 80019ac:	f000 fdb8 	bl	8002520 <_init>
 80019b0:	1b64      	subs	r4, r4, r5
 80019b2:	10a4      	asrs	r4, r4, #2
 80019b4:	2600      	movs	r6, #0
 80019b6:	42a6      	cmp	r6, r4
 80019b8:	d105      	bne.n	80019c6 <__libc_init_array+0x2e>
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c0:	4798      	blx	r3
 80019c2:	3601      	adds	r6, #1
 80019c4:	e7ee      	b.n	80019a4 <__libc_init_array+0xc>
 80019c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ca:	4798      	blx	r3
 80019cc:	3601      	adds	r6, #1
 80019ce:	e7f2      	b.n	80019b6 <__libc_init_array+0x1e>
 80019d0:	08002598 	.word	0x08002598
 80019d4:	08002598 	.word	0x08002598
 80019d8:	08002598 	.word	0x08002598
 80019dc:	0800259c 	.word	0x0800259c

080019e0 <__retarget_lock_init_recursive>:
 80019e0:	4770      	bx	lr

080019e2 <__retarget_lock_acquire_recursive>:
 80019e2:	4770      	bx	lr

080019e4 <__retarget_lock_release_recursive>:
 80019e4:	4770      	bx	lr
	...

080019e8 <_free_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4605      	mov	r5, r0
 80019ec:	2900      	cmp	r1, #0
 80019ee:	d041      	beq.n	8001a74 <_free_r+0x8c>
 80019f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019f4:	1f0c      	subs	r4, r1, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bfb8      	it	lt
 80019fa:	18e4      	addlt	r4, r4, r3
 80019fc:	f000 f8e0 	bl	8001bc0 <__malloc_lock>
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <_free_r+0x90>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	b933      	cbnz	r3, 8001a14 <_free_r+0x2c>
 8001a06:	6063      	str	r3, [r4, #4]
 8001a08:	6014      	str	r4, [r2, #0]
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a10:	f000 b8dc 	b.w	8001bcc <__malloc_unlock>
 8001a14:	42a3      	cmp	r3, r4
 8001a16:	d908      	bls.n	8001a2a <_free_r+0x42>
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	1821      	adds	r1, r4, r0
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	bf01      	itttt	eq
 8001a20:	6819      	ldreq	r1, [r3, #0]
 8001a22:	685b      	ldreq	r3, [r3, #4]
 8001a24:	1809      	addeq	r1, r1, r0
 8001a26:	6021      	streq	r1, [r4, #0]
 8001a28:	e7ed      	b.n	8001a06 <_free_r+0x1e>
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	b10b      	cbz	r3, 8001a34 <_free_r+0x4c>
 8001a30:	42a3      	cmp	r3, r4
 8001a32:	d9fa      	bls.n	8001a2a <_free_r+0x42>
 8001a34:	6811      	ldr	r1, [r2, #0]
 8001a36:	1850      	adds	r0, r2, r1
 8001a38:	42a0      	cmp	r0, r4
 8001a3a:	d10b      	bne.n	8001a54 <_free_r+0x6c>
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	4401      	add	r1, r0
 8001a40:	1850      	adds	r0, r2, r1
 8001a42:	4283      	cmp	r3, r0
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	d1e0      	bne.n	8001a0a <_free_r+0x22>
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6053      	str	r3, [r2, #4]
 8001a4e:	4408      	add	r0, r1
 8001a50:	6010      	str	r0, [r2, #0]
 8001a52:	e7da      	b.n	8001a0a <_free_r+0x22>
 8001a54:	d902      	bls.n	8001a5c <_free_r+0x74>
 8001a56:	230c      	movs	r3, #12
 8001a58:	602b      	str	r3, [r5, #0]
 8001a5a:	e7d6      	b.n	8001a0a <_free_r+0x22>
 8001a5c:	6820      	ldr	r0, [r4, #0]
 8001a5e:	1821      	adds	r1, r4, r0
 8001a60:	428b      	cmp	r3, r1
 8001a62:	bf04      	itt	eq
 8001a64:	6819      	ldreq	r1, [r3, #0]
 8001a66:	685b      	ldreq	r3, [r3, #4]
 8001a68:	6063      	str	r3, [r4, #4]
 8001a6a:	bf04      	itt	eq
 8001a6c:	1809      	addeq	r1, r1, r0
 8001a6e:	6021      	streq	r1, [r4, #0]
 8001a70:	6054      	str	r4, [r2, #4]
 8001a72:	e7ca      	b.n	8001a0a <_free_r+0x22>
 8001a74:	bd38      	pop	{r3, r4, r5, pc}
 8001a76:	bf00      	nop
 8001a78:	2000021c 	.word	0x2000021c

08001a7c <sbrk_aligned>:
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8001abc <sbrk_aligned+0x40>)
 8001a80:	460c      	mov	r4, r1
 8001a82:	6831      	ldr	r1, [r6, #0]
 8001a84:	4605      	mov	r5, r0
 8001a86:	b911      	cbnz	r1, 8001a8e <sbrk_aligned+0x12>
 8001a88:	f000 fcb6 	bl	80023f8 <_sbrk_r>
 8001a8c:	6030      	str	r0, [r6, #0]
 8001a8e:	4621      	mov	r1, r4
 8001a90:	4628      	mov	r0, r5
 8001a92:	f000 fcb1 	bl	80023f8 <_sbrk_r>
 8001a96:	1c43      	adds	r3, r0, #1
 8001a98:	d103      	bne.n	8001aa2 <sbrk_aligned+0x26>
 8001a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
 8001aa2:	1cc4      	adds	r4, r0, #3
 8001aa4:	f024 0403 	bic.w	r4, r4, #3
 8001aa8:	42a0      	cmp	r0, r4
 8001aaa:	d0f8      	beq.n	8001a9e <sbrk_aligned+0x22>
 8001aac:	1a21      	subs	r1, r4, r0
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f000 fca2 	bl	80023f8 <_sbrk_r>
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	d1f2      	bne.n	8001a9e <sbrk_aligned+0x22>
 8001ab8:	e7ef      	b.n	8001a9a <sbrk_aligned+0x1e>
 8001aba:	bf00      	nop
 8001abc:	20000218 	.word	0x20000218

08001ac0 <_malloc_r>:
 8001ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac4:	1ccd      	adds	r5, r1, #3
 8001ac6:	f025 0503 	bic.w	r5, r5, #3
 8001aca:	3508      	adds	r5, #8
 8001acc:	2d0c      	cmp	r5, #12
 8001ace:	bf38      	it	cc
 8001ad0:	250c      	movcc	r5, #12
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	4606      	mov	r6, r0
 8001ad6:	db01      	blt.n	8001adc <_malloc_r+0x1c>
 8001ad8:	42a9      	cmp	r1, r5
 8001ada:	d904      	bls.n	8001ae6 <_malloc_r+0x26>
 8001adc:	230c      	movs	r3, #12
 8001ade:	6033      	str	r3, [r6, #0]
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001bbc <_malloc_r+0xfc>
 8001aea:	f000 f869 	bl	8001bc0 <__malloc_lock>
 8001aee:	f8d8 3000 	ldr.w	r3, [r8]
 8001af2:	461c      	mov	r4, r3
 8001af4:	bb44      	cbnz	r4, 8001b48 <_malloc_r+0x88>
 8001af6:	4629      	mov	r1, r5
 8001af8:	4630      	mov	r0, r6
 8001afa:	f7ff ffbf 	bl	8001a7c <sbrk_aligned>
 8001afe:	1c43      	adds	r3, r0, #1
 8001b00:	4604      	mov	r4, r0
 8001b02:	d158      	bne.n	8001bb6 <_malloc_r+0xf6>
 8001b04:	f8d8 4000 	ldr.w	r4, [r8]
 8001b08:	4627      	mov	r7, r4
 8001b0a:	2f00      	cmp	r7, #0
 8001b0c:	d143      	bne.n	8001b96 <_malloc_r+0xd6>
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d04b      	beq.n	8001baa <_malloc_r+0xea>
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	4639      	mov	r1, r7
 8001b16:	4630      	mov	r0, r6
 8001b18:	eb04 0903 	add.w	r9, r4, r3
 8001b1c:	f000 fc6c 	bl	80023f8 <_sbrk_r>
 8001b20:	4581      	cmp	r9, r0
 8001b22:	d142      	bne.n	8001baa <_malloc_r+0xea>
 8001b24:	6821      	ldr	r1, [r4, #0]
 8001b26:	1a6d      	subs	r5, r5, r1
 8001b28:	4629      	mov	r1, r5
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f7ff ffa6 	bl	8001a7c <sbrk_aligned>
 8001b30:	3001      	adds	r0, #1
 8001b32:	d03a      	beq.n	8001baa <_malloc_r+0xea>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	442b      	add	r3, r5
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	bb62      	cbnz	r2, 8001b9c <_malloc_r+0xdc>
 8001b42:	f8c8 7000 	str.w	r7, [r8]
 8001b46:	e00f      	b.n	8001b68 <_malloc_r+0xa8>
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	1b52      	subs	r2, r2, r5
 8001b4c:	d420      	bmi.n	8001b90 <_malloc_r+0xd0>
 8001b4e:	2a0b      	cmp	r2, #11
 8001b50:	d917      	bls.n	8001b82 <_malloc_r+0xc2>
 8001b52:	1961      	adds	r1, r4, r5
 8001b54:	42a3      	cmp	r3, r4
 8001b56:	6025      	str	r5, [r4, #0]
 8001b58:	bf18      	it	ne
 8001b5a:	6059      	strne	r1, [r3, #4]
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	bf08      	it	eq
 8001b60:	f8c8 1000 	streq.w	r1, [r8]
 8001b64:	5162      	str	r2, [r4, r5]
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 f82f 	bl	8001bcc <__malloc_unlock>
 8001b6e:	f104 000b 	add.w	r0, r4, #11
 8001b72:	1d23      	adds	r3, r4, #4
 8001b74:	f020 0007 	bic.w	r0, r0, #7
 8001b78:	1ac2      	subs	r2, r0, r3
 8001b7a:	bf1c      	itt	ne
 8001b7c:	1a1b      	subne	r3, r3, r0
 8001b7e:	50a3      	strne	r3, [r4, r2]
 8001b80:	e7af      	b.n	8001ae2 <_malloc_r+0x22>
 8001b82:	6862      	ldr	r2, [r4, #4]
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	bf0c      	ite	eq
 8001b88:	f8c8 2000 	streq.w	r2, [r8]
 8001b8c:	605a      	strne	r2, [r3, #4]
 8001b8e:	e7eb      	b.n	8001b68 <_malloc_r+0xa8>
 8001b90:	4623      	mov	r3, r4
 8001b92:	6864      	ldr	r4, [r4, #4]
 8001b94:	e7ae      	b.n	8001af4 <_malloc_r+0x34>
 8001b96:	463c      	mov	r4, r7
 8001b98:	687f      	ldr	r7, [r7, #4]
 8001b9a:	e7b6      	b.n	8001b0a <_malloc_r+0x4a>
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	d1fb      	bne.n	8001b9c <_malloc_r+0xdc>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6053      	str	r3, [r2, #4]
 8001ba8:	e7de      	b.n	8001b68 <_malloc_r+0xa8>
 8001baa:	230c      	movs	r3, #12
 8001bac:	6033      	str	r3, [r6, #0]
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f000 f80c 	bl	8001bcc <__malloc_unlock>
 8001bb4:	e794      	b.n	8001ae0 <_malloc_r+0x20>
 8001bb6:	6005      	str	r5, [r0, #0]
 8001bb8:	e7d6      	b.n	8001b68 <_malloc_r+0xa8>
 8001bba:	bf00      	nop
 8001bbc:	2000021c 	.word	0x2000021c

08001bc0 <__malloc_lock>:
 8001bc0:	4801      	ldr	r0, [pc, #4]	@ (8001bc8 <__malloc_lock+0x8>)
 8001bc2:	f7ff bf0e 	b.w	80019e2 <__retarget_lock_acquire_recursive>
 8001bc6:	bf00      	nop
 8001bc8:	20000214 	.word	0x20000214

08001bcc <__malloc_unlock>:
 8001bcc:	4801      	ldr	r0, [pc, #4]	@ (8001bd4 <__malloc_unlock+0x8>)
 8001bce:	f7ff bf09 	b.w	80019e4 <__retarget_lock_release_recursive>
 8001bd2:	bf00      	nop
 8001bd4:	20000214 	.word	0x20000214

08001bd8 <__sfputc_r>:
 8001bd8:	6893      	ldr	r3, [r2, #8]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	b410      	push	{r4}
 8001be0:	6093      	str	r3, [r2, #8]
 8001be2:	da08      	bge.n	8001bf6 <__sfputc_r+0x1e>
 8001be4:	6994      	ldr	r4, [r2, #24]
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	db01      	blt.n	8001bee <__sfputc_r+0x16>
 8001bea:	290a      	cmp	r1, #10
 8001bec:	d103      	bne.n	8001bf6 <__sfputc_r+0x1e>
 8001bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bf2:	f000 bb6d 	b.w	80022d0 <__swbuf_r>
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	1c58      	adds	r0, r3, #1
 8001bfa:	6010      	str	r0, [r2, #0]
 8001bfc:	7019      	strb	r1, [r3, #0]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <__sfputs_r>:
 8001c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c08:	4606      	mov	r6, r0
 8001c0a:	460f      	mov	r7, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	18d5      	adds	r5, r2, r3
 8001c10:	42ac      	cmp	r4, r5
 8001c12:	d101      	bne.n	8001c18 <__sfputs_r+0x12>
 8001c14:	2000      	movs	r0, #0
 8001c16:	e007      	b.n	8001c28 <__sfputs_r+0x22>
 8001c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c1c:	463a      	mov	r2, r7
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff ffda 	bl	8001bd8 <__sfputc_r>
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	d1f3      	bne.n	8001c10 <__sfputs_r+0xa>
 8001c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c2c <_vfiprintf_r>:
 8001c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c30:	460d      	mov	r5, r1
 8001c32:	b09d      	sub	sp, #116	@ 0x74
 8001c34:	4614      	mov	r4, r2
 8001c36:	4698      	mov	r8, r3
 8001c38:	4606      	mov	r6, r0
 8001c3a:	b118      	cbz	r0, 8001c44 <_vfiprintf_r+0x18>
 8001c3c:	6a03      	ldr	r3, [r0, #32]
 8001c3e:	b90b      	cbnz	r3, 8001c44 <_vfiprintf_r+0x18>
 8001c40:	f7ff fdca 	bl	80017d8 <__sinit>
 8001c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c46:	07d9      	lsls	r1, r3, #31
 8001c48:	d405      	bmi.n	8001c56 <_vfiprintf_r+0x2a>
 8001c4a:	89ab      	ldrh	r3, [r5, #12]
 8001c4c:	059a      	lsls	r2, r3, #22
 8001c4e:	d402      	bmi.n	8001c56 <_vfiprintf_r+0x2a>
 8001c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c52:	f7ff fec6 	bl	80019e2 <__retarget_lock_acquire_recursive>
 8001c56:	89ab      	ldrh	r3, [r5, #12]
 8001c58:	071b      	lsls	r3, r3, #28
 8001c5a:	d501      	bpl.n	8001c60 <_vfiprintf_r+0x34>
 8001c5c:	692b      	ldr	r3, [r5, #16]
 8001c5e:	b99b      	cbnz	r3, 8001c88 <_vfiprintf_r+0x5c>
 8001c60:	4629      	mov	r1, r5
 8001c62:	4630      	mov	r0, r6
 8001c64:	f000 fb72 	bl	800234c <__swsetup_r>
 8001c68:	b170      	cbz	r0, 8001c88 <_vfiprintf_r+0x5c>
 8001c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c6c:	07dc      	lsls	r4, r3, #31
 8001c6e:	d504      	bpl.n	8001c7a <_vfiprintf_r+0x4e>
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	b01d      	add	sp, #116	@ 0x74
 8001c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7a:	89ab      	ldrh	r3, [r5, #12]
 8001c7c:	0598      	lsls	r0, r3, #22
 8001c7e:	d4f7      	bmi.n	8001c70 <_vfiprintf_r+0x44>
 8001c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c82:	f7ff feaf 	bl	80019e4 <__retarget_lock_release_recursive>
 8001c86:	e7f3      	b.n	8001c70 <_vfiprintf_r+0x44>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c96:	2330      	movs	r3, #48	@ 0x30
 8001c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e48 <_vfiprintf_r+0x21c>
 8001c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ca0:	f04f 0901 	mov.w	r9, #1
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cac:	b10a      	cbz	r2, 8001cb2 <_vfiprintf_r+0x86>
 8001cae:	2a25      	cmp	r2, #37	@ 0x25
 8001cb0:	d1f9      	bne.n	8001ca6 <_vfiprintf_r+0x7a>
 8001cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8001cb6:	d00b      	beq.n	8001cd0 <_vfiprintf_r+0xa4>
 8001cb8:	465b      	mov	r3, fp
 8001cba:	4622      	mov	r2, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7ff ffa1 	bl	8001c06 <__sfputs_r>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	f000 80a7 	beq.w	8001e18 <_vfiprintf_r+0x1ec>
 8001cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ccc:	445a      	add	r2, fp
 8001cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8001cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 809f 	beq.w	8001e18 <_vfiprintf_r+0x1ec>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ce4:	f10a 0a01 	add.w	sl, sl, #1
 8001ce8:	9304      	str	r3, [sp, #16]
 8001cea:	9307      	str	r3, [sp, #28]
 8001cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001cf2:	4654      	mov	r4, sl
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cfa:	4853      	ldr	r0, [pc, #332]	@ (8001e48 <_vfiprintf_r+0x21c>)
 8001cfc:	f7fe fa70 	bl	80001e0 <memchr>
 8001d00:	9a04      	ldr	r2, [sp, #16]
 8001d02:	b9d8      	cbnz	r0, 8001d3c <_vfiprintf_r+0x110>
 8001d04:	06d1      	lsls	r1, r2, #27
 8001d06:	bf44      	itt	mi
 8001d08:	2320      	movmi	r3, #32
 8001d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d0e:	0713      	lsls	r3, r2, #28
 8001d10:	bf44      	itt	mi
 8001d12:	232b      	movmi	r3, #43	@ 0x2b
 8001d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d18:	f89a 3000 	ldrb.w	r3, [sl]
 8001d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d1e:	d015      	beq.n	8001d4c <_vfiprintf_r+0x120>
 8001d20:	9a07      	ldr	r2, [sp, #28]
 8001d22:	4654      	mov	r4, sl
 8001d24:	2000      	movs	r0, #0
 8001d26:	f04f 0c0a 	mov.w	ip, #10
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d30:	3b30      	subs	r3, #48	@ 0x30
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	d94b      	bls.n	8001dce <_vfiprintf_r+0x1a2>
 8001d36:	b1b0      	cbz	r0, 8001d66 <_vfiprintf_r+0x13a>
 8001d38:	9207      	str	r2, [sp, #28]
 8001d3a:	e014      	b.n	8001d66 <_vfiprintf_r+0x13a>
 8001d3c:	eba0 0308 	sub.w	r3, r0, r8
 8001d40:	fa09 f303 	lsl.w	r3, r9, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	9304      	str	r3, [sp, #16]
 8001d48:	46a2      	mov	sl, r4
 8001d4a:	e7d2      	b.n	8001cf2 <_vfiprintf_r+0xc6>
 8001d4c:	9b03      	ldr	r3, [sp, #12]
 8001d4e:	1d19      	adds	r1, r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	9103      	str	r1, [sp, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bfbb      	ittet	lt
 8001d58:	425b      	neglt	r3, r3
 8001d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8001d5e:	9307      	strge	r3, [sp, #28]
 8001d60:	9307      	strlt	r3, [sp, #28]
 8001d62:	bfb8      	it	lt
 8001d64:	9204      	strlt	r2, [sp, #16]
 8001d66:	7823      	ldrb	r3, [r4, #0]
 8001d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d6a:	d10a      	bne.n	8001d82 <_vfiprintf_r+0x156>
 8001d6c:	7863      	ldrb	r3, [r4, #1]
 8001d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d70:	d132      	bne.n	8001dd8 <_vfiprintf_r+0x1ac>
 8001d72:	9b03      	ldr	r3, [sp, #12]
 8001d74:	1d1a      	adds	r2, r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	9203      	str	r2, [sp, #12]
 8001d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d7e:	3402      	adds	r4, #2
 8001d80:	9305      	str	r3, [sp, #20]
 8001d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e58 <_vfiprintf_r+0x22c>
 8001d86:	7821      	ldrb	r1, [r4, #0]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4650      	mov	r0, sl
 8001d8c:	f7fe fa28 	bl	80001e0 <memchr>
 8001d90:	b138      	cbz	r0, 8001da2 <_vfiprintf_r+0x176>
 8001d92:	9b04      	ldr	r3, [sp, #16]
 8001d94:	eba0 000a 	sub.w	r0, r0, sl
 8001d98:	2240      	movs	r2, #64	@ 0x40
 8001d9a:	4082      	lsls	r2, r0
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	3401      	adds	r4, #1
 8001da0:	9304      	str	r3, [sp, #16]
 8001da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da6:	4829      	ldr	r0, [pc, #164]	@ (8001e4c <_vfiprintf_r+0x220>)
 8001da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001dac:	2206      	movs	r2, #6
 8001dae:	f7fe fa17 	bl	80001e0 <memchr>
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d03f      	beq.n	8001e36 <_vfiprintf_r+0x20a>
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <_vfiprintf_r+0x224>)
 8001db8:	bb1b      	cbnz	r3, 8001e02 <_vfiprintf_r+0x1d6>
 8001dba:	9b03      	ldr	r3, [sp, #12]
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	f023 0307 	bic.w	r3, r3, #7
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001dc8:	443b      	add	r3, r7
 8001dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8001dcc:	e76a      	b.n	8001ca4 <_vfiprintf_r+0x78>
 8001dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	e7a8      	b.n	8001d2a <_vfiprintf_r+0xfe>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	3401      	adds	r4, #1
 8001ddc:	9305      	str	r3, [sp, #20]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 0c0a 	mov.w	ip, #10
 8001de4:	4620      	mov	r0, r4
 8001de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dea:	3a30      	subs	r2, #48	@ 0x30
 8001dec:	2a09      	cmp	r2, #9
 8001dee:	d903      	bls.n	8001df8 <_vfiprintf_r+0x1cc>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0c6      	beq.n	8001d82 <_vfiprintf_r+0x156>
 8001df4:	9105      	str	r1, [sp, #20]
 8001df6:	e7c4      	b.n	8001d82 <_vfiprintf_r+0x156>
 8001df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e7f0      	b.n	8001de4 <_vfiprintf_r+0x1b8>
 8001e02:	ab03      	add	r3, sp, #12
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	462a      	mov	r2, r5
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <_vfiprintf_r+0x228>)
 8001e0a:	a904      	add	r1, sp, #16
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4607      	mov	r7, r0
 8001e14:	1c78      	adds	r0, r7, #1
 8001e16:	d1d6      	bne.n	8001dc6 <_vfiprintf_r+0x19a>
 8001e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e1a:	07d9      	lsls	r1, r3, #31
 8001e1c:	d405      	bmi.n	8001e2a <_vfiprintf_r+0x1fe>
 8001e1e:	89ab      	ldrh	r3, [r5, #12]
 8001e20:	059a      	lsls	r2, r3, #22
 8001e22:	d402      	bmi.n	8001e2a <_vfiprintf_r+0x1fe>
 8001e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e26:	f7ff fddd 	bl	80019e4 <__retarget_lock_release_recursive>
 8001e2a:	89ab      	ldrh	r3, [r5, #12]
 8001e2c:	065b      	lsls	r3, r3, #25
 8001e2e:	f53f af1f 	bmi.w	8001c70 <_vfiprintf_r+0x44>
 8001e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e34:	e71e      	b.n	8001c74 <_vfiprintf_r+0x48>
 8001e36:	ab03      	add	r3, sp, #12
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	462a      	mov	r2, r5
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <_vfiprintf_r+0x228>)
 8001e3e:	a904      	add	r1, sp, #16
 8001e40:	4630      	mov	r0, r6
 8001e42:	f000 f879 	bl	8001f38 <_printf_i>
 8001e46:	e7e4      	b.n	8001e12 <_vfiprintf_r+0x1e6>
 8001e48:	0800255c 	.word	0x0800255c
 8001e4c:	08002566 	.word	0x08002566
 8001e50:	00000000 	.word	0x00000000
 8001e54:	08001c07 	.word	0x08001c07
 8001e58:	08002562 	.word	0x08002562

08001e5c <_printf_common>:
 8001e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	4616      	mov	r6, r2
 8001e62:	4698      	mov	r8, r3
 8001e64:	688a      	ldr	r2, [r1, #8]
 8001e66:	690b      	ldr	r3, [r1, #16]
 8001e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	bfb8      	it	lt
 8001e70:	4613      	movlt	r3, r2
 8001e72:	6033      	str	r3, [r6, #0]
 8001e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e78:	4607      	mov	r7, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	b10a      	cbz	r2, 8001e82 <_printf_common+0x26>
 8001e7e:	3301      	adds	r3, #1
 8001e80:	6033      	str	r3, [r6, #0]
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	0699      	lsls	r1, r3, #26
 8001e86:	bf42      	ittt	mi
 8001e88:	6833      	ldrmi	r3, [r6, #0]
 8001e8a:	3302      	addmi	r3, #2
 8001e8c:	6033      	strmi	r3, [r6, #0]
 8001e8e:	6825      	ldr	r5, [r4, #0]
 8001e90:	f015 0506 	ands.w	r5, r5, #6
 8001e94:	d106      	bne.n	8001ea4 <_printf_common+0x48>
 8001e96:	f104 0a19 	add.w	sl, r4, #25
 8001e9a:	68e3      	ldr	r3, [r4, #12]
 8001e9c:	6832      	ldr	r2, [r6, #0]
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	42ab      	cmp	r3, r5
 8001ea2:	dc26      	bgt.n	8001ef2 <_printf_common+0x96>
 8001ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ea8:	6822      	ldr	r2, [r4, #0]
 8001eaa:	3b00      	subs	r3, #0
 8001eac:	bf18      	it	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	0692      	lsls	r2, r2, #26
 8001eb2:	d42b      	bmi.n	8001f0c <_printf_common+0xb0>
 8001eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001eb8:	4641      	mov	r1, r8
 8001eba:	4638      	mov	r0, r7
 8001ebc:	47c8      	blx	r9
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	d01e      	beq.n	8001f00 <_printf_common+0xa4>
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	6922      	ldr	r2, [r4, #16]
 8001ec6:	f003 0306 	and.w	r3, r3, #6
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf02      	ittt	eq
 8001ece:	68e5      	ldreq	r5, [r4, #12]
 8001ed0:	6833      	ldreq	r3, [r6, #0]
 8001ed2:	1aed      	subeq	r5, r5, r3
 8001ed4:	68a3      	ldr	r3, [r4, #8]
 8001ed6:	bf0c      	ite	eq
 8001ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001edc:	2500      	movne	r5, #0
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	bfc4      	itt	gt
 8001ee2:	1a9b      	subgt	r3, r3, r2
 8001ee4:	18ed      	addgt	r5, r5, r3
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	341a      	adds	r4, #26
 8001eea:	42b5      	cmp	r5, r6
 8001eec:	d11a      	bne.n	8001f24 <_printf_common+0xc8>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	e008      	b.n	8001f04 <_printf_common+0xa8>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4652      	mov	r2, sl
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	4638      	mov	r0, r7
 8001efa:	47c8      	blx	r9
 8001efc:	3001      	adds	r0, #1
 8001efe:	d103      	bne.n	8001f08 <_printf_common+0xac>
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f08:	3501      	adds	r5, #1
 8001f0a:	e7c6      	b.n	8001e9a <_printf_common+0x3e>
 8001f0c:	18e1      	adds	r1, r4, r3
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	2030      	movs	r0, #48	@ 0x30
 8001f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f16:	4422      	add	r2, r4
 8001f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f20:	3302      	adds	r3, #2
 8001f22:	e7c7      	b.n	8001eb4 <_printf_common+0x58>
 8001f24:	2301      	movs	r3, #1
 8001f26:	4622      	mov	r2, r4
 8001f28:	4641      	mov	r1, r8
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	47c8      	blx	r9
 8001f2e:	3001      	adds	r0, #1
 8001f30:	d0e6      	beq.n	8001f00 <_printf_common+0xa4>
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7d9      	b.n	8001eea <_printf_common+0x8e>
	...

08001f38 <_printf_i>:
 8001f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f3c:	7e0f      	ldrb	r7, [r1, #24]
 8001f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f40:	2f78      	cmp	r7, #120	@ 0x78
 8001f42:	4691      	mov	r9, r2
 8001f44:	4680      	mov	r8, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	469a      	mov	sl, r3
 8001f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f4e:	d807      	bhi.n	8001f60 <_printf_i+0x28>
 8001f50:	2f62      	cmp	r7, #98	@ 0x62
 8001f52:	d80a      	bhi.n	8001f6a <_printf_i+0x32>
 8001f54:	2f00      	cmp	r7, #0
 8001f56:	f000 80d2 	beq.w	80020fe <_printf_i+0x1c6>
 8001f5a:	2f58      	cmp	r7, #88	@ 0x58
 8001f5c:	f000 80b9 	beq.w	80020d2 <_printf_i+0x19a>
 8001f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f68:	e03a      	b.n	8001fe0 <_printf_i+0xa8>
 8001f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f6e:	2b15      	cmp	r3, #21
 8001f70:	d8f6      	bhi.n	8001f60 <_printf_i+0x28>
 8001f72:	a101      	add	r1, pc, #4	@ (adr r1, 8001f78 <_printf_i+0x40>)
 8001f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f78:	08001fd1 	.word	0x08001fd1
 8001f7c:	08001fe5 	.word	0x08001fe5
 8001f80:	08001f61 	.word	0x08001f61
 8001f84:	08001f61 	.word	0x08001f61
 8001f88:	08001f61 	.word	0x08001f61
 8001f8c:	08001f61 	.word	0x08001f61
 8001f90:	08001fe5 	.word	0x08001fe5
 8001f94:	08001f61 	.word	0x08001f61
 8001f98:	08001f61 	.word	0x08001f61
 8001f9c:	08001f61 	.word	0x08001f61
 8001fa0:	08001f61 	.word	0x08001f61
 8001fa4:	080020e5 	.word	0x080020e5
 8001fa8:	0800200f 	.word	0x0800200f
 8001fac:	0800209f 	.word	0x0800209f
 8001fb0:	08001f61 	.word	0x08001f61
 8001fb4:	08001f61 	.word	0x08001f61
 8001fb8:	08002107 	.word	0x08002107
 8001fbc:	08001f61 	.word	0x08001f61
 8001fc0:	0800200f 	.word	0x0800200f
 8001fc4:	08001f61 	.word	0x08001f61
 8001fc8:	08001f61 	.word	0x08001f61
 8001fcc:	080020a7 	.word	0x080020a7
 8001fd0:	6833      	ldr	r3, [r6, #0]
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6032      	str	r2, [r6, #0]
 8001fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e09d      	b.n	8002120 <_printf_i+0x1e8>
 8001fe4:	6833      	ldr	r3, [r6, #0]
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	1d19      	adds	r1, r3, #4
 8001fea:	6031      	str	r1, [r6, #0]
 8001fec:	0606      	lsls	r6, r0, #24
 8001fee:	d501      	bpl.n	8001ff4 <_printf_i+0xbc>
 8001ff0:	681d      	ldr	r5, [r3, #0]
 8001ff2:	e003      	b.n	8001ffc <_printf_i+0xc4>
 8001ff4:	0645      	lsls	r5, r0, #25
 8001ff6:	d5fb      	bpl.n	8001ff0 <_printf_i+0xb8>
 8001ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ffc:	2d00      	cmp	r5, #0
 8001ffe:	da03      	bge.n	8002008 <_printf_i+0xd0>
 8002000:	232d      	movs	r3, #45	@ 0x2d
 8002002:	426d      	negs	r5, r5
 8002004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002008:	4859      	ldr	r0, [pc, #356]	@ (8002170 <_printf_i+0x238>)
 800200a:	230a      	movs	r3, #10
 800200c:	e011      	b.n	8002032 <_printf_i+0xfa>
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	6833      	ldr	r3, [r6, #0]
 8002012:	0608      	lsls	r0, r1, #24
 8002014:	f853 5b04 	ldr.w	r5, [r3], #4
 8002018:	d402      	bmi.n	8002020 <_printf_i+0xe8>
 800201a:	0649      	lsls	r1, r1, #25
 800201c:	bf48      	it	mi
 800201e:	b2ad      	uxthmi	r5, r5
 8002020:	2f6f      	cmp	r7, #111	@ 0x6f
 8002022:	4853      	ldr	r0, [pc, #332]	@ (8002170 <_printf_i+0x238>)
 8002024:	6033      	str	r3, [r6, #0]
 8002026:	bf14      	ite	ne
 8002028:	230a      	movne	r3, #10
 800202a:	2308      	moveq	r3, #8
 800202c:	2100      	movs	r1, #0
 800202e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002032:	6866      	ldr	r6, [r4, #4]
 8002034:	60a6      	str	r6, [r4, #8]
 8002036:	2e00      	cmp	r6, #0
 8002038:	bfa2      	ittt	ge
 800203a:	6821      	ldrge	r1, [r4, #0]
 800203c:	f021 0104 	bicge.w	r1, r1, #4
 8002040:	6021      	strge	r1, [r4, #0]
 8002042:	b90d      	cbnz	r5, 8002048 <_printf_i+0x110>
 8002044:	2e00      	cmp	r6, #0
 8002046:	d04b      	beq.n	80020e0 <_printf_i+0x1a8>
 8002048:	4616      	mov	r6, r2
 800204a:	fbb5 f1f3 	udiv	r1, r5, r3
 800204e:	fb03 5711 	mls	r7, r3, r1, r5
 8002052:	5dc7      	ldrb	r7, [r0, r7]
 8002054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002058:	462f      	mov	r7, r5
 800205a:	42bb      	cmp	r3, r7
 800205c:	460d      	mov	r5, r1
 800205e:	d9f4      	bls.n	800204a <_printf_i+0x112>
 8002060:	2b08      	cmp	r3, #8
 8002062:	d10b      	bne.n	800207c <_printf_i+0x144>
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	07df      	lsls	r7, r3, #31
 8002068:	d508      	bpl.n	800207c <_printf_i+0x144>
 800206a:	6923      	ldr	r3, [r4, #16]
 800206c:	6861      	ldr	r1, [r4, #4]
 800206e:	4299      	cmp	r1, r3
 8002070:	bfde      	ittt	le
 8002072:	2330      	movle	r3, #48	@ 0x30
 8002074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800207c:	1b92      	subs	r2, r2, r6
 800207e:	6122      	str	r2, [r4, #16]
 8002080:	f8cd a000 	str.w	sl, [sp]
 8002084:	464b      	mov	r3, r9
 8002086:	aa03      	add	r2, sp, #12
 8002088:	4621      	mov	r1, r4
 800208a:	4640      	mov	r0, r8
 800208c:	f7ff fee6 	bl	8001e5c <_printf_common>
 8002090:	3001      	adds	r0, #1
 8002092:	d14a      	bne.n	800212a <_printf_i+0x1f2>
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	b004      	add	sp, #16
 800209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	4833      	ldr	r0, [pc, #204]	@ (8002174 <_printf_i+0x23c>)
 80020a8:	2778      	movs	r7, #120	@ 0x78
 80020aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	6831      	ldr	r1, [r6, #0]
 80020b2:	061f      	lsls	r7, r3, #24
 80020b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80020b8:	d402      	bmi.n	80020c0 <_printf_i+0x188>
 80020ba:	065f      	lsls	r7, r3, #25
 80020bc:	bf48      	it	mi
 80020be:	b2ad      	uxthmi	r5, r5
 80020c0:	6031      	str	r1, [r6, #0]
 80020c2:	07d9      	lsls	r1, r3, #31
 80020c4:	bf44      	itt	mi
 80020c6:	f043 0320 	orrmi.w	r3, r3, #32
 80020ca:	6023      	strmi	r3, [r4, #0]
 80020cc:	b11d      	cbz	r5, 80020d6 <_printf_i+0x19e>
 80020ce:	2310      	movs	r3, #16
 80020d0:	e7ac      	b.n	800202c <_printf_i+0xf4>
 80020d2:	4827      	ldr	r0, [pc, #156]	@ (8002170 <_printf_i+0x238>)
 80020d4:	e7e9      	b.n	80020aa <_printf_i+0x172>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	e7f6      	b.n	80020ce <_printf_i+0x196>
 80020e0:	4616      	mov	r6, r2
 80020e2:	e7bd      	b.n	8002060 <_printf_i+0x128>
 80020e4:	6833      	ldr	r3, [r6, #0]
 80020e6:	6825      	ldr	r5, [r4, #0]
 80020e8:	6961      	ldr	r1, [r4, #20]
 80020ea:	1d18      	adds	r0, r3, #4
 80020ec:	6030      	str	r0, [r6, #0]
 80020ee:	062e      	lsls	r6, r5, #24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	d501      	bpl.n	80020f8 <_printf_i+0x1c0>
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	e002      	b.n	80020fe <_printf_i+0x1c6>
 80020f8:	0668      	lsls	r0, r5, #25
 80020fa:	d5fb      	bpl.n	80020f4 <_printf_i+0x1bc>
 80020fc:	8019      	strh	r1, [r3, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	6123      	str	r3, [r4, #16]
 8002102:	4616      	mov	r6, r2
 8002104:	e7bc      	b.n	8002080 <_printf_i+0x148>
 8002106:	6833      	ldr	r3, [r6, #0]
 8002108:	1d1a      	adds	r2, r3, #4
 800210a:	6032      	str	r2, [r6, #0]
 800210c:	681e      	ldr	r6, [r3, #0]
 800210e:	6862      	ldr	r2, [r4, #4]
 8002110:	2100      	movs	r1, #0
 8002112:	4630      	mov	r0, r6
 8002114:	f7fe f864 	bl	80001e0 <memchr>
 8002118:	b108      	cbz	r0, 800211e <_printf_i+0x1e6>
 800211a:	1b80      	subs	r0, r0, r6
 800211c:	6060      	str	r0, [r4, #4]
 800211e:	6863      	ldr	r3, [r4, #4]
 8002120:	6123      	str	r3, [r4, #16]
 8002122:	2300      	movs	r3, #0
 8002124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002128:	e7aa      	b.n	8002080 <_printf_i+0x148>
 800212a:	6923      	ldr	r3, [r4, #16]
 800212c:	4632      	mov	r2, r6
 800212e:	4649      	mov	r1, r9
 8002130:	4640      	mov	r0, r8
 8002132:	47d0      	blx	sl
 8002134:	3001      	adds	r0, #1
 8002136:	d0ad      	beq.n	8002094 <_printf_i+0x15c>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	079b      	lsls	r3, r3, #30
 800213c:	d413      	bmi.n	8002166 <_printf_i+0x22e>
 800213e:	68e0      	ldr	r0, [r4, #12]
 8002140:	9b03      	ldr	r3, [sp, #12]
 8002142:	4298      	cmp	r0, r3
 8002144:	bfb8      	it	lt
 8002146:	4618      	movlt	r0, r3
 8002148:	e7a6      	b.n	8002098 <_printf_i+0x160>
 800214a:	2301      	movs	r3, #1
 800214c:	4632      	mov	r2, r6
 800214e:	4649      	mov	r1, r9
 8002150:	4640      	mov	r0, r8
 8002152:	47d0      	blx	sl
 8002154:	3001      	adds	r0, #1
 8002156:	d09d      	beq.n	8002094 <_printf_i+0x15c>
 8002158:	3501      	adds	r5, #1
 800215a:	68e3      	ldr	r3, [r4, #12]
 800215c:	9903      	ldr	r1, [sp, #12]
 800215e:	1a5b      	subs	r3, r3, r1
 8002160:	42ab      	cmp	r3, r5
 8002162:	dcf2      	bgt.n	800214a <_printf_i+0x212>
 8002164:	e7eb      	b.n	800213e <_printf_i+0x206>
 8002166:	2500      	movs	r5, #0
 8002168:	f104 0619 	add.w	r6, r4, #25
 800216c:	e7f5      	b.n	800215a <_printf_i+0x222>
 800216e:	bf00      	nop
 8002170:	0800256d 	.word	0x0800256d
 8002174:	0800257e 	.word	0x0800257e

08002178 <__sflush_r>:
 8002178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	0716      	lsls	r6, r2, #28
 8002182:	4605      	mov	r5, r0
 8002184:	460c      	mov	r4, r1
 8002186:	d454      	bmi.n	8002232 <__sflush_r+0xba>
 8002188:	684b      	ldr	r3, [r1, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	dc02      	bgt.n	8002194 <__sflush_r+0x1c>
 800218e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	dd48      	ble.n	8002226 <__sflush_r+0xae>
 8002194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002196:	2e00      	cmp	r6, #0
 8002198:	d045      	beq.n	8002226 <__sflush_r+0xae>
 800219a:	2300      	movs	r3, #0
 800219c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80021a0:	682f      	ldr	r7, [r5, #0]
 80021a2:	6a21      	ldr	r1, [r4, #32]
 80021a4:	602b      	str	r3, [r5, #0]
 80021a6:	d030      	beq.n	800220a <__sflush_r+0x92>
 80021a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	0759      	lsls	r1, r3, #29
 80021ae:	d505      	bpl.n	80021bc <__sflush_r+0x44>
 80021b0:	6863      	ldr	r3, [r4, #4]
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80021b6:	b10b      	cbz	r3, 80021bc <__sflush_r+0x44>
 80021b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021c0:	6a21      	ldr	r1, [r4, #32]
 80021c2:	4628      	mov	r0, r5
 80021c4:	47b0      	blx	r6
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	d106      	bne.n	80021da <__sflush_r+0x62>
 80021cc:	6829      	ldr	r1, [r5, #0]
 80021ce:	291d      	cmp	r1, #29
 80021d0:	d82b      	bhi.n	800222a <__sflush_r+0xb2>
 80021d2:	4a2a      	ldr	r2, [pc, #168]	@ (800227c <__sflush_r+0x104>)
 80021d4:	410a      	asrs	r2, r1
 80021d6:	07d6      	lsls	r6, r2, #31
 80021d8:	d427      	bmi.n	800222a <__sflush_r+0xb2>
 80021da:	2200      	movs	r2, #0
 80021dc:	6062      	str	r2, [r4, #4]
 80021de:	04d9      	lsls	r1, r3, #19
 80021e0:	6922      	ldr	r2, [r4, #16]
 80021e2:	6022      	str	r2, [r4, #0]
 80021e4:	d504      	bpl.n	80021f0 <__sflush_r+0x78>
 80021e6:	1c42      	adds	r2, r0, #1
 80021e8:	d101      	bne.n	80021ee <__sflush_r+0x76>
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	b903      	cbnz	r3, 80021f0 <__sflush_r+0x78>
 80021ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80021f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021f2:	602f      	str	r7, [r5, #0]
 80021f4:	b1b9      	cbz	r1, 8002226 <__sflush_r+0xae>
 80021f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021fa:	4299      	cmp	r1, r3
 80021fc:	d002      	beq.n	8002204 <__sflush_r+0x8c>
 80021fe:	4628      	mov	r0, r5
 8002200:	f7ff fbf2 	bl	80019e8 <_free_r>
 8002204:	2300      	movs	r3, #0
 8002206:	6363      	str	r3, [r4, #52]	@ 0x34
 8002208:	e00d      	b.n	8002226 <__sflush_r+0xae>
 800220a:	2301      	movs	r3, #1
 800220c:	4628      	mov	r0, r5
 800220e:	47b0      	blx	r6
 8002210:	4602      	mov	r2, r0
 8002212:	1c50      	adds	r0, r2, #1
 8002214:	d1c9      	bne.n	80021aa <__sflush_r+0x32>
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0c6      	beq.n	80021aa <__sflush_r+0x32>
 800221c:	2b1d      	cmp	r3, #29
 800221e:	d001      	beq.n	8002224 <__sflush_r+0xac>
 8002220:	2b16      	cmp	r3, #22
 8002222:	d11e      	bne.n	8002262 <__sflush_r+0xea>
 8002224:	602f      	str	r7, [r5, #0]
 8002226:	2000      	movs	r0, #0
 8002228:	e022      	b.n	8002270 <__sflush_r+0xf8>
 800222a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800222e:	b21b      	sxth	r3, r3
 8002230:	e01b      	b.n	800226a <__sflush_r+0xf2>
 8002232:	690f      	ldr	r7, [r1, #16]
 8002234:	2f00      	cmp	r7, #0
 8002236:	d0f6      	beq.n	8002226 <__sflush_r+0xae>
 8002238:	0793      	lsls	r3, r2, #30
 800223a:	680e      	ldr	r6, [r1, #0]
 800223c:	bf08      	it	eq
 800223e:	694b      	ldreq	r3, [r1, #20]
 8002240:	600f      	str	r7, [r1, #0]
 8002242:	bf18      	it	ne
 8002244:	2300      	movne	r3, #0
 8002246:	eba6 0807 	sub.w	r8, r6, r7
 800224a:	608b      	str	r3, [r1, #8]
 800224c:	f1b8 0f00 	cmp.w	r8, #0
 8002250:	dde9      	ble.n	8002226 <__sflush_r+0xae>
 8002252:	6a21      	ldr	r1, [r4, #32]
 8002254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002256:	4643      	mov	r3, r8
 8002258:	463a      	mov	r2, r7
 800225a:	4628      	mov	r0, r5
 800225c:	47b0      	blx	r6
 800225e:	2800      	cmp	r0, #0
 8002260:	dc08      	bgt.n	8002274 <__sflush_r+0xfc>
 8002262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800226a:	81a3      	strh	r3, [r4, #12]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002274:	4407      	add	r7, r0
 8002276:	eba8 0800 	sub.w	r8, r8, r0
 800227a:	e7e7      	b.n	800224c <__sflush_r+0xd4>
 800227c:	dfbffffe 	.word	0xdfbffffe

08002280 <_fflush_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	690b      	ldr	r3, [r1, #16]
 8002284:	4605      	mov	r5, r0
 8002286:	460c      	mov	r4, r1
 8002288:	b913      	cbnz	r3, 8002290 <_fflush_r+0x10>
 800228a:	2500      	movs	r5, #0
 800228c:	4628      	mov	r0, r5
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	b118      	cbz	r0, 800229a <_fflush_r+0x1a>
 8002292:	6a03      	ldr	r3, [r0, #32]
 8002294:	b90b      	cbnz	r3, 800229a <_fflush_r+0x1a>
 8002296:	f7ff fa9f 	bl	80017d8 <__sinit>
 800229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f3      	beq.n	800228a <_fflush_r+0xa>
 80022a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022a4:	07d0      	lsls	r0, r2, #31
 80022a6:	d404      	bmi.n	80022b2 <_fflush_r+0x32>
 80022a8:	0599      	lsls	r1, r3, #22
 80022aa:	d402      	bmi.n	80022b2 <_fflush_r+0x32>
 80022ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022ae:	f7ff fb98 	bl	80019e2 <__retarget_lock_acquire_recursive>
 80022b2:	4628      	mov	r0, r5
 80022b4:	4621      	mov	r1, r4
 80022b6:	f7ff ff5f 	bl	8002178 <__sflush_r>
 80022ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022bc:	07da      	lsls	r2, r3, #31
 80022be:	4605      	mov	r5, r0
 80022c0:	d4e4      	bmi.n	800228c <_fflush_r+0xc>
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	059b      	lsls	r3, r3, #22
 80022c6:	d4e1      	bmi.n	800228c <_fflush_r+0xc>
 80022c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022ca:	f7ff fb8b 	bl	80019e4 <__retarget_lock_release_recursive>
 80022ce:	e7dd      	b.n	800228c <_fflush_r+0xc>

080022d0 <__swbuf_r>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	460e      	mov	r6, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	4605      	mov	r5, r0
 80022d8:	b118      	cbz	r0, 80022e2 <__swbuf_r+0x12>
 80022da:	6a03      	ldr	r3, [r0, #32]
 80022dc:	b90b      	cbnz	r3, 80022e2 <__swbuf_r+0x12>
 80022de:	f7ff fa7b 	bl	80017d8 <__sinit>
 80022e2:	69a3      	ldr	r3, [r4, #24]
 80022e4:	60a3      	str	r3, [r4, #8]
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	071a      	lsls	r2, r3, #28
 80022ea:	d501      	bpl.n	80022f0 <__swbuf_r+0x20>
 80022ec:	6923      	ldr	r3, [r4, #16]
 80022ee:	b943      	cbnz	r3, 8002302 <__swbuf_r+0x32>
 80022f0:	4621      	mov	r1, r4
 80022f2:	4628      	mov	r0, r5
 80022f4:	f000 f82a 	bl	800234c <__swsetup_r>
 80022f8:	b118      	cbz	r0, 8002302 <__swbuf_r+0x32>
 80022fa:	f04f 37ff 	mov.w	r7, #4294967295
 80022fe:	4638      	mov	r0, r7
 8002300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	6922      	ldr	r2, [r4, #16]
 8002306:	1a98      	subs	r0, r3, r2
 8002308:	6963      	ldr	r3, [r4, #20]
 800230a:	b2f6      	uxtb	r6, r6
 800230c:	4283      	cmp	r3, r0
 800230e:	4637      	mov	r7, r6
 8002310:	dc05      	bgt.n	800231e <__swbuf_r+0x4e>
 8002312:	4621      	mov	r1, r4
 8002314:	4628      	mov	r0, r5
 8002316:	f7ff ffb3 	bl	8002280 <_fflush_r>
 800231a:	2800      	cmp	r0, #0
 800231c:	d1ed      	bne.n	80022fa <__swbuf_r+0x2a>
 800231e:	68a3      	ldr	r3, [r4, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60a3      	str	r3, [r4, #8]
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	6022      	str	r2, [r4, #0]
 800232a:	701e      	strb	r6, [r3, #0]
 800232c:	6962      	ldr	r2, [r4, #20]
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	429a      	cmp	r2, r3
 8002332:	d004      	beq.n	800233e <__swbuf_r+0x6e>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	07db      	lsls	r3, r3, #31
 8002338:	d5e1      	bpl.n	80022fe <__swbuf_r+0x2e>
 800233a:	2e0a      	cmp	r6, #10
 800233c:	d1df      	bne.n	80022fe <__swbuf_r+0x2e>
 800233e:	4621      	mov	r1, r4
 8002340:	4628      	mov	r0, r5
 8002342:	f7ff ff9d 	bl	8002280 <_fflush_r>
 8002346:	2800      	cmp	r0, #0
 8002348:	d0d9      	beq.n	80022fe <__swbuf_r+0x2e>
 800234a:	e7d6      	b.n	80022fa <__swbuf_r+0x2a>

0800234c <__swsetup_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <__swsetup_r+0xa8>)
 8002350:	4605      	mov	r5, r0
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	460c      	mov	r4, r1
 8002356:	b118      	cbz	r0, 8002360 <__swsetup_r+0x14>
 8002358:	6a03      	ldr	r3, [r0, #32]
 800235a:	b90b      	cbnz	r3, 8002360 <__swsetup_r+0x14>
 800235c:	f7ff fa3c 	bl	80017d8 <__sinit>
 8002360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002364:	0719      	lsls	r1, r3, #28
 8002366:	d422      	bmi.n	80023ae <__swsetup_r+0x62>
 8002368:	06da      	lsls	r2, r3, #27
 800236a:	d407      	bmi.n	800237c <__swsetup_r+0x30>
 800236c:	2209      	movs	r2, #9
 800236e:	602a      	str	r2, [r5, #0]
 8002370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	f04f 30ff 	mov.w	r0, #4294967295
 800237a:	e033      	b.n	80023e4 <__swsetup_r+0x98>
 800237c:	0758      	lsls	r0, r3, #29
 800237e:	d512      	bpl.n	80023a6 <__swsetup_r+0x5a>
 8002380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002382:	b141      	cbz	r1, 8002396 <__swsetup_r+0x4a>
 8002384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002388:	4299      	cmp	r1, r3
 800238a:	d002      	beq.n	8002392 <__swsetup_r+0x46>
 800238c:	4628      	mov	r0, r5
 800238e:	f7ff fb2b 	bl	80019e8 <_free_r>
 8002392:	2300      	movs	r3, #0
 8002394:	6363      	str	r3, [r4, #52]	@ 0x34
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	2300      	movs	r3, #0
 80023a0:	6063      	str	r3, [r4, #4]
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	b94b      	cbnz	r3, 80023c6 <__swsetup_r+0x7a>
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023bc:	d003      	beq.n	80023c6 <__swsetup_r+0x7a>
 80023be:	4621      	mov	r1, r4
 80023c0:	4628      	mov	r0, r5
 80023c2:	f000 f84f 	bl	8002464 <__smakebuf_r>
 80023c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ca:	f013 0201 	ands.w	r2, r3, #1
 80023ce:	d00a      	beq.n	80023e6 <__swsetup_r+0x9a>
 80023d0:	2200      	movs	r2, #0
 80023d2:	60a2      	str	r2, [r4, #8]
 80023d4:	6962      	ldr	r2, [r4, #20]
 80023d6:	4252      	negs	r2, r2
 80023d8:	61a2      	str	r2, [r4, #24]
 80023da:	6922      	ldr	r2, [r4, #16]
 80023dc:	b942      	cbnz	r2, 80023f0 <__swsetup_r+0xa4>
 80023de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023e2:	d1c5      	bne.n	8002370 <__swsetup_r+0x24>
 80023e4:	bd38      	pop	{r3, r4, r5, pc}
 80023e6:	0799      	lsls	r1, r3, #30
 80023e8:	bf58      	it	pl
 80023ea:	6962      	ldrpl	r2, [r4, #20]
 80023ec:	60a2      	str	r2, [r4, #8]
 80023ee:	e7f4      	b.n	80023da <__swsetup_r+0x8e>
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7f7      	b.n	80023e4 <__swsetup_r+0x98>
 80023f4:	20000018 	.word	0x20000018

080023f8 <_sbrk_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4d06      	ldr	r5, [pc, #24]	@ (8002414 <_sbrk_r+0x1c>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	602b      	str	r3, [r5, #0]
 8002404:	f7ff f8fc 	bl	8001600 <_sbrk>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d102      	bne.n	8002412 <_sbrk_r+0x1a>
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	b103      	cbz	r3, 8002412 <_sbrk_r+0x1a>
 8002410:	6023      	str	r3, [r4, #0]
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	20000210 	.word	0x20000210

08002418 <__swhatbuf_r>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	460c      	mov	r4, r1
 800241c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002420:	2900      	cmp	r1, #0
 8002422:	b096      	sub	sp, #88	@ 0x58
 8002424:	4615      	mov	r5, r2
 8002426:	461e      	mov	r6, r3
 8002428:	da0d      	bge.n	8002446 <__swhatbuf_r+0x2e>
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	bf14      	ite	ne
 8002436:	2340      	movne	r3, #64	@ 0x40
 8002438:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800243c:	2000      	movs	r0, #0
 800243e:	6031      	str	r1, [r6, #0]
 8002440:	602b      	str	r3, [r5, #0]
 8002442:	b016      	add	sp, #88	@ 0x58
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	466a      	mov	r2, sp
 8002448:	f000 f848 	bl	80024dc <_fstat_r>
 800244c:	2800      	cmp	r0, #0
 800244e:	dbec      	blt.n	800242a <__swhatbuf_r+0x12>
 8002450:	9901      	ldr	r1, [sp, #4]
 8002452:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002456:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800245a:	4259      	negs	r1, r3
 800245c:	4159      	adcs	r1, r3
 800245e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002462:	e7eb      	b.n	800243c <__swhatbuf_r+0x24>

08002464 <__smakebuf_r>:
 8002464:	898b      	ldrh	r3, [r1, #12]
 8002466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002468:	079d      	lsls	r5, r3, #30
 800246a:	4606      	mov	r6, r0
 800246c:	460c      	mov	r4, r1
 800246e:	d507      	bpl.n	8002480 <__smakebuf_r+0x1c>
 8002470:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002474:	6023      	str	r3, [r4, #0]
 8002476:	6123      	str	r3, [r4, #16]
 8002478:	2301      	movs	r3, #1
 800247a:	6163      	str	r3, [r4, #20]
 800247c:	b003      	add	sp, #12
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	ab01      	add	r3, sp, #4
 8002482:	466a      	mov	r2, sp
 8002484:	f7ff ffc8 	bl	8002418 <__swhatbuf_r>
 8002488:	9f00      	ldr	r7, [sp, #0]
 800248a:	4605      	mov	r5, r0
 800248c:	4639      	mov	r1, r7
 800248e:	4630      	mov	r0, r6
 8002490:	f7ff fb16 	bl	8001ac0 <_malloc_r>
 8002494:	b948      	cbnz	r0, 80024aa <__smakebuf_r+0x46>
 8002496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249a:	059a      	lsls	r2, r3, #22
 800249c:	d4ee      	bmi.n	800247c <__smakebuf_r+0x18>
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	81a3      	strh	r3, [r4, #12]
 80024a8:	e7e2      	b.n	8002470 <__smakebuf_r+0xc>
 80024aa:	89a3      	ldrh	r3, [r4, #12]
 80024ac:	6020      	str	r0, [r4, #0]
 80024ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b2:	81a3      	strh	r3, [r4, #12]
 80024b4:	9b01      	ldr	r3, [sp, #4]
 80024b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024ba:	b15b      	cbz	r3, 80024d4 <__smakebuf_r+0x70>
 80024bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024c0:	4630      	mov	r0, r6
 80024c2:	f000 f81d 	bl	8002500 <_isatty_r>
 80024c6:	b128      	cbz	r0, 80024d4 <__smakebuf_r+0x70>
 80024c8:	89a3      	ldrh	r3, [r4, #12]
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	81a3      	strh	r3, [r4, #12]
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	431d      	orrs	r5, r3
 80024d8:	81a5      	strh	r5, [r4, #12]
 80024da:	e7cf      	b.n	800247c <__smakebuf_r+0x18>

080024dc <_fstat_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	4d07      	ldr	r5, [pc, #28]	@ (80024fc <_fstat_r+0x20>)
 80024e0:	2300      	movs	r3, #0
 80024e2:	4604      	mov	r4, r0
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	602b      	str	r3, [r5, #0]
 80024ea:	f7ff f860 	bl	80015ae <_fstat>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	d102      	bne.n	80024f8 <_fstat_r+0x1c>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	b103      	cbz	r3, 80024f8 <_fstat_r+0x1c>
 80024f6:	6023      	str	r3, [r4, #0]
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	20000210 	.word	0x20000210

08002500 <_isatty_r>:
 8002500:	b538      	push	{r3, r4, r5, lr}
 8002502:	4d06      	ldr	r5, [pc, #24]	@ (800251c <_isatty_r+0x1c>)
 8002504:	2300      	movs	r3, #0
 8002506:	4604      	mov	r4, r0
 8002508:	4608      	mov	r0, r1
 800250a:	602b      	str	r3, [r5, #0]
 800250c:	f7ff f85f 	bl	80015ce <_isatty>
 8002510:	1c43      	adds	r3, r0, #1
 8002512:	d102      	bne.n	800251a <_isatty_r+0x1a>
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	b103      	cbz	r3, 800251a <_isatty_r+0x1a>
 8002518:	6023      	str	r3, [r4, #0]
 800251a:	bd38      	pop	{r3, r4, r5, pc}
 800251c:	20000210 	.word	0x20000210

08002520 <_init>:
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	bf00      	nop
 8002524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002526:	bc08      	pop	{r3}
 8002528:	469e      	mov	lr, r3
 800252a:	4770      	bx	lr

0800252c <_fini>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr
