
19_DMA_MemorytoMemory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000302c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080031cc  080031cc  000041cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032bc  080032bc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080032bc  080032bc  000042bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c4  080032c4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032c8  080032c8  000042c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080032cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08003334  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003334  000052f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b05  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a6  00000000  00000000  0000ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f3  00000000  00000000  0000c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169fd  00000000  00000000  0000ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008598  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1f6  00000000  00000000  0002bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000221c  00000000  00000000  000b7ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000ba0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080031b4 	.word	0x080031b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080031b4 	.word	0x080031b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f933 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f943 	bl	800086e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90b 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4907      	ldr	r1, [pc, #28]	@ (8000700 <__NVIC_EnableIRQ+0x38>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000e100 	.word	0xe000e100

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	@ (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	@ (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	@ 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f7ff ff8e 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff29 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff3e 	bl	80006ac <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff31 	bl	80006c8 <__NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffa2 	bl	80007c0 <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff feda 	bl	800064c <HAL_GetTick>
 8000898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d101      	bne.n	80008a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e099      	b.n	80009d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2202      	movs	r2, #2
 80008b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0201 	bic.w	r2, r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c4:	e00f      	b.n	80008e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008c6:	f7ff fec1 	bl	800064c <HAL_GetTick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d908      	bls.n	80008e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2220      	movs	r2, #32
 80008d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2203      	movs	r2, #3
 80008de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80008e2:	2303      	movs	r3, #3
 80008e4:	e078      	b.n	80009d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e8      	bne.n	80008c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <HAL_DMA_Init+0x158>)
 8000900:	4013      	ands	r3, r2
 8000902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800091e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4313      	orrs	r3, r2
 8000936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800093c:	2b04      	cmp	r3, #4
 800093e:	d107      	bne.n	8000950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000948:	4313      	orrs	r3, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4313      	orrs	r3, r2
 800094e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f023 0307 	bic.w	r3, r3, #7
 8000966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	4313      	orrs	r3, r2
 8000970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000976:	2b04      	cmp	r3, #4
 8000978:	d117      	bne.n	80009aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00e      	beq.n	80009aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 fac3 	bl	8000f18 <DMA_CheckFifoParam>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d008      	beq.n	80009aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2240      	movs	r2, #64	@ 0x40
 800099c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80009a6:	2301      	movs	r3, #1
 80009a8:	e016      	b.n	80009d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 fa7a 	bl	8000eac <DMA_CalcBaseAndBitshift>
 80009b8:	4603      	mov	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009c0:	223f      	movs	r2, #63	@ 0x3f
 80009c2:	409a      	lsls	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	f010803f 	.word	0xf010803f

080009e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d101      	bne.n	8000a0a <HAL_DMA_Start_IT+0x26>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e040      	b.n	8000a8c <HAL_DMA_Start_IT+0xa8>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d12f      	bne.n	8000a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f000 fa0c 	bl	8000e50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a3c:	223f      	movs	r2, #63	@ 0x3f
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0216 	orr.w	r2, r2, #22
 8000a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0208 	orr.w	r2, r2, #8
 8000a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0201 	orr.w	r2, r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e005      	b.n	8000a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a86:	2302      	movs	r3, #2
 8000a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8000cdc <HAL_DMA_IRQHandler+0x248>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a8e      	ldr	r2, [pc, #568]	@ (8000ce0 <HAL_DMA_IRQHandler+0x24c>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	0a9b      	lsrs	r3, r3, #10
 8000aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000abe:	2208      	movs	r2, #8
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d01a      	beq.n	8000b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d013      	beq.n	8000b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aec:	2208      	movs	r2, #8
 8000aee:	409a      	lsls	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af8:	f043 0201 	orr.w	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b04:	2201      	movs	r2, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d012      	beq.n	8000b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00b      	beq.n	8000b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b22:	2201      	movs	r2, #1
 8000b24:	409a      	lsls	r2, r3
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b2e:	f043 0202 	orr.w	r2, r3, #2
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d012      	beq.n	8000b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b58:	2204      	movs	r2, #4
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b64:	f043 0204 	orr.w	r2, r3, #4
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b70:	2210      	movs	r2, #16
 8000b72:	409a      	lsls	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d043      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d03c      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b8e:	2210      	movs	r2, #16
 8000b90:	409a      	lsls	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d018      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d108      	bne.n	8000bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d024      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	4798      	blx	r3
 8000bc2:	e01f      	b.n	8000c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d01b      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	4798      	blx	r3
 8000bd4:	e016      	b.n	8000c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d107      	bne.n	8000bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0208 	bic.w	r2, r2, #8
 8000bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c08:	2220      	movs	r2, #32
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 808f 	beq.w	8000d34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 8087 	beq.w	8000d34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d136      	bne.n	8000cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0216 	bic.w	r2, r2, #22
 8000c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <HAL_DMA_IRQHandler+0x1da>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0208 	bic.w	r2, r2, #8
 8000c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c82:	223f      	movs	r2, #63	@ 0x3f
 8000c84:	409a      	lsls	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d07e      	beq.n	8000da0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	4798      	blx	r3
        }
        return;
 8000caa:	e079      	b.n	8000da0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d01d      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10d      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d031      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	4798      	blx	r3
 8000cd8:	e02c      	b.n	8000d34 <HAL_DMA_IRQHandler+0x2a0>
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d023      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
 8000cf4:	e01e      	b.n	8000d34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10f      	bne.n	8000d24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0210 	bic.w	r2, r2, #16
 8000d12:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d032      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d022      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0201 	bic.w	r2, r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d307      	bcc.n	8000d7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f2      	bne.n	8000d60 <HAL_DMA_IRQHandler+0x2cc>
 8000d7a:	e000      	b.n	8000d7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000d7c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4798      	blx	r3
 8000d9e:	e000      	b.n	8000da2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000da0:	bf00      	nop
    }
  }
}
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	460b      	mov	r3, r1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_DMA_RegisterCallback+0x20>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e03c      	b.n	8000e42 <HAL_DMA_RegisterCallback+0x9a>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d129      	bne.n	8000e30 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d829      	bhi.n	8000e36 <HAL_DMA_RegisterCallback+0x8e>
 8000de2:	a201      	add	r2, pc, #4	@ (adr r2, 8000de8 <HAL_DMA_RegisterCallback+0x40>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e09 	.word	0x08000e09
 8000df0:	08000e11 	.word	0x08000e11
 8000df4:	08000e19 	.word	0x08000e19
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	08000e29 	.word	0x08000e29
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8000e06:	e017      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8000e0e:	e013      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8000e16:	e00f      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8000e1e:	e00b      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8000e26:	e007      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8000e2e:	e003      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	75fb      	strb	r3, [r7, #23]
 8000e34:	e000      	b.n	8000e38 <HAL_DMA_RegisterCallback+0x90>
      break;
 8000e36:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b40      	cmp	r3, #64	@ 0x40
 8000e7c:	d108      	bne.n	8000e90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e8e:	e007      	b.n	8000ea0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3b10      	subs	r3, #16
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <DMA_CalcBaseAndBitshift+0x64>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ec6:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <DMA_CalcBaseAndBitshift+0x68>)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d909      	bls.n	8000eee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	1d1a      	adds	r2, r3, #4
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	659a      	str	r2, [r3, #88]	@ 0x58
 8000eec:	e007      	b.n	8000efe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000ef6:	f023 0303 	bic.w	r3, r3, #3
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	aaaaaaab 	.word	0xaaaaaaab
 8000f14:	080031f8 	.word	0x080031f8

08000f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11f      	bne.n	8000f72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d856      	bhi.n	8000fe6 <DMA_CheckFifoParam+0xce>
 8000f38:	a201      	add	r2, pc, #4	@ (adr r2, 8000f40 <DMA_CheckFifoParam+0x28>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f63 	.word	0x08000f63
 8000f48:	08000f51 	.word	0x08000f51
 8000f4c:	08000fe7 	.word	0x08000fe7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d046      	beq.n	8000fea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f60:	e043      	b.n	8000fea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000f6a:	d140      	bne.n	8000fee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f70:	e03d      	b.n	8000fee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f7a:	d121      	bne.n	8000fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d837      	bhi.n	8000ff2 <DMA_CheckFifoParam+0xda>
 8000f82:	a201      	add	r2, pc, #4	@ (adr r2, 8000f88 <DMA_CheckFifoParam+0x70>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08000f99 	.word	0x08000f99
 8000f8c:	08000f9f 	.word	0x08000f9f
 8000f90:	08000f99 	.word	0x08000f99
 8000f94:	08000fb1 	.word	0x08000fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f9c:	e030      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d025      	beq.n	8000ff6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fae:	e022      	b.n	8000ff6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000fb8:	d11f      	bne.n	8000ffa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000fbe:	e01c      	b.n	8000ffa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d903      	bls.n	8000fce <DMA_CheckFifoParam+0xb6>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d003      	beq.n	8000fd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000fcc:	e018      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd2:	e015      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00e      	beq.n	8000ffe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8000fe4:	e00b      	b.n	8000ffe <DMA_CheckFifoParam+0xe6>
      break;
 8000fe6:	bf00      	nop
 8000fe8:	e00a      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;
 8000fea:	bf00      	nop
 8000fec:	e008      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;
 8000fee:	bf00      	nop
 8000ff0:	e006      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;
 8000ff2:	bf00      	nop
 8000ff4:	e004      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;
 8000ff6:	bf00      	nop
 8000ff8:	e002      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;   
 8000ffa:	bf00      	nop
 8000ffc:	e000      	b.n	8001000 <DMA_CheckFifoParam+0xe8>
      break;
 8000ffe:	bf00      	nop
    }
  } 
  
  return status; 
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e159      	b.n	80012e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8148 	bne.w	80012da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d00b      	beq.n	800106a <HAL_GPIO_Init+0x5a>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	2b11      	cmp	r3, #17
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0xfc>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a2 	beq.w	80012da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b57      	ldr	r3, [pc, #348]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a56      	ldr	r2, [pc, #344]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b54      	ldr	r3, [pc, #336]	@ (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a52      	ldr	r2, [pc, #328]	@ (80012fc <HAL_GPIO_Init+0x2ec>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a49      	ldr	r2, [pc, #292]	@ (8001300 <HAL_GPIO_Init+0x2f0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x202>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a48      	ldr	r2, [pc, #288]	@ (8001304 <HAL_GPIO_Init+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x1fe>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a47      	ldr	r2, [pc, #284]	@ (8001308 <HAL_GPIO_Init+0x2f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x1fa>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a46      	ldr	r2, [pc, #280]	@ (800130c <HAL_GPIO_Init+0x2fc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x1f6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a45      	ldr	r2, [pc, #276]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x1f2>
 80011fe:	2304      	movs	r3, #4
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001202:	2307      	movs	r3, #7
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x204>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x204>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <HAL_GPIO_Init+0x2ec>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001256:	4a2f      	ldr	r2, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_GPIO_Init+0x304>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001280:	4a24      	ldr	r2, [pc, #144]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_GPIO_Init+0x304>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f aea2 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_RCC_GetHCLKFreq+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008

08001330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001334:	f7ff fff0 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	0a9b      	lsrs	r3, r3, #10
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	4903      	ldr	r1, [pc, #12]	@ (8001354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	08003280 	.word	0x08003280

08001358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800135c:	f7ff ffdc 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0b5b      	lsrs	r3, r3, #13
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	@ (800137c <HAL_RCC_GetPCLK2Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	08003280 	.word	0x08003280

08001380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e03f      	b.n	8001412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f837 	bl	800141a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	@ 0x24
 80013b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f915 	bl	80015f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80013e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b088      	sub	sp, #32
 8001432:	af02      	add	r7, sp, #8
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b20      	cmp	r3, #32
 800144c:	f040 8083 	bne.w	8001556 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_UART_Transmit+0x2e>
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e07b      	b.n	8001558 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_UART_Transmit+0x40>
 800146a:	2302      	movs	r3, #2
 800146c:	e074      	b.n	8001558 <HAL_UART_Transmit+0x12a>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2221      	movs	r2, #33	@ 0x21
 8001480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001484:	f7ff f8e2 	bl	800064c <HAL_GetTick>
 8001488:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800149e:	e042      	b.n	8001526 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b6:	d122      	bne.n	80014fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2200      	movs	r2, #0
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f84c 	bl	8001560 <UART_WaitOnFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e042      	b.n	8001558 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3302      	adds	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	e017      	b.n	8001526 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	e013      	b.n	8001526 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f829 	bl	8001560 <UART_WaitOnFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e01f      	b.n	8001558 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800152a:	b29b      	uxth	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1b7      	bne.n	80014a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2200      	movs	r2, #0
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f810 	bl	8001560 <UART_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e006      	b.n	8001558 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001556:	2302      	movs	r3, #2
  }
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001570:	e02c      	b.n	80015cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d028      	beq.n	80015cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <UART_WaitOnFlagUntilTimeout+0x30>
 8001580:	f7ff f864 	bl	800064c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	429a      	cmp	r2, r3
 800158e:	d21d      	bcs.n	80015cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800159e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e00f      	b.n	80015ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4013      	ands	r3, r2
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d0c3      	beq.n	8001572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001602:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800160e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001612:	68d9      	ldr	r1, [r3, #12]
 8001614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	ea40 0301 	orr.w	r3, r0, r1
 800161e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001620:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	431a      	orrs	r2, r3
 800162e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	431a      	orrs	r2, r3
 8001636:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4313      	orrs	r3, r2
 800163e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800164e:	f021 010c 	bic.w	r1, r1, #12
 8001652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800165c:	430b      	orrs	r3, r1
 800165e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001660:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800166c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001670:	6999      	ldr	r1, [r3, #24]
 8001672:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	ea40 0301 	orr.w	r3, r0, r1
 800167c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800167e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001688:	f040 824a 	bne.w	8001b20 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800168c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b96      	ldr	r3, [pc, #600]	@ (80018ec <UART_SetConfig+0x2f8>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d006      	beq.n	80016a6 <UART_SetConfig+0xb2>
 8001698:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b94      	ldr	r3, [pc, #592]	@ (80018f0 <UART_SetConfig+0x2fc>)
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8129 	bne.w	80018f8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016a6:	f7ff fe57 	bl	8001358 <HAL_RCC_GetPCLK2Freq>
 80016aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80016b8:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80016bc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80016c0:	4622      	mov	r2, r4
 80016c2:	462b      	mov	r3, r5
 80016c4:	1891      	adds	r1, r2, r2
 80016c6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80016ca:	415b      	adcs	r3, r3
 80016cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016d0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80016d4:	4621      	mov	r1, r4
 80016d6:	1851      	adds	r1, r2, r1
 80016d8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80016dc:	4629      	mov	r1, r5
 80016de:	414b      	adcs	r3, r1
 80016e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80016f0:	4649      	mov	r1, r9
 80016f2:	00cb      	lsls	r3, r1, #3
 80016f4:	4641      	mov	r1, r8
 80016f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016fa:	4641      	mov	r1, r8
 80016fc:	00ca      	lsls	r2, r1, #3
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	4603      	mov	r3, r0
 8001704:	4622      	mov	r2, r4
 8001706:	189b      	adds	r3, r3, r2
 8001708:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800170c:	462b      	mov	r3, r5
 800170e:	460a      	mov	r2, r1
 8001710:	eb42 0303 	adc.w	r3, r2, r3
 8001714:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001724:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001728:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 800172c:	460b      	mov	r3, r1
 800172e:	18db      	adds	r3, r3, r3
 8001730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001734:	4613      	mov	r3, r2
 8001736:	eb42 0303 	adc.w	r3, r2, r3
 800173a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800173e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001742:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8001746:	f7fe fd9b 	bl	8000280 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4b69      	ldr	r3, [pc, #420]	@ (80018f4 <UART_SetConfig+0x300>)
 8001750:	fba3 2302 	umull	r2, r3, r3, r2
 8001754:	095b      	lsrs	r3, r3, #5
 8001756:	011c      	lsls	r4, r3, #4
 8001758:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800175c:	2200      	movs	r2, #0
 800175e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001762:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001766:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	1891      	adds	r1, r2, r2
 8001770:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001774:	415b      	adcs	r3, r3
 8001776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800177a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800177e:	4641      	mov	r1, r8
 8001780:	1851      	adds	r1, r2, r1
 8001782:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001786:	4649      	mov	r1, r9
 8001788:	414b      	adcs	r3, r1
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800179a:	4659      	mov	r1, fp
 800179c:	00cb      	lsls	r3, r1, #3
 800179e:	4651      	mov	r1, sl
 80017a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017a4:	4651      	mov	r1, sl
 80017a6:	00ca      	lsls	r2, r1, #3
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	4642      	mov	r2, r8
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80017b6:	464b      	mov	r3, r9
 80017b8:	460a      	mov	r2, r1
 80017ba:	eb42 0303 	adc.w	r3, r2, r3
 80017be:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80017c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80017ce:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80017d2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80017d6:	460b      	mov	r3, r1
 80017d8:	18db      	adds	r3, r3, r3
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017de:	4613      	mov	r3, r2
 80017e0:	eb42 0303 	adc.w	r3, r2, r3
 80017e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80017e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80017ec:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80017f0:	f7fe fd46 	bl	8000280 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4611      	mov	r1, r2
 80017fa:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <UART_SetConfig+0x300>)
 80017fc:	fba3 2301 	umull	r2, r3, r3, r1
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	2264      	movs	r2, #100	@ 0x64
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	1acb      	subs	r3, r1, r3
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001810:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <UART_SetConfig+0x300>)
 8001812:	fba3 2302 	umull	r2, r3, r3, r2
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800181e:	441c      	add	r4, r3
 8001820:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001824:	2200      	movs	r2, #0
 8001826:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800182a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800182e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001832:	4642      	mov	r2, r8
 8001834:	464b      	mov	r3, r9
 8001836:	1891      	adds	r1, r2, r2
 8001838:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800183c:	415b      	adcs	r3, r3
 800183e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001842:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001846:	4641      	mov	r1, r8
 8001848:	1851      	adds	r1, r2, r1
 800184a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800184e:	4649      	mov	r1, r9
 8001850:	414b      	adcs	r3, r1
 8001852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8001862:	4659      	mov	r1, fp
 8001864:	00cb      	lsls	r3, r1, #3
 8001866:	4651      	mov	r1, sl
 8001868:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800186c:	4651      	mov	r1, sl
 800186e:	00ca      	lsls	r2, r1, #3
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	4603      	mov	r3, r0
 8001876:	4642      	mov	r2, r8
 8001878:	189b      	adds	r3, r3, r2
 800187a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800187e:	464b      	mov	r3, r9
 8001880:	460a      	mov	r2, r1
 8001882:	eb42 0303 	adc.w	r3, r2, r3
 8001886:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800188a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001896:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800189a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800189e:	460b      	mov	r3, r1
 80018a0:	18db      	adds	r3, r3, r3
 80018a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018a6:	4613      	mov	r3, r2
 80018a8:	eb42 0303 	adc.w	r3, r2, r3
 80018ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80018b4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80018b8:	f7fe fce2 	bl	8000280 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <UART_SetConfig+0x300>)
 80018c2:	fba3 1302 	umull	r1, r3, r3, r2
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2164      	movs	r1, #100	@ 0x64
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	3332      	adds	r3, #50	@ 0x32
 80018d4:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <UART_SetConfig+0x300>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4422      	add	r2, r4
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	e34a      	b.n	8001f82 <UART_SetConfig+0x98e>
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40011400 	.word	0x40011400
 80018f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80018f8:	f7ff fd1a 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 80018fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001904:	2200      	movs	r2, #0
 8001906:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800190a:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800190e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	1891      	adds	r1, r2, r2
 8001918:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800191c:	415b      	adcs	r3, r3
 800191e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001922:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001926:	4621      	mov	r1, r4
 8001928:	eb12 0a01 	adds.w	sl, r2, r1
 800192c:	4629      	mov	r1, r5
 800192e:	eb43 0b01 	adc.w	fp, r3, r1
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800193e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001942:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001946:	4692      	mov	sl, r2
 8001948:	469b      	mov	fp, r3
 800194a:	4623      	mov	r3, r4
 800194c:	eb1a 0303 	adds.w	r3, sl, r3
 8001950:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001954:	462b      	mov	r3, r5
 8001956:	eb4b 0303 	adc.w	r3, fp, r3
 800195a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800195e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800196a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800196e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8001972:	460b      	mov	r3, r1
 8001974:	18db      	adds	r3, r3, r3
 8001976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800197a:	4613      	mov	r3, r2
 800197c:	eb42 0303 	adc.w	r3, r2, r3
 8001980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001984:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001988:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800198c:	f7fe fc78 	bl	8000280 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4b61      	ldr	r3, [pc, #388]	@ (8001b1c <UART_SetConfig+0x528>)
 8001996:	fba3 2302 	umull	r2, r3, r3, r2
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	011c      	lsls	r4, r3, #4
 800199e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80019a8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80019ac:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80019b0:	4642      	mov	r2, r8
 80019b2:	464b      	mov	r3, r9
 80019b4:	1891      	adds	r1, r2, r2
 80019b6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80019b8:	415b      	adcs	r3, r3
 80019ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80019c0:	4641      	mov	r1, r8
 80019c2:	1851      	adds	r1, r2, r1
 80019c4:	6739      	str	r1, [r7, #112]	@ 0x70
 80019c6:	4649      	mov	r1, r9
 80019c8:	414b      	adcs	r3, r1
 80019ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80019d8:	4659      	mov	r1, fp
 80019da:	00cb      	lsls	r3, r1, #3
 80019dc:	4651      	mov	r1, sl
 80019de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019e2:	4651      	mov	r1, sl
 80019e4:	00ca      	lsls	r2, r1, #3
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	4642      	mov	r2, r8
 80019ee:	189b      	adds	r3, r3, r2
 80019f0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019f4:	464b      	mov	r3, r9
 80019f6:	460a      	mov	r2, r1
 80019f8:	eb42 0303 	adc.w	r3, r2, r3
 80019fc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a0c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001a10:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8001a14:	460b      	mov	r3, r1
 8001a16:	18db      	adds	r3, r3, r3
 8001a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	eb42 0303 	adc.w	r3, r2, r3
 8001a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a22:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001a26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8001a2a:	f7fe fc29 	bl	8000280 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <UART_SetConfig+0x528>)
 8001a36:	fba3 2301 	umull	r2, r3, r3, r1
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2264      	movs	r2, #100	@ 0x64
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	1acb      	subs	r3, r1, r3
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001a4a:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <UART_SetConfig+0x528>)
 8001a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001a58:	441c      	add	r4, r3
 8001a5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001a64:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a68:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	464b      	mov	r3, r9
 8001a70:	1891      	adds	r1, r2, r2
 8001a72:	6639      	str	r1, [r7, #96]	@ 0x60
 8001a74:	415b      	adcs	r3, r3
 8001a76:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	1851      	adds	r1, r2, r1
 8001a80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a82:	4649      	mov	r1, r9
 8001a84:	414b      	adcs	r3, r1
 8001a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8001a94:	4659      	mov	r1, fp
 8001a96:	00cb      	lsls	r3, r1, #3
 8001a98:	4651      	mov	r1, sl
 8001a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	00ca      	lsls	r2, r1, #3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	189b      	adds	r3, r3, r2
 8001aac:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001ab0:	464b      	mov	r3, r9
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	eb42 0303 	adc.w	r3, r2, r3
 8001ab8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001abc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001ac8:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001acc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	18db      	adds	r3, r3, r3
 8001ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	eb42 0303 	adc.w	r3, r2, r3
 8001adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ade:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ae2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8001ae6:	f7fe fbcb 	bl	8000280 <__aeabi_uldivmod>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <UART_SetConfig+0x528>)
 8001af0:	fba3 1302 	umull	r1, r3, r3, r2
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	2164      	movs	r1, #100	@ 0x64
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	3332      	adds	r3, #50	@ 0x32
 8001b02:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <UART_SetConfig+0x528>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4422      	add	r2, r4
 8001b16:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001b18:	e233      	b.n	8001f82 <UART_SetConfig+0x98e>
 8001b1a:	bf00      	nop
 8001b1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b8d      	ldr	r3, [pc, #564]	@ (8001d5c <UART_SetConfig+0x768>)
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d006      	beq.n	8001b3a <UART_SetConfig+0x546>
 8001b2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b8b      	ldr	r3, [pc, #556]	@ (8001d60 <UART_SetConfig+0x76c>)
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8117 	bne.w	8001d68 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b3a:	f7ff fc0d 	bl	8001358 <HAL_RCC_GetPCLK2Freq>
 8001b3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b46:	2200      	movs	r2, #0
 8001b48:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001b4c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8001b50:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001b54:	4622      	mov	r2, r4
 8001b56:	462b      	mov	r3, r5
 8001b58:	1891      	adds	r1, r2, r2
 8001b5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001b5c:	415b      	adcs	r3, r3
 8001b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b64:	4621      	mov	r1, r4
 8001b66:	eb12 0801 	adds.w	r8, r2, r1
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	eb43 0901 	adc.w	r9, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b84:	4690      	mov	r8, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	4623      	mov	r3, r4
 8001b8a:	eb18 0303 	adds.w	r3, r8, r3
 8001b8e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b92:	462b      	mov	r3, r5
 8001b94:	eb49 0303 	adc.w	r3, r9, r3
 8001b98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ba8:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8001bb8:	4629      	mov	r1, r5
 8001bba:	008b      	lsls	r3, r1, #2
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	008a      	lsls	r2, r1, #2
 8001bc6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8001bca:	f7fe fb59 	bl	8000280 <__aeabi_uldivmod>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4b64      	ldr	r3, [pc, #400]	@ (8001d64 <UART_SetConfig+0x770>)
 8001bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	011c      	lsls	r4, r3, #4
 8001bdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001be0:	2200      	movs	r2, #0
 8001be2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001be6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001bea:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8001bee:	4642      	mov	r2, r8
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	1891      	adds	r1, r2, r2
 8001bf4:	6439      	str	r1, [r7, #64]	@ 0x40
 8001bf6:	415b      	adcs	r3, r3
 8001bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bfe:	4641      	mov	r1, r8
 8001c00:	1851      	adds	r1, r2, r1
 8001c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c04:	4649      	mov	r1, r9
 8001c06:	414b      	adcs	r3, r1
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8001c16:	4659      	mov	r1, fp
 8001c18:	00cb      	lsls	r3, r1, #3
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c20:	4651      	mov	r1, sl
 8001c22:	00ca      	lsls	r2, r1, #3
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	189b      	adds	r3, r3, r2
 8001c2e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001c32:	464b      	mov	r3, r9
 8001c34:	460a      	mov	r2, r1
 8001c36:	eb42 0303 	adc.w	r3, r2, r3
 8001c3a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001c3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001c4a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	008b      	lsls	r3, r1, #2
 8001c5e:	4641      	mov	r1, r8
 8001c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c64:	4641      	mov	r1, r8
 8001c66:	008a      	lsls	r2, r1, #2
 8001c68:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001c6c:	f7fe fb08 	bl	8000280 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <UART_SetConfig+0x770>)
 8001c78:	fba3 2301 	umull	r2, r3, r3, r1
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	2264      	movs	r2, #100	@ 0x64
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	1acb      	subs	r3, r1, r3
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	3332      	adds	r3, #50	@ 0x32
 8001c8a:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <UART_SetConfig+0x770>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c96:	441c      	add	r4, r3
 8001c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001ca2:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8001ca6:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8001caa:	4642      	mov	r2, r8
 8001cac:	464b      	mov	r3, r9
 8001cae:	1891      	adds	r1, r2, r2
 8001cb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001cb2:	415b      	adcs	r3, r3
 8001cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cba:	4641      	mov	r1, r8
 8001cbc:	1851      	adds	r1, r2, r1
 8001cbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	414b      	adcs	r3, r1
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8001cd2:	4659      	mov	r1, fp
 8001cd4:	00cb      	lsls	r3, r1, #3
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cdc:	4651      	mov	r1, sl
 8001cde:	00ca      	lsls	r2, r1, #3
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	189b      	adds	r3, r3, r2
 8001cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001cee:	464b      	mov	r3, r9
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	eb42 0303 	adc.w	r3, r2, r3
 8001cf6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001cfa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d06:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8001d16:	4649      	mov	r1, r9
 8001d18:	008b      	lsls	r3, r1, #2
 8001d1a:	4641      	mov	r1, r8
 8001d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d20:	4641      	mov	r1, r8
 8001d22:	008a      	lsls	r2, r1, #2
 8001d24:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001d28:	f7fe faaa 	bl	8000280 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <UART_SetConfig+0x770>)
 8001d32:	fba3 1302 	umull	r1, r3, r3, r2
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2164      	movs	r1, #100	@ 0x64
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	3332      	adds	r3, #50	@ 0x32
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <UART_SetConfig+0x770>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4422      	add	r2, r4
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e112      	b.n	8001f82 <UART_SetConfig+0x98e>
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40011400 	.word	0x40011400
 8001d64:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d68:	f7ff fae2 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 8001d6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d74:	2200      	movs	r2, #0
 8001d76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001d7a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d7e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8001d82:	4642      	mov	r2, r8
 8001d84:	464b      	mov	r3, r9
 8001d86:	1891      	adds	r1, r2, r2
 8001d88:	6239      	str	r1, [r7, #32]
 8001d8a:	415b      	adcs	r3, r3
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d92:	4641      	mov	r1, r8
 8001d94:	1854      	adds	r4, r2, r1
 8001d96:	4649      	mov	r1, r9
 8001d98:	eb43 0501 	adc.w	r5, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	00eb      	lsls	r3, r5, #3
 8001da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001daa:	00e2      	lsls	r2, r4, #3
 8001dac:	4614      	mov	r4, r2
 8001dae:	461d      	mov	r5, r3
 8001db0:	4643      	mov	r3, r8
 8001db2:	18e3      	adds	r3, r4, r3
 8001db4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001db8:	464b      	mov	r3, r9
 8001dba:	eb45 0303 	adc.w	r3, r5, r3
 8001dbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001dc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001dce:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001dde:	4629      	mov	r1, r5
 8001de0:	008b      	lsls	r3, r1, #2
 8001de2:	4621      	mov	r1, r4
 8001de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001de8:	4621      	mov	r1, r4
 8001dea:	008a      	lsls	r2, r1, #2
 8001dec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001df0:	f7fe fa46 	bl	8000280 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4b65      	ldr	r3, [pc, #404]	@ (8001f90 <UART_SetConfig+0x99c>)
 8001dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	011c      	lsls	r4, r3, #4
 8001e02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e06:	2200      	movs	r2, #0
 8001e08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001e0c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001e10:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001e14:	4642      	mov	r2, r8
 8001e16:	464b      	mov	r3, r9
 8001e18:	1891      	adds	r1, r2, r2
 8001e1a:	61b9      	str	r1, [r7, #24]
 8001e1c:	415b      	adcs	r3, r3
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e24:	4641      	mov	r1, r8
 8001e26:	1851      	adds	r1, r2, r1
 8001e28:	6139      	str	r1, [r7, #16]
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	414b      	adcs	r3, r1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e3c:	4659      	mov	r1, fp
 8001e3e:	00cb      	lsls	r3, r1, #3
 8001e40:	4651      	mov	r1, sl
 8001e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e46:	4651      	mov	r1, sl
 8001e48:	00ca      	lsls	r2, r1, #3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4642      	mov	r2, r8
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001e58:	464b      	mov	r3, r9
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	eb42 0303 	adc.w	r3, r2, r3
 8001e60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001e64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001e70:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001e80:	4649      	mov	r1, r9
 8001e82:	008b      	lsls	r3, r1, #2
 8001e84:	4641      	mov	r1, r8
 8001e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	008a      	lsls	r2, r1, #2
 8001e8e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001e92:	f7fe f9f5 	bl	8000280 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f90 <UART_SetConfig+0x99c>)
 8001e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2264      	movs	r2, #100	@ 0x64
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	3332      	adds	r3, #50	@ 0x32
 8001eb0:	4a37      	ldr	r2, [pc, #220]	@ (8001f90 <UART_SetConfig+0x99c>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ebc:	441c      	add	r4, r3
 8001ebe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ec8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ecc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	1891      	adds	r1, r2, r2
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1851      	adds	r1, r2, r1
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	414b      	adcs	r3, r1
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ef8:	4659      	mov	r1, fp
 8001efa:	00cb      	lsls	r3, r1, #3
 8001efc:	4651      	mov	r1, sl
 8001efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f02:	4651      	mov	r1, sl
 8001f04:	00ca      	lsls	r2, r1, #3
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f14:	464b      	mov	r3, r9
 8001f16:	460a      	mov	r2, r1
 8001f18:	eb42 0303 	adc.w	r3, r2, r3
 8001f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f2c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	008b      	lsls	r3, r1, #2
 8001f40:	4641      	mov	r1, r8
 8001f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f46:	4641      	mov	r1, r8
 8001f48:	008a      	lsls	r2, r1, #2
 8001f4a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f4e:	f7fe f997 	bl	8000280 <__aeabi_uldivmod>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <UART_SetConfig+0x99c>)
 8001f58:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	2164      	movs	r1, #100	@ 0x64
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	3332      	adds	r3, #50	@ 0x32
 8001f6a:	4a09      	ldr	r2, [pc, #36]	@ (8001f90 <UART_SetConfig+0x99c>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4422      	add	r2, r4
 8001f7e:	609a      	str	r2, [r3, #8]
}
 8001f80:	e7ff      	b.n	8001f82 <UART_SetConfig+0x98e>
 8001f82:	bf00      	nop
 8001f84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	51eb851f 	.word	0x51eb851f

08001f94 <main>:
static void TransferComplete(DMA_HandleTypeDef *DmaHandle);
static void TransferError(DMA_HandleTypeDef *DmaHandle);
static void dma_config(void);

int main()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8001f98:	f7fe faea 	bl	8000570 <HAL_Init>
	uart_init() ;
 8001f9c:	f000 f950 	bl	8002240 <uart_init>

	dma_config();
 8001fa0:	f000 f802 	bl	8001fa8 <dma_config>

	while(1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <main+0x10>

08001fa8 <dma_config>:
}



static void dma_config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <dma_config+0xb8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8002060 <dma_config+0xb8>)
 8001fb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <dma_config+0xb8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]


	DmaHandle.Instance					= DMA_STREAM;
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <dma_config+0xbc>)
 8001fcc:	4a26      	ldr	r2, [pc, #152]	@ (8002068 <dma_config+0xc0>)
 8001fce:	601a      	str	r2, [r3, #0]
	DmaHandle.Init.Channel				= DMA_CHANNEL;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <dma_config+0xbc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
	DmaHandle.Init.Direction			= DMA_MEMORY_TO_MEMORY;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <dma_config+0xbc>)
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	609a      	str	r2, [r3, #8]
	DmaHandle.Init.PeriphDataAlignment	= DMA_PDATAALIGN_WORD;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <dma_config+0xbc>)
 8001fde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fe2:	615a      	str	r2, [r3, #20]
	DmaHandle.Init.MemDataAlignment		= DMA_MDATAALIGN_WORD;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <dma_config+0xbc>)
 8001fe6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fea:	619a      	str	r2, [r3, #24]
	DmaHandle.Init.PeriphInc			= DMA_PINC_ENABLE;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <dma_config+0xbc>)
 8001fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff2:	60da      	str	r2, [r3, #12]
	DmaHandle.Init.MemInc				= DMA_MINC_ENABLE;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <dma_config+0xbc>)
 8001ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ffa:	611a      	str	r2, [r3, #16]
	DmaHandle.Init.Mode					= DMA_NORMAL;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <dma_config+0xbc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
	DmaHandle.Init.Priority				= DMA_PRIORITY_HIGH;
 8002002:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <dma_config+0xbc>)
 8002004:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002008:	621a      	str	r2, [r3, #32]
	DmaHandle.Init.FIFOMode				= DMA_FIFOMODE_ENABLE;
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <dma_config+0xbc>)
 800200c:	2204      	movs	r2, #4
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
	DmaHandle.Init.FIFOThreshold		= DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <dma_config+0xbc>)
 8002012:	2200      	movs	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
	DmaHandle.Init.MemBurst				= DMA_MBURST_SINGLE;
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <dma_config+0xbc>)
 8002018:	2200      	movs	r2, #0
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
	DmaHandle.Init.PeriphBurst			= DMA_PBURST_SINGLE;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <dma_config+0xbc>)
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_DMA_Init(&DmaHandle);
 8002022:	4810      	ldr	r0, [pc, #64]	@ (8002064 <dma_config+0xbc>)
 8002024:	f7fe fc30 	bl	8000888 <HAL_DMA_Init>

	//Register callback functions
	HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8002028:	4a10      	ldr	r2, [pc, #64]	@ (800206c <dma_config+0xc4>)
 800202a:	2100      	movs	r1, #0
 800202c:	480d      	ldr	r0, [pc, #52]	@ (8002064 <dma_config+0xbc>)
 800202e:	f7fe febb 	bl	8000da8 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8002032:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <dma_config+0xc8>)
 8002034:	2104      	movs	r1, #4
 8002036:	480b      	ldr	r0, [pc, #44]	@ (8002064 <dma_config+0xbc>)
 8002038:	f7fe feb6 	bl	8000da8 <HAL_DMA_RegisterCallback>

	HAL_NVIC_SetPriority(DMA_STREAM_IRQ, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2038      	movs	r0, #56	@ 0x38
 8002042:	f7fe fbea 	bl	800081a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA_STREAM_IRQ);
 8002046:	2038      	movs	r0, #56	@ 0x38
 8002048:	f7fe fc03 	bl	8000852 <HAL_NVIC_EnableIRQ>

	HAL_DMA_Start_IT(&DmaHandle, (uint32_t)&aSRC_Const_Buffer, (uint32_t)&aDST_Buffer, BUFFER_SIZE);
 800204c:	4909      	ldr	r1, [pc, #36]	@ (8002074 <dma_config+0xcc>)
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <dma_config+0xd0>)
 8002050:	2320      	movs	r3, #32
 8002052:	4804      	ldr	r0, [pc, #16]	@ (8002064 <dma_config+0xbc>)
 8002054:	f7fe fcc6 	bl	80009e4 <HAL_DMA_Start_IT>


}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	20000088 	.word	0x20000088
 8002068:	40026410 	.word	0x40026410
 800206c:	0800207d 	.word	0x0800207d
 8002070:	08002099 	.word	0x08002099
 8002074:	08003200 	.word	0x08003200
 8002078:	200000e8 	.word	0x200000e8

0800207c <TransferComplete>:
static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	//Do something...
	printf("Transfer Complete!! \n\r");
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <TransferComplete+0x18>)
 8002086:	f000 fa27 	bl	80024d8 <iprintf>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	080031cc 	.word	0x080031cc

08002098 <TransferError>:


static void TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	//Do something
	printf("Transfer Error!! \n\r");
 80020a0:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <TransferError+0x18>)
 80020a2:	f000 fa19 	bl	80024d8 <iprintf>

}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	080031e4 	.word	0x080031e4

080020b4 <DMA2_Stream0_IRQHandler>:


void DMA_STREAM_IRQHANDLER(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&DmaHandle);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DMA2_Stream0_IRQHandler+0x10>)
 80020ba:	f7fe fceb 	bl	8000a94 <HAL_DMA_IRQHandler>

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000088 	.word	0x20000088

080020c8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 80020cc:	f7fe faaa 	bl	8000624 <HAL_IncTick>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e00a      	b.n	80020fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e6:	f3af 8000 	nop.w
 80020ea:	4601      	mov	r1, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	b2ca      	uxtb	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbf0      	blt.n	80020e6 <_read+0x12>
  }

  return len;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e009      	b.n	8002134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f877 	bl	800221c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf1      	blt.n	8002120 <_write+0x12>
  }
  return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_close>:

int _close(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800216e:	605a      	str	r2, [r3, #4]
  return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_isatty>:

int _isatty(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f000 fa1e 	bl	8002620 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20018000 	.word	0x20018000
 8002210:	00000400 	.word	0x00000400
 8002214:	20000168 	.word	0x20000168
 8002218:	200002f8 	.word	0x200002f8

0800221c <__io_putchar>:
UART_HandleTypeDef huart2 ;



int __io_putchar(int ch)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 8002224:	1d39      	adds	r1, r7, #4
 8002226:	230a      	movs	r3, #10
 8002228:	2201      	movs	r2, #1
 800222a:	4804      	ldr	r0, [pc, #16]	@ (800223c <__io_putchar+0x20>)
 800222c:	f7ff f8ff 	bl	800142e <HAL_UART_Transmit>
	return ch ;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000016c 	.word	0x2000016c

08002240 <uart_init>:

void uart_init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <uart_init+0xb0>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <uart_init+0xb0>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <uart_init+0xb0>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <uart_init+0xb0>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <uart_init+0xb0>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <uart_init+0xb0>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 800228e:	230c      	movs	r3, #12
 8002290:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8002292:	2302      	movs	r3, #2
 8002294:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 8002296:	2307      	movs	r3, #7
 8002298:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 800229e:	2303      	movs	r3, #3
 80022a0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4619      	mov	r1, r3
 80022a8:	4812      	ldr	r0, [pc, #72]	@ (80022f4 <uart_init+0xb4>)
 80022aa:	f7fe feb1 	bl	8001010 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 80022ae:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <uart_init+0xb8>)
 80022b0:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <uart_init+0xbc>)
 80022b2:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <uart_init+0xb8>)
 80022b6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022ba:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <uart_init+0xb8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <uart_init+0xb8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <uart_init+0xb8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <uart_init+0xb8>)
 80022d0:	2208      	movs	r2, #8
 80022d2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <uart_init+0xb8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <uart_init+0xb8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <uart_init+0xb8>)
 80022e2:	f7ff f84d 	bl	8001380 <HAL_UART_Init>




}
 80022e6:	bf00      	nop
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	2000016c 	.word	0x2000016c
 80022fc:	40004400 	.word	0x40004400

08002300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002300:	480d      	ldr	r0, [pc, #52]	@ (8002338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	@ (800233c <LoopForever+0x6>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	@ (8002340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <LoopForever+0xe>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	@ (800234c <LoopForever+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800232e:	f000 f97d 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002332:	f7ff fe2f 	bl	8001f94 <main>

08002336 <LoopForever>:

LoopForever:
  b LoopForever
 8002336:	e7fe      	b.n	8002336 <LoopForever>
  ldr   r0, =_estack
 8002338:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002344:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8002348:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800234c:	200002f8 	.word	0x200002f8

08002350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>
	...

08002354 <std>:
 8002354:	2300      	movs	r3, #0
 8002356:	b510      	push	{r4, lr}
 8002358:	4604      	mov	r4, r0
 800235a:	e9c0 3300 	strd	r3, r3, [r0]
 800235e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002362:	6083      	str	r3, [r0, #8]
 8002364:	8181      	strh	r1, [r0, #12]
 8002366:	6643      	str	r3, [r0, #100]	@ 0x64
 8002368:	81c2      	strh	r2, [r0, #14]
 800236a:	6183      	str	r3, [r0, #24]
 800236c:	4619      	mov	r1, r3
 800236e:	2208      	movs	r2, #8
 8002370:	305c      	adds	r0, #92	@ 0x5c
 8002372:	f000 f906 	bl	8002582 <memset>
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <std+0x58>)
 8002378:	6263      	str	r3, [r4, #36]	@ 0x24
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <std+0x5c>)
 800237c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <std+0x60>)
 8002380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <std+0x64>)
 8002384:	6323      	str	r3, [r4, #48]	@ 0x30
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <std+0x68>)
 8002388:	6224      	str	r4, [r4, #32]
 800238a:	429c      	cmp	r4, r3
 800238c:	d006      	beq.n	800239c <std+0x48>
 800238e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002392:	4294      	cmp	r4, r2
 8002394:	d002      	beq.n	800239c <std+0x48>
 8002396:	33d0      	adds	r3, #208	@ 0xd0
 8002398:	429c      	cmp	r4, r3
 800239a:	d105      	bne.n	80023a8 <std+0x54>
 800239c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023a4:	f000 b966 	b.w	8002674 <__retarget_lock_init_recursive>
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	bf00      	nop
 80023ac:	080024fd 	.word	0x080024fd
 80023b0:	0800251f 	.word	0x0800251f
 80023b4:	08002557 	.word	0x08002557
 80023b8:	0800257b 	.word	0x0800257b
 80023bc:	200001ac 	.word	0x200001ac

080023c0 <stdio_exit_handler>:
 80023c0:	4a02      	ldr	r2, [pc, #8]	@ (80023cc <stdio_exit_handler+0xc>)
 80023c2:	4903      	ldr	r1, [pc, #12]	@ (80023d0 <stdio_exit_handler+0x10>)
 80023c4:	4803      	ldr	r0, [pc, #12]	@ (80023d4 <stdio_exit_handler+0x14>)
 80023c6:	f000 b869 	b.w	800249c <_fwalk_sglue>
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	08002f15 	.word	0x08002f15
 80023d4:	2000001c 	.word	0x2000001c

080023d8 <cleanup_stdio>:
 80023d8:	6841      	ldr	r1, [r0, #4]
 80023da:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <cleanup_stdio+0x34>)
 80023dc:	4299      	cmp	r1, r3
 80023de:	b510      	push	{r4, lr}
 80023e0:	4604      	mov	r4, r0
 80023e2:	d001      	beq.n	80023e8 <cleanup_stdio+0x10>
 80023e4:	f000 fd96 	bl	8002f14 <_fflush_r>
 80023e8:	68a1      	ldr	r1, [r4, #8]
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <cleanup_stdio+0x38>)
 80023ec:	4299      	cmp	r1, r3
 80023ee:	d002      	beq.n	80023f6 <cleanup_stdio+0x1e>
 80023f0:	4620      	mov	r0, r4
 80023f2:	f000 fd8f 	bl	8002f14 <_fflush_r>
 80023f6:	68e1      	ldr	r1, [r4, #12]
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <cleanup_stdio+0x3c>)
 80023fa:	4299      	cmp	r1, r3
 80023fc:	d004      	beq.n	8002408 <cleanup_stdio+0x30>
 80023fe:	4620      	mov	r0, r4
 8002400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002404:	f000 bd86 	b.w	8002f14 <_fflush_r>
 8002408:	bd10      	pop	{r4, pc}
 800240a:	bf00      	nop
 800240c:	200001ac 	.word	0x200001ac
 8002410:	20000214 	.word	0x20000214
 8002414:	2000027c 	.word	0x2000027c

08002418 <global_stdio_init.part.0>:
 8002418:	b510      	push	{r4, lr}
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <global_stdio_init.part.0+0x30>)
 800241c:	4c0b      	ldr	r4, [pc, #44]	@ (800244c <global_stdio_init.part.0+0x34>)
 800241e:	4a0c      	ldr	r2, [pc, #48]	@ (8002450 <global_stdio_init.part.0+0x38>)
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	4620      	mov	r0, r4
 8002424:	2200      	movs	r2, #0
 8002426:	2104      	movs	r1, #4
 8002428:	f7ff ff94 	bl	8002354 <std>
 800242c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002430:	2201      	movs	r2, #1
 8002432:	2109      	movs	r1, #9
 8002434:	f7ff ff8e 	bl	8002354 <std>
 8002438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800243c:	2202      	movs	r2, #2
 800243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002442:	2112      	movs	r1, #18
 8002444:	f7ff bf86 	b.w	8002354 <std>
 8002448:	200002e4 	.word	0x200002e4
 800244c:	200001ac 	.word	0x200001ac
 8002450:	080023c1 	.word	0x080023c1

08002454 <__sfp_lock_acquire>:
 8002454:	4801      	ldr	r0, [pc, #4]	@ (800245c <__sfp_lock_acquire+0x8>)
 8002456:	f000 b90e 	b.w	8002676 <__retarget_lock_acquire_recursive>
 800245a:	bf00      	nop
 800245c:	200002ed 	.word	0x200002ed

08002460 <__sfp_lock_release>:
 8002460:	4801      	ldr	r0, [pc, #4]	@ (8002468 <__sfp_lock_release+0x8>)
 8002462:	f000 b909 	b.w	8002678 <__retarget_lock_release_recursive>
 8002466:	bf00      	nop
 8002468:	200002ed 	.word	0x200002ed

0800246c <__sinit>:
 800246c:	b510      	push	{r4, lr}
 800246e:	4604      	mov	r4, r0
 8002470:	f7ff fff0 	bl	8002454 <__sfp_lock_acquire>
 8002474:	6a23      	ldr	r3, [r4, #32]
 8002476:	b11b      	cbz	r3, 8002480 <__sinit+0x14>
 8002478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800247c:	f7ff bff0 	b.w	8002460 <__sfp_lock_release>
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__sinit+0x28>)
 8002482:	6223      	str	r3, [r4, #32]
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__sinit+0x2c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f5      	bne.n	8002478 <__sinit+0xc>
 800248c:	f7ff ffc4 	bl	8002418 <global_stdio_init.part.0>
 8002490:	e7f2      	b.n	8002478 <__sinit+0xc>
 8002492:	bf00      	nop
 8002494:	080023d9 	.word	0x080023d9
 8002498:	200002e4 	.word	0x200002e4

0800249c <_fwalk_sglue>:
 800249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024a0:	4607      	mov	r7, r0
 80024a2:	4688      	mov	r8, r1
 80024a4:	4614      	mov	r4, r2
 80024a6:	2600      	movs	r6, #0
 80024a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024ac:	f1b9 0901 	subs.w	r9, r9, #1
 80024b0:	d505      	bpl.n	80024be <_fwalk_sglue+0x22>
 80024b2:	6824      	ldr	r4, [r4, #0]
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d1f7      	bne.n	80024a8 <_fwalk_sglue+0xc>
 80024b8:	4630      	mov	r0, r6
 80024ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024be:	89ab      	ldrh	r3, [r5, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d907      	bls.n	80024d4 <_fwalk_sglue+0x38>
 80024c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024c8:	3301      	adds	r3, #1
 80024ca:	d003      	beq.n	80024d4 <_fwalk_sglue+0x38>
 80024cc:	4629      	mov	r1, r5
 80024ce:	4638      	mov	r0, r7
 80024d0:	47c0      	blx	r8
 80024d2:	4306      	orrs	r6, r0
 80024d4:	3568      	adds	r5, #104	@ 0x68
 80024d6:	e7e9      	b.n	80024ac <_fwalk_sglue+0x10>

080024d8 <iprintf>:
 80024d8:	b40f      	push	{r0, r1, r2, r3}
 80024da:	b507      	push	{r0, r1, r2, lr}
 80024dc:	4906      	ldr	r1, [pc, #24]	@ (80024f8 <iprintf+0x20>)
 80024de:	ab04      	add	r3, sp, #16
 80024e0:	6808      	ldr	r0, [r1, #0]
 80024e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80024e6:	6881      	ldr	r1, [r0, #8]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f000 f9e9 	bl	80028c0 <_vfiprintf_r>
 80024ee:	b003      	add	sp, #12
 80024f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024f4:	b004      	add	sp, #16
 80024f6:	4770      	bx	lr
 80024f8:	20000018 	.word	0x20000018

080024fc <__sread>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	460c      	mov	r4, r1
 8002500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002504:	f000 f868 	bl	80025d8 <_read_r>
 8002508:	2800      	cmp	r0, #0
 800250a:	bfab      	itete	ge
 800250c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800250e:	89a3      	ldrhlt	r3, [r4, #12]
 8002510:	181b      	addge	r3, r3, r0
 8002512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002516:	bfac      	ite	ge
 8002518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800251a:	81a3      	strhlt	r3, [r4, #12]
 800251c:	bd10      	pop	{r4, pc}

0800251e <__swrite>:
 800251e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002522:	461f      	mov	r7, r3
 8002524:	898b      	ldrh	r3, [r1, #12]
 8002526:	05db      	lsls	r3, r3, #23
 8002528:	4605      	mov	r5, r0
 800252a:	460c      	mov	r4, r1
 800252c:	4616      	mov	r6, r2
 800252e:	d505      	bpl.n	800253c <__swrite+0x1e>
 8002530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002534:	2302      	movs	r3, #2
 8002536:	2200      	movs	r2, #0
 8002538:	f000 f83c 	bl	80025b4 <_lseek_r>
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002546:	81a3      	strh	r3, [r4, #12]
 8002548:	4632      	mov	r2, r6
 800254a:	463b      	mov	r3, r7
 800254c:	4628      	mov	r0, r5
 800254e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002552:	f000 b853 	b.w	80025fc <_write_r>

08002556 <__sseek>:
 8002556:	b510      	push	{r4, lr}
 8002558:	460c      	mov	r4, r1
 800255a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800255e:	f000 f829 	bl	80025b4 <_lseek_r>
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	89a3      	ldrh	r3, [r4, #12]
 8002566:	bf15      	itete	ne
 8002568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800256a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800256e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002572:	81a3      	strheq	r3, [r4, #12]
 8002574:	bf18      	it	ne
 8002576:	81a3      	strhne	r3, [r4, #12]
 8002578:	bd10      	pop	{r4, pc}

0800257a <__sclose>:
 800257a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257e:	f000 b809 	b.w	8002594 <_close_r>

08002582 <memset>:
 8002582:	4402      	add	r2, r0
 8002584:	4603      	mov	r3, r0
 8002586:	4293      	cmp	r3, r2
 8002588:	d100      	bne.n	800258c <memset+0xa>
 800258a:	4770      	bx	lr
 800258c:	f803 1b01 	strb.w	r1, [r3], #1
 8002590:	e7f9      	b.n	8002586 <memset+0x4>
	...

08002594 <_close_r>:
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4d06      	ldr	r5, [pc, #24]	@ (80025b0 <_close_r+0x1c>)
 8002598:	2300      	movs	r3, #0
 800259a:	4604      	mov	r4, r0
 800259c:	4608      	mov	r0, r1
 800259e:	602b      	str	r3, [r5, #0]
 80025a0:	f7ff fdd1 	bl	8002146 <_close>
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	d102      	bne.n	80025ae <_close_r+0x1a>
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	b103      	cbz	r3, 80025ae <_close_r+0x1a>
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	200002e8 	.word	0x200002e8

080025b4 <_lseek_r>:
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4d07      	ldr	r5, [pc, #28]	@ (80025d4 <_lseek_r+0x20>)
 80025b8:	4604      	mov	r4, r0
 80025ba:	4608      	mov	r0, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	2200      	movs	r2, #0
 80025c0:	602a      	str	r2, [r5, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff fde6 	bl	8002194 <_lseek>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d102      	bne.n	80025d2 <_lseek_r+0x1e>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b103      	cbz	r3, 80025d2 <_lseek_r+0x1e>
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200002e8 	.word	0x200002e8

080025d8 <_read_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4d07      	ldr	r5, [pc, #28]	@ (80025f8 <_read_r+0x20>)
 80025dc:	4604      	mov	r4, r0
 80025de:	4608      	mov	r0, r1
 80025e0:	4611      	mov	r1, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	602a      	str	r2, [r5, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7ff fd74 	bl	80020d4 <_read>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_read_r+0x1e>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_read_r+0x1e>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	200002e8 	.word	0x200002e8

080025fc <_write_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4d07      	ldr	r5, [pc, #28]	@ (800261c <_write_r+0x20>)
 8002600:	4604      	mov	r4, r0
 8002602:	4608      	mov	r0, r1
 8002604:	4611      	mov	r1, r2
 8002606:	2200      	movs	r2, #0
 8002608:	602a      	str	r2, [r5, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f7ff fd7f 	bl	800210e <_write>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d102      	bne.n	800261a <_write_r+0x1e>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	b103      	cbz	r3, 800261a <_write_r+0x1e>
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	bd38      	pop	{r3, r4, r5, pc}
 800261c:	200002e8 	.word	0x200002e8

08002620 <__errno>:
 8002620:	4b01      	ldr	r3, [pc, #4]	@ (8002628 <__errno+0x8>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000018 	.word	0x20000018

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4d0d      	ldr	r5, [pc, #52]	@ (8002664 <__libc_init_array+0x38>)
 8002630:	4c0d      	ldr	r4, [pc, #52]	@ (8002668 <__libc_init_array+0x3c>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	2600      	movs	r6, #0
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	4d0b      	ldr	r5, [pc, #44]	@ (800266c <__libc_init_array+0x40>)
 800263e:	4c0c      	ldr	r4, [pc, #48]	@ (8002670 <__libc_init_array+0x44>)
 8002640:	f000 fdb8 	bl	80031b4 <_init>
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	2600      	movs	r6, #0
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080032c4 	.word	0x080032c4
 8002668:	080032c4 	.word	0x080032c4
 800266c:	080032c4 	.word	0x080032c4
 8002670:	080032c8 	.word	0x080032c8

08002674 <__retarget_lock_init_recursive>:
 8002674:	4770      	bx	lr

08002676 <__retarget_lock_acquire_recursive>:
 8002676:	4770      	bx	lr

08002678 <__retarget_lock_release_recursive>:
 8002678:	4770      	bx	lr
	...

0800267c <_free_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4605      	mov	r5, r0
 8002680:	2900      	cmp	r1, #0
 8002682:	d041      	beq.n	8002708 <_free_r+0x8c>
 8002684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002688:	1f0c      	subs	r4, r1, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	bfb8      	it	lt
 800268e:	18e4      	addlt	r4, r4, r3
 8002690:	f000 f8e0 	bl	8002854 <__malloc_lock>
 8002694:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <_free_r+0x90>)
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	b933      	cbnz	r3, 80026a8 <_free_r+0x2c>
 800269a:	6063      	str	r3, [r4, #4]
 800269c:	6014      	str	r4, [r2, #0]
 800269e:	4628      	mov	r0, r5
 80026a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026a4:	f000 b8dc 	b.w	8002860 <__malloc_unlock>
 80026a8:	42a3      	cmp	r3, r4
 80026aa:	d908      	bls.n	80026be <_free_r+0x42>
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	1821      	adds	r1, r4, r0
 80026b0:	428b      	cmp	r3, r1
 80026b2:	bf01      	itttt	eq
 80026b4:	6819      	ldreq	r1, [r3, #0]
 80026b6:	685b      	ldreq	r3, [r3, #4]
 80026b8:	1809      	addeq	r1, r1, r0
 80026ba:	6021      	streq	r1, [r4, #0]
 80026bc:	e7ed      	b.n	800269a <_free_r+0x1e>
 80026be:	461a      	mov	r2, r3
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	b10b      	cbz	r3, 80026c8 <_free_r+0x4c>
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	d9fa      	bls.n	80026be <_free_r+0x42>
 80026c8:	6811      	ldr	r1, [r2, #0]
 80026ca:	1850      	adds	r0, r2, r1
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d10b      	bne.n	80026e8 <_free_r+0x6c>
 80026d0:	6820      	ldr	r0, [r4, #0]
 80026d2:	4401      	add	r1, r0
 80026d4:	1850      	adds	r0, r2, r1
 80026d6:	4283      	cmp	r3, r0
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	d1e0      	bne.n	800269e <_free_r+0x22>
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	6053      	str	r3, [r2, #4]
 80026e2:	4408      	add	r0, r1
 80026e4:	6010      	str	r0, [r2, #0]
 80026e6:	e7da      	b.n	800269e <_free_r+0x22>
 80026e8:	d902      	bls.n	80026f0 <_free_r+0x74>
 80026ea:	230c      	movs	r3, #12
 80026ec:	602b      	str	r3, [r5, #0]
 80026ee:	e7d6      	b.n	800269e <_free_r+0x22>
 80026f0:	6820      	ldr	r0, [r4, #0]
 80026f2:	1821      	adds	r1, r4, r0
 80026f4:	428b      	cmp	r3, r1
 80026f6:	bf04      	itt	eq
 80026f8:	6819      	ldreq	r1, [r3, #0]
 80026fa:	685b      	ldreq	r3, [r3, #4]
 80026fc:	6063      	str	r3, [r4, #4]
 80026fe:	bf04      	itt	eq
 8002700:	1809      	addeq	r1, r1, r0
 8002702:	6021      	streq	r1, [r4, #0]
 8002704:	6054      	str	r4, [r2, #4]
 8002706:	e7ca      	b.n	800269e <_free_r+0x22>
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	bf00      	nop
 800270c:	200002f4 	.word	0x200002f4

08002710 <sbrk_aligned>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4e0f      	ldr	r6, [pc, #60]	@ (8002750 <sbrk_aligned+0x40>)
 8002714:	460c      	mov	r4, r1
 8002716:	6831      	ldr	r1, [r6, #0]
 8002718:	4605      	mov	r5, r0
 800271a:	b911      	cbnz	r1, 8002722 <sbrk_aligned+0x12>
 800271c:	f000 fcb6 	bl	800308c <_sbrk_r>
 8002720:	6030      	str	r0, [r6, #0]
 8002722:	4621      	mov	r1, r4
 8002724:	4628      	mov	r0, r5
 8002726:	f000 fcb1 	bl	800308c <_sbrk_r>
 800272a:	1c43      	adds	r3, r0, #1
 800272c:	d103      	bne.n	8002736 <sbrk_aligned+0x26>
 800272e:	f04f 34ff 	mov.w	r4, #4294967295
 8002732:	4620      	mov	r0, r4
 8002734:	bd70      	pop	{r4, r5, r6, pc}
 8002736:	1cc4      	adds	r4, r0, #3
 8002738:	f024 0403 	bic.w	r4, r4, #3
 800273c:	42a0      	cmp	r0, r4
 800273e:	d0f8      	beq.n	8002732 <sbrk_aligned+0x22>
 8002740:	1a21      	subs	r1, r4, r0
 8002742:	4628      	mov	r0, r5
 8002744:	f000 fca2 	bl	800308c <_sbrk_r>
 8002748:	3001      	adds	r0, #1
 800274a:	d1f2      	bne.n	8002732 <sbrk_aligned+0x22>
 800274c:	e7ef      	b.n	800272e <sbrk_aligned+0x1e>
 800274e:	bf00      	nop
 8002750:	200002f0 	.word	0x200002f0

08002754 <_malloc_r>:
 8002754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002758:	1ccd      	adds	r5, r1, #3
 800275a:	f025 0503 	bic.w	r5, r5, #3
 800275e:	3508      	adds	r5, #8
 8002760:	2d0c      	cmp	r5, #12
 8002762:	bf38      	it	cc
 8002764:	250c      	movcc	r5, #12
 8002766:	2d00      	cmp	r5, #0
 8002768:	4606      	mov	r6, r0
 800276a:	db01      	blt.n	8002770 <_malloc_r+0x1c>
 800276c:	42a9      	cmp	r1, r5
 800276e:	d904      	bls.n	800277a <_malloc_r+0x26>
 8002770:	230c      	movs	r3, #12
 8002772:	6033      	str	r3, [r6, #0]
 8002774:	2000      	movs	r0, #0
 8002776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002850 <_malloc_r+0xfc>
 800277e:	f000 f869 	bl	8002854 <__malloc_lock>
 8002782:	f8d8 3000 	ldr.w	r3, [r8]
 8002786:	461c      	mov	r4, r3
 8002788:	bb44      	cbnz	r4, 80027dc <_malloc_r+0x88>
 800278a:	4629      	mov	r1, r5
 800278c:	4630      	mov	r0, r6
 800278e:	f7ff ffbf 	bl	8002710 <sbrk_aligned>
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	4604      	mov	r4, r0
 8002796:	d158      	bne.n	800284a <_malloc_r+0xf6>
 8002798:	f8d8 4000 	ldr.w	r4, [r8]
 800279c:	4627      	mov	r7, r4
 800279e:	2f00      	cmp	r7, #0
 80027a0:	d143      	bne.n	800282a <_malloc_r+0xd6>
 80027a2:	2c00      	cmp	r4, #0
 80027a4:	d04b      	beq.n	800283e <_malloc_r+0xea>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	4639      	mov	r1, r7
 80027aa:	4630      	mov	r0, r6
 80027ac:	eb04 0903 	add.w	r9, r4, r3
 80027b0:	f000 fc6c 	bl	800308c <_sbrk_r>
 80027b4:	4581      	cmp	r9, r0
 80027b6:	d142      	bne.n	800283e <_malloc_r+0xea>
 80027b8:	6821      	ldr	r1, [r4, #0]
 80027ba:	1a6d      	subs	r5, r5, r1
 80027bc:	4629      	mov	r1, r5
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff ffa6 	bl	8002710 <sbrk_aligned>
 80027c4:	3001      	adds	r0, #1
 80027c6:	d03a      	beq.n	800283e <_malloc_r+0xea>
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	442b      	add	r3, r5
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	f8d8 3000 	ldr.w	r3, [r8]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	bb62      	cbnz	r2, 8002830 <_malloc_r+0xdc>
 80027d6:	f8c8 7000 	str.w	r7, [r8]
 80027da:	e00f      	b.n	80027fc <_malloc_r+0xa8>
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	1b52      	subs	r2, r2, r5
 80027e0:	d420      	bmi.n	8002824 <_malloc_r+0xd0>
 80027e2:	2a0b      	cmp	r2, #11
 80027e4:	d917      	bls.n	8002816 <_malloc_r+0xc2>
 80027e6:	1961      	adds	r1, r4, r5
 80027e8:	42a3      	cmp	r3, r4
 80027ea:	6025      	str	r5, [r4, #0]
 80027ec:	bf18      	it	ne
 80027ee:	6059      	strne	r1, [r3, #4]
 80027f0:	6863      	ldr	r3, [r4, #4]
 80027f2:	bf08      	it	eq
 80027f4:	f8c8 1000 	streq.w	r1, [r8]
 80027f8:	5162      	str	r2, [r4, r5]
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	4630      	mov	r0, r6
 80027fe:	f000 f82f 	bl	8002860 <__malloc_unlock>
 8002802:	f104 000b 	add.w	r0, r4, #11
 8002806:	1d23      	adds	r3, r4, #4
 8002808:	f020 0007 	bic.w	r0, r0, #7
 800280c:	1ac2      	subs	r2, r0, r3
 800280e:	bf1c      	itt	ne
 8002810:	1a1b      	subne	r3, r3, r0
 8002812:	50a3      	strne	r3, [r4, r2]
 8002814:	e7af      	b.n	8002776 <_malloc_r+0x22>
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	42a3      	cmp	r3, r4
 800281a:	bf0c      	ite	eq
 800281c:	f8c8 2000 	streq.w	r2, [r8]
 8002820:	605a      	strne	r2, [r3, #4]
 8002822:	e7eb      	b.n	80027fc <_malloc_r+0xa8>
 8002824:	4623      	mov	r3, r4
 8002826:	6864      	ldr	r4, [r4, #4]
 8002828:	e7ae      	b.n	8002788 <_malloc_r+0x34>
 800282a:	463c      	mov	r4, r7
 800282c:	687f      	ldr	r7, [r7, #4]
 800282e:	e7b6      	b.n	800279e <_malloc_r+0x4a>
 8002830:	461a      	mov	r2, r3
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	42a3      	cmp	r3, r4
 8002836:	d1fb      	bne.n	8002830 <_malloc_r+0xdc>
 8002838:	2300      	movs	r3, #0
 800283a:	6053      	str	r3, [r2, #4]
 800283c:	e7de      	b.n	80027fc <_malloc_r+0xa8>
 800283e:	230c      	movs	r3, #12
 8002840:	6033      	str	r3, [r6, #0]
 8002842:	4630      	mov	r0, r6
 8002844:	f000 f80c 	bl	8002860 <__malloc_unlock>
 8002848:	e794      	b.n	8002774 <_malloc_r+0x20>
 800284a:	6005      	str	r5, [r0, #0]
 800284c:	e7d6      	b.n	80027fc <_malloc_r+0xa8>
 800284e:	bf00      	nop
 8002850:	200002f4 	.word	0x200002f4

08002854 <__malloc_lock>:
 8002854:	4801      	ldr	r0, [pc, #4]	@ (800285c <__malloc_lock+0x8>)
 8002856:	f7ff bf0e 	b.w	8002676 <__retarget_lock_acquire_recursive>
 800285a:	bf00      	nop
 800285c:	200002ec 	.word	0x200002ec

08002860 <__malloc_unlock>:
 8002860:	4801      	ldr	r0, [pc, #4]	@ (8002868 <__malloc_unlock+0x8>)
 8002862:	f7ff bf09 	b.w	8002678 <__retarget_lock_release_recursive>
 8002866:	bf00      	nop
 8002868:	200002ec 	.word	0x200002ec

0800286c <__sfputc_r>:
 800286c:	6893      	ldr	r3, [r2, #8]
 800286e:	3b01      	subs	r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	b410      	push	{r4}
 8002874:	6093      	str	r3, [r2, #8]
 8002876:	da08      	bge.n	800288a <__sfputc_r+0x1e>
 8002878:	6994      	ldr	r4, [r2, #24]
 800287a:	42a3      	cmp	r3, r4
 800287c:	db01      	blt.n	8002882 <__sfputc_r+0x16>
 800287e:	290a      	cmp	r1, #10
 8002880:	d103      	bne.n	800288a <__sfputc_r+0x1e>
 8002882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002886:	f000 bb6d 	b.w	8002f64 <__swbuf_r>
 800288a:	6813      	ldr	r3, [r2, #0]
 800288c:	1c58      	adds	r0, r3, #1
 800288e:	6010      	str	r0, [r2, #0]
 8002890:	7019      	strb	r1, [r3, #0]
 8002892:	4608      	mov	r0, r1
 8002894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002898:	4770      	bx	lr

0800289a <__sfputs_r>:
 800289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289c:	4606      	mov	r6, r0
 800289e:	460f      	mov	r7, r1
 80028a0:	4614      	mov	r4, r2
 80028a2:	18d5      	adds	r5, r2, r3
 80028a4:	42ac      	cmp	r4, r5
 80028a6:	d101      	bne.n	80028ac <__sfputs_r+0x12>
 80028a8:	2000      	movs	r0, #0
 80028aa:	e007      	b.n	80028bc <__sfputs_r+0x22>
 80028ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b0:	463a      	mov	r2, r7
 80028b2:	4630      	mov	r0, r6
 80028b4:	f7ff ffda 	bl	800286c <__sfputc_r>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d1f3      	bne.n	80028a4 <__sfputs_r+0xa>
 80028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028c0 <_vfiprintf_r>:
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	460d      	mov	r5, r1
 80028c6:	b09d      	sub	sp, #116	@ 0x74
 80028c8:	4614      	mov	r4, r2
 80028ca:	4698      	mov	r8, r3
 80028cc:	4606      	mov	r6, r0
 80028ce:	b118      	cbz	r0, 80028d8 <_vfiprintf_r+0x18>
 80028d0:	6a03      	ldr	r3, [r0, #32]
 80028d2:	b90b      	cbnz	r3, 80028d8 <_vfiprintf_r+0x18>
 80028d4:	f7ff fdca 	bl	800246c <__sinit>
 80028d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028da:	07d9      	lsls	r1, r3, #31
 80028dc:	d405      	bmi.n	80028ea <_vfiprintf_r+0x2a>
 80028de:	89ab      	ldrh	r3, [r5, #12]
 80028e0:	059a      	lsls	r2, r3, #22
 80028e2:	d402      	bmi.n	80028ea <_vfiprintf_r+0x2a>
 80028e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028e6:	f7ff fec6 	bl	8002676 <__retarget_lock_acquire_recursive>
 80028ea:	89ab      	ldrh	r3, [r5, #12]
 80028ec:	071b      	lsls	r3, r3, #28
 80028ee:	d501      	bpl.n	80028f4 <_vfiprintf_r+0x34>
 80028f0:	692b      	ldr	r3, [r5, #16]
 80028f2:	b99b      	cbnz	r3, 800291c <_vfiprintf_r+0x5c>
 80028f4:	4629      	mov	r1, r5
 80028f6:	4630      	mov	r0, r6
 80028f8:	f000 fb72 	bl	8002fe0 <__swsetup_r>
 80028fc:	b170      	cbz	r0, 800291c <_vfiprintf_r+0x5c>
 80028fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002900:	07dc      	lsls	r4, r3, #31
 8002902:	d504      	bpl.n	800290e <_vfiprintf_r+0x4e>
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	b01d      	add	sp, #116	@ 0x74
 800290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290e:	89ab      	ldrh	r3, [r5, #12]
 8002910:	0598      	lsls	r0, r3, #22
 8002912:	d4f7      	bmi.n	8002904 <_vfiprintf_r+0x44>
 8002914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002916:	f7ff feaf 	bl	8002678 <__retarget_lock_release_recursive>
 800291a:	e7f3      	b.n	8002904 <_vfiprintf_r+0x44>
 800291c:	2300      	movs	r3, #0
 800291e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002920:	2320      	movs	r3, #32
 8002922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002926:	f8cd 800c 	str.w	r8, [sp, #12]
 800292a:	2330      	movs	r3, #48	@ 0x30
 800292c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002adc <_vfiprintf_r+0x21c>
 8002930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002934:	f04f 0901 	mov.w	r9, #1
 8002938:	4623      	mov	r3, r4
 800293a:	469a      	mov	sl, r3
 800293c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002940:	b10a      	cbz	r2, 8002946 <_vfiprintf_r+0x86>
 8002942:	2a25      	cmp	r2, #37	@ 0x25
 8002944:	d1f9      	bne.n	800293a <_vfiprintf_r+0x7a>
 8002946:	ebba 0b04 	subs.w	fp, sl, r4
 800294a:	d00b      	beq.n	8002964 <_vfiprintf_r+0xa4>
 800294c:	465b      	mov	r3, fp
 800294e:	4622      	mov	r2, r4
 8002950:	4629      	mov	r1, r5
 8002952:	4630      	mov	r0, r6
 8002954:	f7ff ffa1 	bl	800289a <__sfputs_r>
 8002958:	3001      	adds	r0, #1
 800295a:	f000 80a7 	beq.w	8002aac <_vfiprintf_r+0x1ec>
 800295e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002960:	445a      	add	r2, fp
 8002962:	9209      	str	r2, [sp, #36]	@ 0x24
 8002964:	f89a 3000 	ldrb.w	r3, [sl]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 809f 	beq.w	8002aac <_vfiprintf_r+0x1ec>
 800296e:	2300      	movs	r3, #0
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002978:	f10a 0a01 	add.w	sl, sl, #1
 800297c:	9304      	str	r3, [sp, #16]
 800297e:	9307      	str	r3, [sp, #28]
 8002980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002984:	931a      	str	r3, [sp, #104]	@ 0x68
 8002986:	4654      	mov	r4, sl
 8002988:	2205      	movs	r2, #5
 800298a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800298e:	4853      	ldr	r0, [pc, #332]	@ (8002adc <_vfiprintf_r+0x21c>)
 8002990:	f7fd fc26 	bl	80001e0 <memchr>
 8002994:	9a04      	ldr	r2, [sp, #16]
 8002996:	b9d8      	cbnz	r0, 80029d0 <_vfiprintf_r+0x110>
 8002998:	06d1      	lsls	r1, r2, #27
 800299a:	bf44      	itt	mi
 800299c:	2320      	movmi	r3, #32
 800299e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029a2:	0713      	lsls	r3, r2, #28
 80029a4:	bf44      	itt	mi
 80029a6:	232b      	movmi	r3, #43	@ 0x2b
 80029a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029ac:	f89a 3000 	ldrb.w	r3, [sl]
 80029b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80029b2:	d015      	beq.n	80029e0 <_vfiprintf_r+0x120>
 80029b4:	9a07      	ldr	r2, [sp, #28]
 80029b6:	4654      	mov	r4, sl
 80029b8:	2000      	movs	r0, #0
 80029ba:	f04f 0c0a 	mov.w	ip, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c4:	3b30      	subs	r3, #48	@ 0x30
 80029c6:	2b09      	cmp	r3, #9
 80029c8:	d94b      	bls.n	8002a62 <_vfiprintf_r+0x1a2>
 80029ca:	b1b0      	cbz	r0, 80029fa <_vfiprintf_r+0x13a>
 80029cc:	9207      	str	r2, [sp, #28]
 80029ce:	e014      	b.n	80029fa <_vfiprintf_r+0x13a>
 80029d0:	eba0 0308 	sub.w	r3, r0, r8
 80029d4:	fa09 f303 	lsl.w	r3, r9, r3
 80029d8:	4313      	orrs	r3, r2
 80029da:	9304      	str	r3, [sp, #16]
 80029dc:	46a2      	mov	sl, r4
 80029de:	e7d2      	b.n	8002986 <_vfiprintf_r+0xc6>
 80029e0:	9b03      	ldr	r3, [sp, #12]
 80029e2:	1d19      	adds	r1, r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	9103      	str	r1, [sp, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfbb      	ittet	lt
 80029ec:	425b      	neglt	r3, r3
 80029ee:	f042 0202 	orrlt.w	r2, r2, #2
 80029f2:	9307      	strge	r3, [sp, #28]
 80029f4:	9307      	strlt	r3, [sp, #28]
 80029f6:	bfb8      	it	lt
 80029f8:	9204      	strlt	r2, [sp, #16]
 80029fa:	7823      	ldrb	r3, [r4, #0]
 80029fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80029fe:	d10a      	bne.n	8002a16 <_vfiprintf_r+0x156>
 8002a00:	7863      	ldrb	r3, [r4, #1]
 8002a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a04:	d132      	bne.n	8002a6c <_vfiprintf_r+0x1ac>
 8002a06:	9b03      	ldr	r3, [sp, #12]
 8002a08:	1d1a      	adds	r2, r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	9203      	str	r2, [sp, #12]
 8002a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a12:	3402      	adds	r4, #2
 8002a14:	9305      	str	r3, [sp, #20]
 8002a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002aec <_vfiprintf_r+0x22c>
 8002a1a:	7821      	ldrb	r1, [r4, #0]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	4650      	mov	r0, sl
 8002a20:	f7fd fbde 	bl	80001e0 <memchr>
 8002a24:	b138      	cbz	r0, 8002a36 <_vfiprintf_r+0x176>
 8002a26:	9b04      	ldr	r3, [sp, #16]
 8002a28:	eba0 000a 	sub.w	r0, r0, sl
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	4082      	lsls	r2, r0
 8002a30:	4313      	orrs	r3, r2
 8002a32:	3401      	adds	r4, #1
 8002a34:	9304      	str	r3, [sp, #16]
 8002a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a3a:	4829      	ldr	r0, [pc, #164]	@ (8002ae0 <_vfiprintf_r+0x220>)
 8002a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a40:	2206      	movs	r2, #6
 8002a42:	f7fd fbcd 	bl	80001e0 <memchr>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d03f      	beq.n	8002aca <_vfiprintf_r+0x20a>
 8002a4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ae4 <_vfiprintf_r+0x224>)
 8002a4c:	bb1b      	cbnz	r3, 8002a96 <_vfiprintf_r+0x1d6>
 8002a4e:	9b03      	ldr	r3, [sp, #12]
 8002a50:	3307      	adds	r3, #7
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	3308      	adds	r3, #8
 8002a58:	9303      	str	r3, [sp, #12]
 8002a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a5c:	443b      	add	r3, r7
 8002a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a60:	e76a      	b.n	8002938 <_vfiprintf_r+0x78>
 8002a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a66:	460c      	mov	r4, r1
 8002a68:	2001      	movs	r0, #1
 8002a6a:	e7a8      	b.n	80029be <_vfiprintf_r+0xfe>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	3401      	adds	r4, #1
 8002a70:	9305      	str	r3, [sp, #20]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0c0a 	mov.w	ip, #10
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a7e:	3a30      	subs	r2, #48	@ 0x30
 8002a80:	2a09      	cmp	r2, #9
 8002a82:	d903      	bls.n	8002a8c <_vfiprintf_r+0x1cc>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0c6      	beq.n	8002a16 <_vfiprintf_r+0x156>
 8002a88:	9105      	str	r1, [sp, #20]
 8002a8a:	e7c4      	b.n	8002a16 <_vfiprintf_r+0x156>
 8002a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a90:	4604      	mov	r4, r0
 8002a92:	2301      	movs	r3, #1
 8002a94:	e7f0      	b.n	8002a78 <_vfiprintf_r+0x1b8>
 8002a96:	ab03      	add	r3, sp, #12
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	462a      	mov	r2, r5
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <_vfiprintf_r+0x228>)
 8002a9e:	a904      	add	r1, sp, #16
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f3af 8000 	nop.w
 8002aa6:	4607      	mov	r7, r0
 8002aa8:	1c78      	adds	r0, r7, #1
 8002aaa:	d1d6      	bne.n	8002a5a <_vfiprintf_r+0x19a>
 8002aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002aae:	07d9      	lsls	r1, r3, #31
 8002ab0:	d405      	bmi.n	8002abe <_vfiprintf_r+0x1fe>
 8002ab2:	89ab      	ldrh	r3, [r5, #12]
 8002ab4:	059a      	lsls	r2, r3, #22
 8002ab6:	d402      	bmi.n	8002abe <_vfiprintf_r+0x1fe>
 8002ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002aba:	f7ff fddd 	bl	8002678 <__retarget_lock_release_recursive>
 8002abe:	89ab      	ldrh	r3, [r5, #12]
 8002ac0:	065b      	lsls	r3, r3, #25
 8002ac2:	f53f af1f 	bmi.w	8002904 <_vfiprintf_r+0x44>
 8002ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ac8:	e71e      	b.n	8002908 <_vfiprintf_r+0x48>
 8002aca:	ab03      	add	r3, sp, #12
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	462a      	mov	r2, r5
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <_vfiprintf_r+0x228>)
 8002ad2:	a904      	add	r1, sp, #16
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f000 f879 	bl	8002bcc <_printf_i>
 8002ada:	e7e4      	b.n	8002aa6 <_vfiprintf_r+0x1e6>
 8002adc:	08003288 	.word	0x08003288
 8002ae0:	08003292 	.word	0x08003292
 8002ae4:	00000000 	.word	0x00000000
 8002ae8:	0800289b 	.word	0x0800289b
 8002aec:	0800328e 	.word	0x0800328e

08002af0 <_printf_common>:
 8002af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002af4:	4616      	mov	r6, r2
 8002af6:	4698      	mov	r8, r3
 8002af8:	688a      	ldr	r2, [r1, #8]
 8002afa:	690b      	ldr	r3, [r1, #16]
 8002afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bfb8      	it	lt
 8002b04:	4613      	movlt	r3, r2
 8002b06:	6033      	str	r3, [r6, #0]
 8002b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b0c:	4607      	mov	r7, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	b10a      	cbz	r2, 8002b16 <_printf_common+0x26>
 8002b12:	3301      	adds	r3, #1
 8002b14:	6033      	str	r3, [r6, #0]
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	0699      	lsls	r1, r3, #26
 8002b1a:	bf42      	ittt	mi
 8002b1c:	6833      	ldrmi	r3, [r6, #0]
 8002b1e:	3302      	addmi	r3, #2
 8002b20:	6033      	strmi	r3, [r6, #0]
 8002b22:	6825      	ldr	r5, [r4, #0]
 8002b24:	f015 0506 	ands.w	r5, r5, #6
 8002b28:	d106      	bne.n	8002b38 <_printf_common+0x48>
 8002b2a:	f104 0a19 	add.w	sl, r4, #25
 8002b2e:	68e3      	ldr	r3, [r4, #12]
 8002b30:	6832      	ldr	r2, [r6, #0]
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	42ab      	cmp	r3, r5
 8002b36:	dc26      	bgt.n	8002b86 <_printf_common+0x96>
 8002b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	3b00      	subs	r3, #0
 8002b40:	bf18      	it	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	0692      	lsls	r2, r2, #26
 8002b46:	d42b      	bmi.n	8002ba0 <_printf_common+0xb0>
 8002b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	4638      	mov	r0, r7
 8002b50:	47c8      	blx	r9
 8002b52:	3001      	adds	r0, #1
 8002b54:	d01e      	beq.n	8002b94 <_printf_common+0xa4>
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	6922      	ldr	r2, [r4, #16]
 8002b5a:	f003 0306 	and.w	r3, r3, #6
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf02      	ittt	eq
 8002b62:	68e5      	ldreq	r5, [r4, #12]
 8002b64:	6833      	ldreq	r3, [r6, #0]
 8002b66:	1aed      	subeq	r5, r5, r3
 8002b68:	68a3      	ldr	r3, [r4, #8]
 8002b6a:	bf0c      	ite	eq
 8002b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b70:	2500      	movne	r5, #0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bfc4      	itt	gt
 8002b76:	1a9b      	subgt	r3, r3, r2
 8002b78:	18ed      	addgt	r5, r5, r3
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	341a      	adds	r4, #26
 8002b7e:	42b5      	cmp	r5, r6
 8002b80:	d11a      	bne.n	8002bb8 <_printf_common+0xc8>
 8002b82:	2000      	movs	r0, #0
 8002b84:	e008      	b.n	8002b98 <_printf_common+0xa8>
 8002b86:	2301      	movs	r3, #1
 8002b88:	4652      	mov	r2, sl
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	4638      	mov	r0, r7
 8002b8e:	47c8      	blx	r9
 8002b90:	3001      	adds	r0, #1
 8002b92:	d103      	bne.n	8002b9c <_printf_common+0xac>
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b9c:	3501      	adds	r5, #1
 8002b9e:	e7c6      	b.n	8002b2e <_printf_common+0x3e>
 8002ba0:	18e1      	adds	r1, r4, r3
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	2030      	movs	r0, #48	@ 0x30
 8002ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002baa:	4422      	add	r2, r4
 8002bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	e7c7      	b.n	8002b48 <_printf_common+0x58>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4622      	mov	r2, r4
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	47c8      	blx	r9
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d0e6      	beq.n	8002b94 <_printf_common+0xa4>
 8002bc6:	3601      	adds	r6, #1
 8002bc8:	e7d9      	b.n	8002b7e <_printf_common+0x8e>
	...

08002bcc <_printf_i>:
 8002bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd0:	7e0f      	ldrb	r7, [r1, #24]
 8002bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002bd4:	2f78      	cmp	r7, #120	@ 0x78
 8002bd6:	4691      	mov	r9, r2
 8002bd8:	4680      	mov	r8, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	469a      	mov	sl, r3
 8002bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002be2:	d807      	bhi.n	8002bf4 <_printf_i+0x28>
 8002be4:	2f62      	cmp	r7, #98	@ 0x62
 8002be6:	d80a      	bhi.n	8002bfe <_printf_i+0x32>
 8002be8:	2f00      	cmp	r7, #0
 8002bea:	f000 80d2 	beq.w	8002d92 <_printf_i+0x1c6>
 8002bee:	2f58      	cmp	r7, #88	@ 0x58
 8002bf0:	f000 80b9 	beq.w	8002d66 <_printf_i+0x19a>
 8002bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bfc:	e03a      	b.n	8002c74 <_printf_i+0xa8>
 8002bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c02:	2b15      	cmp	r3, #21
 8002c04:	d8f6      	bhi.n	8002bf4 <_printf_i+0x28>
 8002c06:	a101      	add	r1, pc, #4	@ (adr r1, 8002c0c <_printf_i+0x40>)
 8002c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c0c:	08002c65 	.word	0x08002c65
 8002c10:	08002c79 	.word	0x08002c79
 8002c14:	08002bf5 	.word	0x08002bf5
 8002c18:	08002bf5 	.word	0x08002bf5
 8002c1c:	08002bf5 	.word	0x08002bf5
 8002c20:	08002bf5 	.word	0x08002bf5
 8002c24:	08002c79 	.word	0x08002c79
 8002c28:	08002bf5 	.word	0x08002bf5
 8002c2c:	08002bf5 	.word	0x08002bf5
 8002c30:	08002bf5 	.word	0x08002bf5
 8002c34:	08002bf5 	.word	0x08002bf5
 8002c38:	08002d79 	.word	0x08002d79
 8002c3c:	08002ca3 	.word	0x08002ca3
 8002c40:	08002d33 	.word	0x08002d33
 8002c44:	08002bf5 	.word	0x08002bf5
 8002c48:	08002bf5 	.word	0x08002bf5
 8002c4c:	08002d9b 	.word	0x08002d9b
 8002c50:	08002bf5 	.word	0x08002bf5
 8002c54:	08002ca3 	.word	0x08002ca3
 8002c58:	08002bf5 	.word	0x08002bf5
 8002c5c:	08002bf5 	.word	0x08002bf5
 8002c60:	08002d3b 	.word	0x08002d3b
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	1d1a      	adds	r2, r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6032      	str	r2, [r6, #0]
 8002c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c74:	2301      	movs	r3, #1
 8002c76:	e09d      	b.n	8002db4 <_printf_i+0x1e8>
 8002c78:	6833      	ldr	r3, [r6, #0]
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	1d19      	adds	r1, r3, #4
 8002c7e:	6031      	str	r1, [r6, #0]
 8002c80:	0606      	lsls	r6, r0, #24
 8002c82:	d501      	bpl.n	8002c88 <_printf_i+0xbc>
 8002c84:	681d      	ldr	r5, [r3, #0]
 8002c86:	e003      	b.n	8002c90 <_printf_i+0xc4>
 8002c88:	0645      	lsls	r5, r0, #25
 8002c8a:	d5fb      	bpl.n	8002c84 <_printf_i+0xb8>
 8002c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	da03      	bge.n	8002c9c <_printf_i+0xd0>
 8002c94:	232d      	movs	r3, #45	@ 0x2d
 8002c96:	426d      	negs	r5, r5
 8002c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c9c:	4859      	ldr	r0, [pc, #356]	@ (8002e04 <_printf_i+0x238>)
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e011      	b.n	8002cc6 <_printf_i+0xfa>
 8002ca2:	6821      	ldr	r1, [r4, #0]
 8002ca4:	6833      	ldr	r3, [r6, #0]
 8002ca6:	0608      	lsls	r0, r1, #24
 8002ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002cac:	d402      	bmi.n	8002cb4 <_printf_i+0xe8>
 8002cae:	0649      	lsls	r1, r1, #25
 8002cb0:	bf48      	it	mi
 8002cb2:	b2ad      	uxthmi	r5, r5
 8002cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002cb6:	4853      	ldr	r0, [pc, #332]	@ (8002e04 <_printf_i+0x238>)
 8002cb8:	6033      	str	r3, [r6, #0]
 8002cba:	bf14      	ite	ne
 8002cbc:	230a      	movne	r3, #10
 8002cbe:	2308      	moveq	r3, #8
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cc6:	6866      	ldr	r6, [r4, #4]
 8002cc8:	60a6      	str	r6, [r4, #8]
 8002cca:	2e00      	cmp	r6, #0
 8002ccc:	bfa2      	ittt	ge
 8002cce:	6821      	ldrge	r1, [r4, #0]
 8002cd0:	f021 0104 	bicge.w	r1, r1, #4
 8002cd4:	6021      	strge	r1, [r4, #0]
 8002cd6:	b90d      	cbnz	r5, 8002cdc <_printf_i+0x110>
 8002cd8:	2e00      	cmp	r6, #0
 8002cda:	d04b      	beq.n	8002d74 <_printf_i+0x1a8>
 8002cdc:	4616      	mov	r6, r2
 8002cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8002ce6:	5dc7      	ldrb	r7, [r0, r7]
 8002ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cec:	462f      	mov	r7, r5
 8002cee:	42bb      	cmp	r3, r7
 8002cf0:	460d      	mov	r5, r1
 8002cf2:	d9f4      	bls.n	8002cde <_printf_i+0x112>
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d10b      	bne.n	8002d10 <_printf_i+0x144>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	07df      	lsls	r7, r3, #31
 8002cfc:	d508      	bpl.n	8002d10 <_printf_i+0x144>
 8002cfe:	6923      	ldr	r3, [r4, #16]
 8002d00:	6861      	ldr	r1, [r4, #4]
 8002d02:	4299      	cmp	r1, r3
 8002d04:	bfde      	ittt	le
 8002d06:	2330      	movle	r3, #48	@ 0x30
 8002d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d10:	1b92      	subs	r2, r2, r6
 8002d12:	6122      	str	r2, [r4, #16]
 8002d14:	f8cd a000 	str.w	sl, [sp]
 8002d18:	464b      	mov	r3, r9
 8002d1a:	aa03      	add	r2, sp, #12
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4640      	mov	r0, r8
 8002d20:	f7ff fee6 	bl	8002af0 <_printf_common>
 8002d24:	3001      	adds	r0, #1
 8002d26:	d14a      	bne.n	8002dbe <_printf_i+0x1f2>
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	b004      	add	sp, #16
 8002d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	4833      	ldr	r0, [pc, #204]	@ (8002e08 <_printf_i+0x23c>)
 8002d3c:	2778      	movs	r7, #120	@ 0x78
 8002d3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	6831      	ldr	r1, [r6, #0]
 8002d46:	061f      	lsls	r7, r3, #24
 8002d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d4c:	d402      	bmi.n	8002d54 <_printf_i+0x188>
 8002d4e:	065f      	lsls	r7, r3, #25
 8002d50:	bf48      	it	mi
 8002d52:	b2ad      	uxthmi	r5, r5
 8002d54:	6031      	str	r1, [r6, #0]
 8002d56:	07d9      	lsls	r1, r3, #31
 8002d58:	bf44      	itt	mi
 8002d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002d5e:	6023      	strmi	r3, [r4, #0]
 8002d60:	b11d      	cbz	r5, 8002d6a <_printf_i+0x19e>
 8002d62:	2310      	movs	r3, #16
 8002d64:	e7ac      	b.n	8002cc0 <_printf_i+0xf4>
 8002d66:	4827      	ldr	r0, [pc, #156]	@ (8002e04 <_printf_i+0x238>)
 8002d68:	e7e9      	b.n	8002d3e <_printf_i+0x172>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f023 0320 	bic.w	r3, r3, #32
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	e7f6      	b.n	8002d62 <_printf_i+0x196>
 8002d74:	4616      	mov	r6, r2
 8002d76:	e7bd      	b.n	8002cf4 <_printf_i+0x128>
 8002d78:	6833      	ldr	r3, [r6, #0]
 8002d7a:	6825      	ldr	r5, [r4, #0]
 8002d7c:	6961      	ldr	r1, [r4, #20]
 8002d7e:	1d18      	adds	r0, r3, #4
 8002d80:	6030      	str	r0, [r6, #0]
 8002d82:	062e      	lsls	r6, r5, #24
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	d501      	bpl.n	8002d8c <_printf_i+0x1c0>
 8002d88:	6019      	str	r1, [r3, #0]
 8002d8a:	e002      	b.n	8002d92 <_printf_i+0x1c6>
 8002d8c:	0668      	lsls	r0, r5, #25
 8002d8e:	d5fb      	bpl.n	8002d88 <_printf_i+0x1bc>
 8002d90:	8019      	strh	r1, [r3, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	6123      	str	r3, [r4, #16]
 8002d96:	4616      	mov	r6, r2
 8002d98:	e7bc      	b.n	8002d14 <_printf_i+0x148>
 8002d9a:	6833      	ldr	r3, [r6, #0]
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	6032      	str	r2, [r6, #0]
 8002da0:	681e      	ldr	r6, [r3, #0]
 8002da2:	6862      	ldr	r2, [r4, #4]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4630      	mov	r0, r6
 8002da8:	f7fd fa1a 	bl	80001e0 <memchr>
 8002dac:	b108      	cbz	r0, 8002db2 <_printf_i+0x1e6>
 8002dae:	1b80      	subs	r0, r0, r6
 8002db0:	6060      	str	r0, [r4, #4]
 8002db2:	6863      	ldr	r3, [r4, #4]
 8002db4:	6123      	str	r3, [r4, #16]
 8002db6:	2300      	movs	r3, #0
 8002db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dbc:	e7aa      	b.n	8002d14 <_printf_i+0x148>
 8002dbe:	6923      	ldr	r3, [r4, #16]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	4640      	mov	r0, r8
 8002dc6:	47d0      	blx	sl
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d0ad      	beq.n	8002d28 <_printf_i+0x15c>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	079b      	lsls	r3, r3, #30
 8002dd0:	d413      	bmi.n	8002dfa <_printf_i+0x22e>
 8002dd2:	68e0      	ldr	r0, [r4, #12]
 8002dd4:	9b03      	ldr	r3, [sp, #12]
 8002dd6:	4298      	cmp	r0, r3
 8002dd8:	bfb8      	it	lt
 8002dda:	4618      	movlt	r0, r3
 8002ddc:	e7a6      	b.n	8002d2c <_printf_i+0x160>
 8002dde:	2301      	movs	r3, #1
 8002de0:	4632      	mov	r2, r6
 8002de2:	4649      	mov	r1, r9
 8002de4:	4640      	mov	r0, r8
 8002de6:	47d0      	blx	sl
 8002de8:	3001      	adds	r0, #1
 8002dea:	d09d      	beq.n	8002d28 <_printf_i+0x15c>
 8002dec:	3501      	adds	r5, #1
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	9903      	ldr	r1, [sp, #12]
 8002df2:	1a5b      	subs	r3, r3, r1
 8002df4:	42ab      	cmp	r3, r5
 8002df6:	dcf2      	bgt.n	8002dde <_printf_i+0x212>
 8002df8:	e7eb      	b.n	8002dd2 <_printf_i+0x206>
 8002dfa:	2500      	movs	r5, #0
 8002dfc:	f104 0619 	add.w	r6, r4, #25
 8002e00:	e7f5      	b.n	8002dee <_printf_i+0x222>
 8002e02:	bf00      	nop
 8002e04:	08003299 	.word	0x08003299
 8002e08:	080032aa 	.word	0x080032aa

08002e0c <__sflush_r>:
 8002e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e14:	0716      	lsls	r6, r2, #28
 8002e16:	4605      	mov	r5, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	d454      	bmi.n	8002ec6 <__sflush_r+0xba>
 8002e1c:	684b      	ldr	r3, [r1, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	dc02      	bgt.n	8002e28 <__sflush_r+0x1c>
 8002e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	dd48      	ble.n	8002eba <__sflush_r+0xae>
 8002e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	d045      	beq.n	8002eba <__sflush_r+0xae>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e34:	682f      	ldr	r7, [r5, #0]
 8002e36:	6a21      	ldr	r1, [r4, #32]
 8002e38:	602b      	str	r3, [r5, #0]
 8002e3a:	d030      	beq.n	8002e9e <__sflush_r+0x92>
 8002e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	0759      	lsls	r1, r3, #29
 8002e42:	d505      	bpl.n	8002e50 <__sflush_r+0x44>
 8002e44:	6863      	ldr	r3, [r4, #4]
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e4a:	b10b      	cbz	r3, 8002e50 <__sflush_r+0x44>
 8002e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	2300      	movs	r3, #0
 8002e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e54:	6a21      	ldr	r1, [r4, #32]
 8002e56:	4628      	mov	r0, r5
 8002e58:	47b0      	blx	r6
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	d106      	bne.n	8002e6e <__sflush_r+0x62>
 8002e60:	6829      	ldr	r1, [r5, #0]
 8002e62:	291d      	cmp	r1, #29
 8002e64:	d82b      	bhi.n	8002ebe <__sflush_r+0xb2>
 8002e66:	4a2a      	ldr	r2, [pc, #168]	@ (8002f10 <__sflush_r+0x104>)
 8002e68:	410a      	asrs	r2, r1
 8002e6a:	07d6      	lsls	r6, r2, #31
 8002e6c:	d427      	bmi.n	8002ebe <__sflush_r+0xb2>
 8002e6e:	2200      	movs	r2, #0
 8002e70:	6062      	str	r2, [r4, #4]
 8002e72:	04d9      	lsls	r1, r3, #19
 8002e74:	6922      	ldr	r2, [r4, #16]
 8002e76:	6022      	str	r2, [r4, #0]
 8002e78:	d504      	bpl.n	8002e84 <__sflush_r+0x78>
 8002e7a:	1c42      	adds	r2, r0, #1
 8002e7c:	d101      	bne.n	8002e82 <__sflush_r+0x76>
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	b903      	cbnz	r3, 8002e84 <__sflush_r+0x78>
 8002e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e86:	602f      	str	r7, [r5, #0]
 8002e88:	b1b9      	cbz	r1, 8002eba <__sflush_r+0xae>
 8002e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e8e:	4299      	cmp	r1, r3
 8002e90:	d002      	beq.n	8002e98 <__sflush_r+0x8c>
 8002e92:	4628      	mov	r0, r5
 8002e94:	f7ff fbf2 	bl	800267c <_free_r>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e9c:	e00d      	b.n	8002eba <__sflush_r+0xae>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	47b0      	blx	r6
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	1c50      	adds	r0, r2, #1
 8002ea8:	d1c9      	bne.n	8002e3e <__sflush_r+0x32>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0c6      	beq.n	8002e3e <__sflush_r+0x32>
 8002eb0:	2b1d      	cmp	r3, #29
 8002eb2:	d001      	beq.n	8002eb8 <__sflush_r+0xac>
 8002eb4:	2b16      	cmp	r3, #22
 8002eb6:	d11e      	bne.n	8002ef6 <__sflush_r+0xea>
 8002eb8:	602f      	str	r7, [r5, #0]
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e022      	b.n	8002f04 <__sflush_r+0xf8>
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	e01b      	b.n	8002efe <__sflush_r+0xf2>
 8002ec6:	690f      	ldr	r7, [r1, #16]
 8002ec8:	2f00      	cmp	r7, #0
 8002eca:	d0f6      	beq.n	8002eba <__sflush_r+0xae>
 8002ecc:	0793      	lsls	r3, r2, #30
 8002ece:	680e      	ldr	r6, [r1, #0]
 8002ed0:	bf08      	it	eq
 8002ed2:	694b      	ldreq	r3, [r1, #20]
 8002ed4:	600f      	str	r7, [r1, #0]
 8002ed6:	bf18      	it	ne
 8002ed8:	2300      	movne	r3, #0
 8002eda:	eba6 0807 	sub.w	r8, r6, r7
 8002ede:	608b      	str	r3, [r1, #8]
 8002ee0:	f1b8 0f00 	cmp.w	r8, #0
 8002ee4:	dde9      	ble.n	8002eba <__sflush_r+0xae>
 8002ee6:	6a21      	ldr	r1, [r4, #32]
 8002ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002eea:	4643      	mov	r3, r8
 8002eec:	463a      	mov	r2, r7
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b0      	blx	r6
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	dc08      	bgt.n	8002f08 <__sflush_r+0xfc>
 8002ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002efe:	81a3      	strh	r3, [r4, #12]
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f08:	4407      	add	r7, r0
 8002f0a:	eba8 0800 	sub.w	r8, r8, r0
 8002f0e:	e7e7      	b.n	8002ee0 <__sflush_r+0xd4>
 8002f10:	dfbffffe 	.word	0xdfbffffe

08002f14 <_fflush_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	4605      	mov	r5, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	b913      	cbnz	r3, 8002f24 <_fflush_r+0x10>
 8002f1e:	2500      	movs	r5, #0
 8002f20:	4628      	mov	r0, r5
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	b118      	cbz	r0, 8002f2e <_fflush_r+0x1a>
 8002f26:	6a03      	ldr	r3, [r0, #32]
 8002f28:	b90b      	cbnz	r3, 8002f2e <_fflush_r+0x1a>
 8002f2a:	f7ff fa9f 	bl	800246c <__sinit>
 8002f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f3      	beq.n	8002f1e <_fflush_r+0xa>
 8002f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f38:	07d0      	lsls	r0, r2, #31
 8002f3a:	d404      	bmi.n	8002f46 <_fflush_r+0x32>
 8002f3c:	0599      	lsls	r1, r3, #22
 8002f3e:	d402      	bmi.n	8002f46 <_fflush_r+0x32>
 8002f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f42:	f7ff fb98 	bl	8002676 <__retarget_lock_acquire_recursive>
 8002f46:	4628      	mov	r0, r5
 8002f48:	4621      	mov	r1, r4
 8002f4a:	f7ff ff5f 	bl	8002e0c <__sflush_r>
 8002f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f50:	07da      	lsls	r2, r3, #31
 8002f52:	4605      	mov	r5, r0
 8002f54:	d4e4      	bmi.n	8002f20 <_fflush_r+0xc>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	059b      	lsls	r3, r3, #22
 8002f5a:	d4e1      	bmi.n	8002f20 <_fflush_r+0xc>
 8002f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f5e:	f7ff fb8b 	bl	8002678 <__retarget_lock_release_recursive>
 8002f62:	e7dd      	b.n	8002f20 <_fflush_r+0xc>

08002f64 <__swbuf_r>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	460e      	mov	r6, r1
 8002f68:	4614      	mov	r4, r2
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	b118      	cbz	r0, 8002f76 <__swbuf_r+0x12>
 8002f6e:	6a03      	ldr	r3, [r0, #32]
 8002f70:	b90b      	cbnz	r3, 8002f76 <__swbuf_r+0x12>
 8002f72:	f7ff fa7b 	bl	800246c <__sinit>
 8002f76:	69a3      	ldr	r3, [r4, #24]
 8002f78:	60a3      	str	r3, [r4, #8]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	071a      	lsls	r2, r3, #28
 8002f7e:	d501      	bpl.n	8002f84 <__swbuf_r+0x20>
 8002f80:	6923      	ldr	r3, [r4, #16]
 8002f82:	b943      	cbnz	r3, 8002f96 <__swbuf_r+0x32>
 8002f84:	4621      	mov	r1, r4
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 f82a 	bl	8002fe0 <__swsetup_r>
 8002f8c:	b118      	cbz	r0, 8002f96 <__swbuf_r+0x32>
 8002f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f92:	4638      	mov	r0, r7
 8002f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	6922      	ldr	r2, [r4, #16]
 8002f9a:	1a98      	subs	r0, r3, r2
 8002f9c:	6963      	ldr	r3, [r4, #20]
 8002f9e:	b2f6      	uxtb	r6, r6
 8002fa0:	4283      	cmp	r3, r0
 8002fa2:	4637      	mov	r7, r6
 8002fa4:	dc05      	bgt.n	8002fb2 <__swbuf_r+0x4e>
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7ff ffb3 	bl	8002f14 <_fflush_r>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d1ed      	bne.n	8002f8e <__swbuf_r+0x2a>
 8002fb2:	68a3      	ldr	r3, [r4, #8]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60a3      	str	r3, [r4, #8]
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	6022      	str	r2, [r4, #0]
 8002fbe:	701e      	strb	r6, [r3, #0]
 8002fc0:	6962      	ldr	r2, [r4, #20]
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d004      	beq.n	8002fd2 <__swbuf_r+0x6e>
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	07db      	lsls	r3, r3, #31
 8002fcc:	d5e1      	bpl.n	8002f92 <__swbuf_r+0x2e>
 8002fce:	2e0a      	cmp	r6, #10
 8002fd0:	d1df      	bne.n	8002f92 <__swbuf_r+0x2e>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f7ff ff9d 	bl	8002f14 <_fflush_r>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0d9      	beq.n	8002f92 <__swbuf_r+0x2e>
 8002fde:	e7d6      	b.n	8002f8e <__swbuf_r+0x2a>

08002fe0 <__swsetup_r>:
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <__swsetup_r+0xa8>)
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	460c      	mov	r4, r1
 8002fea:	b118      	cbz	r0, 8002ff4 <__swsetup_r+0x14>
 8002fec:	6a03      	ldr	r3, [r0, #32]
 8002fee:	b90b      	cbnz	r3, 8002ff4 <__swsetup_r+0x14>
 8002ff0:	f7ff fa3c 	bl	800246c <__sinit>
 8002ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff8:	0719      	lsls	r1, r3, #28
 8002ffa:	d422      	bmi.n	8003042 <__swsetup_r+0x62>
 8002ffc:	06da      	lsls	r2, r3, #27
 8002ffe:	d407      	bmi.n	8003010 <__swsetup_r+0x30>
 8003000:	2209      	movs	r2, #9
 8003002:	602a      	str	r2, [r5, #0]
 8003004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	f04f 30ff 	mov.w	r0, #4294967295
 800300e:	e033      	b.n	8003078 <__swsetup_r+0x98>
 8003010:	0758      	lsls	r0, r3, #29
 8003012:	d512      	bpl.n	800303a <__swsetup_r+0x5a>
 8003014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003016:	b141      	cbz	r1, 800302a <__swsetup_r+0x4a>
 8003018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800301c:	4299      	cmp	r1, r3
 800301e:	d002      	beq.n	8003026 <__swsetup_r+0x46>
 8003020:	4628      	mov	r0, r5
 8003022:	f7ff fb2b 	bl	800267c <_free_r>
 8003026:	2300      	movs	r3, #0
 8003028:	6363      	str	r3, [r4, #52]	@ 0x34
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	2300      	movs	r3, #0
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	b94b      	cbnz	r3, 800305a <__swsetup_r+0x7a>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800304c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003050:	d003      	beq.n	800305a <__swsetup_r+0x7a>
 8003052:	4621      	mov	r1, r4
 8003054:	4628      	mov	r0, r5
 8003056:	f000 f84f 	bl	80030f8 <__smakebuf_r>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	f013 0201 	ands.w	r2, r3, #1
 8003062:	d00a      	beq.n	800307a <__swsetup_r+0x9a>
 8003064:	2200      	movs	r2, #0
 8003066:	60a2      	str	r2, [r4, #8]
 8003068:	6962      	ldr	r2, [r4, #20]
 800306a:	4252      	negs	r2, r2
 800306c:	61a2      	str	r2, [r4, #24]
 800306e:	6922      	ldr	r2, [r4, #16]
 8003070:	b942      	cbnz	r2, 8003084 <__swsetup_r+0xa4>
 8003072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003076:	d1c5      	bne.n	8003004 <__swsetup_r+0x24>
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	0799      	lsls	r1, r3, #30
 800307c:	bf58      	it	pl
 800307e:	6962      	ldrpl	r2, [r4, #20]
 8003080:	60a2      	str	r2, [r4, #8]
 8003082:	e7f4      	b.n	800306e <__swsetup_r+0x8e>
 8003084:	2000      	movs	r0, #0
 8003086:	e7f7      	b.n	8003078 <__swsetup_r+0x98>
 8003088:	20000018 	.word	0x20000018

0800308c <_sbrk_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d06      	ldr	r5, [pc, #24]	@ (80030a8 <_sbrk_r+0x1c>)
 8003090:	2300      	movs	r3, #0
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7ff f88a 	bl	80021b0 <_sbrk>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_sbrk_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_sbrk_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200002e8 	.word	0x200002e8

080030ac <__swhatbuf_r>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	460c      	mov	r4, r1
 80030b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b4:	2900      	cmp	r1, #0
 80030b6:	b096      	sub	sp, #88	@ 0x58
 80030b8:	4615      	mov	r5, r2
 80030ba:	461e      	mov	r6, r3
 80030bc:	da0d      	bge.n	80030da <__swhatbuf_r+0x2e>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2340      	movne	r3, #64	@ 0x40
 80030cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030d0:	2000      	movs	r0, #0
 80030d2:	6031      	str	r1, [r6, #0]
 80030d4:	602b      	str	r3, [r5, #0]
 80030d6:	b016      	add	sp, #88	@ 0x58
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	466a      	mov	r2, sp
 80030dc:	f000 f848 	bl	8003170 <_fstat_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	dbec      	blt.n	80030be <__swhatbuf_r+0x12>
 80030e4:	9901      	ldr	r1, [sp, #4]
 80030e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030ee:	4259      	negs	r1, r3
 80030f0:	4159      	adcs	r1, r3
 80030f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030f6:	e7eb      	b.n	80030d0 <__swhatbuf_r+0x24>

080030f8 <__smakebuf_r>:
 80030f8:	898b      	ldrh	r3, [r1, #12]
 80030fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030fc:	079d      	lsls	r5, r3, #30
 80030fe:	4606      	mov	r6, r0
 8003100:	460c      	mov	r4, r1
 8003102:	d507      	bpl.n	8003114 <__smakebuf_r+0x1c>
 8003104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	2301      	movs	r3, #1
 800310e:	6163      	str	r3, [r4, #20]
 8003110:	b003      	add	sp, #12
 8003112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003114:	ab01      	add	r3, sp, #4
 8003116:	466a      	mov	r2, sp
 8003118:	f7ff ffc8 	bl	80030ac <__swhatbuf_r>
 800311c:	9f00      	ldr	r7, [sp, #0]
 800311e:	4605      	mov	r5, r0
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	f7ff fb16 	bl	8002754 <_malloc_r>
 8003128:	b948      	cbnz	r0, 800313e <__smakebuf_r+0x46>
 800312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800312e:	059a      	lsls	r2, r3, #22
 8003130:	d4ee      	bmi.n	8003110 <__smakebuf_r+0x18>
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	e7e2      	b.n	8003104 <__smakebuf_r+0xc>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	6020      	str	r0, [r4, #0]
 8003142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	9b01      	ldr	r3, [sp, #4]
 800314a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800314e:	b15b      	cbz	r3, 8003168 <__smakebuf_r+0x70>
 8003150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003154:	4630      	mov	r0, r6
 8003156:	f000 f81d 	bl	8003194 <_isatty_r>
 800315a:	b128      	cbz	r0, 8003168 <__smakebuf_r+0x70>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	81a3      	strh	r3, [r4, #12]
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	431d      	orrs	r5, r3
 800316c:	81a5      	strh	r5, [r4, #12]
 800316e:	e7cf      	b.n	8003110 <__smakebuf_r+0x18>

08003170 <_fstat_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	@ (8003190 <_fstat_r+0x20>)
 8003174:	2300      	movs	r3, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	602b      	str	r3, [r5, #0]
 800317e:	f7fe ffee 	bl	800215e <_fstat>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d102      	bne.n	800318c <_fstat_r+0x1c>
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	b103      	cbz	r3, 800318c <_fstat_r+0x1c>
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	bd38      	pop	{r3, r4, r5, pc}
 800318e:	bf00      	nop
 8003190:	200002e8 	.word	0x200002e8

08003194 <_isatty_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4d06      	ldr	r5, [pc, #24]	@ (80031b0 <_isatty_r+0x1c>)
 8003198:	2300      	movs	r3, #0
 800319a:	4604      	mov	r4, r0
 800319c:	4608      	mov	r0, r1
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	f7fe ffed 	bl	800217e <_isatty>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_isatty_r+0x1a>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_isatty_r+0x1a>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	200002e8 	.word	0x200002e8

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
