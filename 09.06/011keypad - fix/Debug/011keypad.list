
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fd8  08000fd8  00001fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001018  08001018  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001018  08001018  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001018  08001018  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001018  08001018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800101c  0800101c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001020  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800107c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800107c  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000996  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000346  00000000  00000000  00003a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00003d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cd0  00000000  00000000  00003f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001599  00000000  00000000  00006c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000980e  00000000  00000000  000081b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000119c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009fc  00000000  00000000  00011a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00012404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fc0 	.word	0x08000fc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000fc0 	.word	0x08000fc0

080001d4 <delay>:
#include <stdint.h>
#include <stdio.h>

// Delay function
void delay(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < 300000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	000493df 	.word	0x000493df

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
    // Peripheral register addresses
    uint32_t volatile *const pGPIOCModeReg  = (uint32_t*)(0x40020800);
 8000206:	4b88      	ldr	r3, [pc, #544]	@ (8000428 <main+0x228>)
 8000208:	617b      	str	r3, [r7, #20]
    uint32_t volatile *const pInputDataReg  = (uint32_t*)(0x40020810);
 800020a:	4b88      	ldr	r3, [pc, #544]	@ (800042c <main+0x22c>)
 800020c:	613b      	str	r3, [r7, #16]
    uint32_t volatile *const pOutputDataReg = (uint32_t*)(0x40020814);
 800020e:	4b88      	ldr	r3, [pc, #544]	@ (8000430 <main+0x230>)
 8000210:	60fb      	str	r3, [r7, #12]
    uint32_t volatile *const pClockCtrlReg  = (uint32_t*)(0x40023830);
 8000212:	4b88      	ldr	r3, [pc, #544]	@ (8000434 <main+0x234>)
 8000214:	60bb      	str	r3, [r7, #8]
    uint32_t volatile *const pPullupDownReg = (uint32_t*)(0x4002080C);
 8000216:	4b88      	ldr	r3, [pc, #544]	@ (8000438 <main+0x238>)
 8000218:	607b      	str	r3, [r7, #4]

    // 1. Enable the peripheral clock of GPIOC peripheral
    *pClockCtrlReg |= (1 << 2);
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 0204 	orr.w	r2, r3, #4
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	601a      	str	r2, [r3, #0]

    // 2. Configure PC0~PC3 as output (rows)
    *pGPIOCModeReg &= ~(0xFF); // Clear mode bits for PC0~PC3
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	601a      	str	r2, [r3, #0]
    *pGPIOCModeReg |= 0x55;   // Set PC0~PC3 as output (0101 in binary)
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	601a      	str	r2, [r3, #0]

    // 3. Configure PC8~PC11 as input (columns)
    *pGPIOCModeReg &= ~(0xF << 16); // Clear mode bits for PC8~PC11
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	601a      	str	r2, [r3, #0]

    // 4. Enable internal pull-up resistors for PC8~PC11
    *pPullupDownReg &= ~(0xFF << 16);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
    *pPullupDownReg |= (0x55 << 16); // 0101 in binary
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]

    while(1) {
        // Make all rows HIGH
        *pOutputDataReg |= 0xF; // Set PC0~PC3 HIGH
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 020f 	orr.w	r2, r3, #15
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	601a      	str	r2, [r3, #0]

        // Make R1 LOW (PC0)
        *pOutputDataReg &= ~(1 << 0);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f023 0201 	bic.w	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

        // Scan the columns
        // Check C1 (PC8) low or high
        if (!(*pInputDataReg & (1 << 8))) {
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000282:	2b00      	cmp	r3, #0
 8000284:	d104      	bne.n	8000290 <main+0x90>
            // Key is pressed
            delay();
 8000286:	f7ff ffa5 	bl	80001d4 <delay>
            printf("1\n");
 800028a:	486c      	ldr	r0, [pc, #432]	@ (800043c <main+0x23c>)
 800028c:	f000 fb04 	bl	8000898 <puts>
        }

        // Check C2 (PC9) low or high
        if (!(*pInputDataReg & (1 << 9))) {
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000298:	2b00      	cmp	r3, #0
 800029a:	d104      	bne.n	80002a6 <main+0xa6>
            // Key is pressed
            delay();
 800029c:	f7ff ff9a 	bl	80001d4 <delay>
            printf("2\n");
 80002a0:	4867      	ldr	r0, [pc, #412]	@ (8000440 <main+0x240>)
 80002a2:	f000 faf9 	bl	8000898 <puts>
        }

        // Check C3 (PC10) low or high
        if (!(*pInputDataReg & (1 << 10))) {
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d104      	bne.n	80002bc <main+0xbc>
            // Key is pressed
            delay();
 80002b2:	f7ff ff8f 	bl	80001d4 <delay>
            printf("3\n");
 80002b6:	4863      	ldr	r0, [pc, #396]	@ (8000444 <main+0x244>)
 80002b8:	f000 faee 	bl	8000898 <puts>
        }

        // Check C4 (PC11) low or high
        if (!(*pInputDataReg & (1 << 11))) {
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d104      	bne.n	80002d2 <main+0xd2>
            // Key is pressed
            delay();
 80002c8:	f7ff ff84 	bl	80001d4 <delay>
            printf("A\n");
 80002cc:	485e      	ldr	r0, [pc, #376]	@ (8000448 <main+0x248>)
 80002ce:	f000 fae3 	bl	8000898 <puts>
        }

        // Make all rows HIGH
        *pOutputDataReg |= 0xF; // Set PC0~PC3 HIGH
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 020f 	orr.w	r2, r3, #15
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
        // Make R2 LOW (PC1)
        *pOutputDataReg &= ~(1 << 1);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f023 0202 	bic.w	r2, r3, #2
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	601a      	str	r2, [r3, #0]

        // Scan the columns
        // Check C1 (PC8) low or high
        if (!(*pInputDataReg & (1 << 8))) {
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d104      	bne.n	8000300 <main+0x100>
            // Key is pressed
            delay();
 80002f6:	f7ff ff6d 	bl	80001d4 <delay>
            printf("4\n");
 80002fa:	4854      	ldr	r0, [pc, #336]	@ (800044c <main+0x24c>)
 80002fc:	f000 facc 	bl	8000898 <puts>
        }

        // Check C2 (PC9) low or high
        if (!(*pInputDataReg & (1 << 9))) {
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000308:	2b00      	cmp	r3, #0
 800030a:	d104      	bne.n	8000316 <main+0x116>
            // Key is pressed
            delay();
 800030c:	f7ff ff62 	bl	80001d4 <delay>
            printf("5\n");
 8000310:	484f      	ldr	r0, [pc, #316]	@ (8000450 <main+0x250>)
 8000312:	f000 fac1 	bl	8000898 <puts>
        }

        // Check C3 (PC10) low or high
        if (!(*pInputDataReg & (1 << 10))) {
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800031e:	2b00      	cmp	r3, #0
 8000320:	d104      	bne.n	800032c <main+0x12c>
            // Key is pressed
            delay();
 8000322:	f7ff ff57 	bl	80001d4 <delay>
            printf("6\n");
 8000326:	484b      	ldr	r0, [pc, #300]	@ (8000454 <main+0x254>)
 8000328:	f000 fab6 	bl	8000898 <puts>
        }

        // Check C4 (PC11) low or high
        if (!(*pInputDataReg & (1 << 11))) {
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000334:	2b00      	cmp	r3, #0
 8000336:	d104      	bne.n	8000342 <main+0x142>
            // Key is pressed
            delay();
 8000338:	f7ff ff4c 	bl	80001d4 <delay>
            printf("B\n");
 800033c:	4846      	ldr	r0, [pc, #280]	@ (8000458 <main+0x258>)
 800033e:	f000 faab 	bl	8000898 <puts>
        }

        // Make all rows HIGH
        *pOutputDataReg |= 0xF; // Set PC0~PC3 HIGH
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f043 020f 	orr.w	r2, r3, #15
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]
        // Make R3 LOW (PC2)
        *pOutputDataReg &= ~(1 << 2);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 0204 	bic.w	r2, r3, #4
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]

        // Scan the columns
        // Check C1 (PC8) low or high
        if (!(*pInputDataReg & (1 << 8))) {
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000362:	2b00      	cmp	r3, #0
 8000364:	d104      	bne.n	8000370 <main+0x170>
            // Key is pressed
            delay();
 8000366:	f7ff ff35 	bl	80001d4 <delay>
            printf("7\n");
 800036a:	483c      	ldr	r0, [pc, #240]	@ (800045c <main+0x25c>)
 800036c:	f000 fa94 	bl	8000898 <puts>
        }

        // Check C2 (PC9) low or high
        if (!(*pInputDataReg & (1 << 9))) {
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000378:	2b00      	cmp	r3, #0
 800037a:	d104      	bne.n	8000386 <main+0x186>
            // Key is pressed
            delay();
 800037c:	f7ff ff2a 	bl	80001d4 <delay>
            printf("8\n");
 8000380:	4837      	ldr	r0, [pc, #220]	@ (8000460 <main+0x260>)
 8000382:	f000 fa89 	bl	8000898 <puts>
        }

        // Check C3 (PC10) low or high
        if (!(*pInputDataReg & (1 << 10))) {
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800038e:	2b00      	cmp	r3, #0
 8000390:	d104      	bne.n	800039c <main+0x19c>
            // Key is pressed
            delay();
 8000392:	f7ff ff1f 	bl	80001d4 <delay>
            printf("9\n");
 8000396:	4833      	ldr	r0, [pc, #204]	@ (8000464 <main+0x264>)
 8000398:	f000 fa7e 	bl	8000898 <puts>
        }

        // Check C4 (PC11) low or high
        if (!(*pInputDataReg & (1 << 11))) {
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <main+0x1b2>
            // Key is pressed
            delay();
 80003a8:	f7ff ff14 	bl	80001d4 <delay>
            printf("C\n");
 80003ac:	482e      	ldr	r0, [pc, #184]	@ (8000468 <main+0x268>)
 80003ae:	f000 fa73 	bl	8000898 <puts>
        }

        // Make all rows HIGH
        *pOutputDataReg |= 0xF; // Set PC0~PC3 HIGH
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 020f 	orr.w	r2, r3, #15
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	601a      	str	r2, [r3, #0]
        // Make R4 LOW (PC3)
        *pOutputDataReg &= ~(1 << 3);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 0208 	bic.w	r2, r3, #8
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	601a      	str	r2, [r3, #0]

        // Scan the columns
        // Check C1 (PC8) low or high
        if (!(*pInputDataReg & (1 << 8))) {
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d104      	bne.n	80003e0 <main+0x1e0>
            // Key is pressed
            delay();
 80003d6:	f7ff fefd 	bl	80001d4 <delay>
            printf("*\n");
 80003da:	4824      	ldr	r0, [pc, #144]	@ (800046c <main+0x26c>)
 80003dc:	f000 fa5c 	bl	8000898 <puts>
        }

        // Check C2 (PC9) low or high
        if (!(*pInputDataReg & (1 << 9))) {
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <main+0x1f6>
            // Key is pressed
            delay();
 80003ec:	f7ff fef2 	bl	80001d4 <delay>
            printf("0\n");
 80003f0:	481f      	ldr	r0, [pc, #124]	@ (8000470 <main+0x270>)
 80003f2:	f000 fa51 	bl	8000898 <puts>
        }

        // Check C3 (PC10) low or high
        if (!(*pInputDataReg & (1 << 10))) {
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d104      	bne.n	800040c <main+0x20c>
            // Key is pressed
            delay();
 8000402:	f7ff fee7 	bl	80001d4 <delay>
            printf("#\n");
 8000406:	481b      	ldr	r0, [pc, #108]	@ (8000474 <main+0x274>)
 8000408:	f000 fa46 	bl	8000898 <puts>
        }

        // Check C4 (PC11) low or high
        if (!(*pInputDataReg & (1 << 11))) {
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000414:	2b00      	cmp	r3, #0
 8000416:	f47f af24 	bne.w	8000262 <main+0x62>
            // Key is pressed
            delay();
 800041a:	f7ff fedb 	bl	80001d4 <delay>
            printf("D\n");
 800041e:	4816      	ldr	r0, [pc, #88]	@ (8000478 <main+0x278>)
 8000420:	f000 fa3a 	bl	8000898 <puts>
        *pOutputDataReg |= 0xF; // Set PC0~PC3 HIGH
 8000424:	e71d      	b.n	8000262 <main+0x62>
 8000426:	bf00      	nop
 8000428:	40020800 	.word	0x40020800
 800042c:	40020810 	.word	0x40020810
 8000430:	40020814 	.word	0x40020814
 8000434:	40023830 	.word	0x40023830
 8000438:	4002080c 	.word	0x4002080c
 800043c:	08000fd8 	.word	0x08000fd8
 8000440:	08000fdc 	.word	0x08000fdc
 8000444:	08000fe0 	.word	0x08000fe0
 8000448:	08000fe4 	.word	0x08000fe4
 800044c:	08000fe8 	.word	0x08000fe8
 8000450:	08000fec 	.word	0x08000fec
 8000454:	08000ff0 	.word	0x08000ff0
 8000458:	08000ff4 	.word	0x08000ff4
 800045c:	08000ff8 	.word	0x08000ff8
 8000460:	08000ffc 	.word	0x08000ffc
 8000464:	08001000 	.word	0x08001000
 8000468:	08001004 	.word	0x08001004
 800046c:	08001008 	.word	0x08001008
 8000470:	0800100c 	.word	0x0800100c
 8000474:	08001010 	.word	0x08001010
 8000478:	08001014 	.word	0x08001014

0800047c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <ITM_SendChar+0x48>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <ITM_SendChar+0x48>)
 800048c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000490:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000492:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <ITM_SendChar+0x4c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <ITM_SendChar+0x4c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800049e:	bf00      	nop
 80004a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f8      	beq.n	80004a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000edfc 	.word	0xe000edfc
 80004c8:	e0000e00 	.word	0xe0000e00

080004cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	e00a      	b.n	80004f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004de:	f3af 8000 	nop.w
 80004e2:	4601      	mov	r1, r0
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	b2ca      	uxtb	r2, r1
 80004ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbf0      	blt.n	80004de <_read+0x12>
  }

  return len;
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b086      	sub	sp, #24
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	e009      	b.n	800052c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	60ba      	str	r2, [r7, #8]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ffab 	bl	800047c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf1      	blt.n	8000518 <_write+0x12>
  }
  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000566:	605a      	str	r2, [r3, #4]
  return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <_isatty>:

int _isatty(int file)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f000 fa8c 	bl	8000af4 <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	@ (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20018000 	.word	0x20018000
 8000608:	00000400 	.word	0x00000400
 800060c:	20000078 	.word	0x20000078
 8000610:	200001c8 	.word	0x200001c8

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 fa5d 	bl	8000b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fddb 	bl	8000200 <main>

0800064a <LoopForever>:

LoopForever:
  b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000658:	08001020 	.word	0x08001020
  ldr r2, =_sbss
 800065c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000660:	200001c8 	.word	0x200001c8

08000664 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <std>:
 8000668:	2300      	movs	r3, #0
 800066a:	b510      	push	{r4, lr}
 800066c:	4604      	mov	r4, r0
 800066e:	e9c0 3300 	strd	r3, r3, [r0]
 8000672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000676:	6083      	str	r3, [r0, #8]
 8000678:	8181      	strh	r1, [r0, #12]
 800067a:	6643      	str	r3, [r0, #100]	@ 0x64
 800067c:	81c2      	strh	r2, [r0, #14]
 800067e:	6183      	str	r3, [r0, #24]
 8000680:	4619      	mov	r1, r3
 8000682:	2208      	movs	r2, #8
 8000684:	305c      	adds	r0, #92	@ 0x5c
 8000686:	f000 f9e7 	bl	8000a58 <memset>
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <std+0x58>)
 800068c:	6263      	str	r3, [r4, #36]	@ 0x24
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <std+0x5c>)
 8000690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <std+0x60>)
 8000694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <std+0x64>)
 8000698:	6323      	str	r3, [r4, #48]	@ 0x30
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <std+0x68>)
 800069c:	6224      	str	r4, [r4, #32]
 800069e:	429c      	cmp	r4, r3
 80006a0:	d006      	beq.n	80006b0 <std+0x48>
 80006a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006a6:	4294      	cmp	r4, r2
 80006a8:	d002      	beq.n	80006b0 <std+0x48>
 80006aa:	33d0      	adds	r3, #208	@ 0xd0
 80006ac:	429c      	cmp	r4, r3
 80006ae:	d105      	bne.n	80006bc <std+0x54>
 80006b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b8:	f000 ba46 	b.w	8000b48 <__retarget_lock_init_recursive>
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	bf00      	nop
 80006c0:	080008a9 	.word	0x080008a9
 80006c4:	080008cb 	.word	0x080008cb
 80006c8:	08000903 	.word	0x08000903
 80006cc:	08000927 	.word	0x08000927
 80006d0:	2000007c 	.word	0x2000007c

080006d4 <stdio_exit_handler>:
 80006d4:	4a02      	ldr	r2, [pc, #8]	@ (80006e0 <stdio_exit_handler+0xc>)
 80006d6:	4903      	ldr	r1, [pc, #12]	@ (80006e4 <stdio_exit_handler+0x10>)
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <stdio_exit_handler+0x14>)
 80006da:	f000 b869 	b.w	80007b0 <_fwalk_sglue>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	08000e49 	.word	0x08000e49
 80006e8:	20000010 	.word	0x20000010

080006ec <cleanup_stdio>:
 80006ec:	6841      	ldr	r1, [r0, #4]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <cleanup_stdio+0x34>)
 80006f0:	4299      	cmp	r1, r3
 80006f2:	b510      	push	{r4, lr}
 80006f4:	4604      	mov	r4, r0
 80006f6:	d001      	beq.n	80006fc <cleanup_stdio+0x10>
 80006f8:	f000 fba6 	bl	8000e48 <_fflush_r>
 80006fc:	68a1      	ldr	r1, [r4, #8]
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <cleanup_stdio+0x38>)
 8000700:	4299      	cmp	r1, r3
 8000702:	d002      	beq.n	800070a <cleanup_stdio+0x1e>
 8000704:	4620      	mov	r0, r4
 8000706:	f000 fb9f 	bl	8000e48 <_fflush_r>
 800070a:	68e1      	ldr	r1, [r4, #12]
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <cleanup_stdio+0x3c>)
 800070e:	4299      	cmp	r1, r3
 8000710:	d004      	beq.n	800071c <cleanup_stdio+0x30>
 8000712:	4620      	mov	r0, r4
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f000 bb96 	b.w	8000e48 <_fflush_r>
 800071c:	bd10      	pop	{r4, pc}
 800071e:	bf00      	nop
 8000720:	2000007c 	.word	0x2000007c
 8000724:	200000e4 	.word	0x200000e4
 8000728:	2000014c 	.word	0x2000014c

0800072c <global_stdio_init.part.0>:
 800072c:	b510      	push	{r4, lr}
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <global_stdio_init.part.0+0x30>)
 8000730:	4c0b      	ldr	r4, [pc, #44]	@ (8000760 <global_stdio_init.part.0+0x34>)
 8000732:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <global_stdio_init.part.0+0x38>)
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4620      	mov	r0, r4
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	f7ff ff94 	bl	8000668 <std>
 8000740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000744:	2201      	movs	r2, #1
 8000746:	2109      	movs	r1, #9
 8000748:	f7ff ff8e 	bl	8000668 <std>
 800074c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000750:	2202      	movs	r2, #2
 8000752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000756:	2112      	movs	r1, #18
 8000758:	f7ff bf86 	b.w	8000668 <std>
 800075c:	200001b4 	.word	0x200001b4
 8000760:	2000007c 	.word	0x2000007c
 8000764:	080006d5 	.word	0x080006d5

08000768 <__sfp_lock_acquire>:
 8000768:	4801      	ldr	r0, [pc, #4]	@ (8000770 <__sfp_lock_acquire+0x8>)
 800076a:	f000 b9ee 	b.w	8000b4a <__retarget_lock_acquire_recursive>
 800076e:	bf00      	nop
 8000770:	200001bd 	.word	0x200001bd

08000774 <__sfp_lock_release>:
 8000774:	4801      	ldr	r0, [pc, #4]	@ (800077c <__sfp_lock_release+0x8>)
 8000776:	f000 b9e9 	b.w	8000b4c <__retarget_lock_release_recursive>
 800077a:	bf00      	nop
 800077c:	200001bd 	.word	0x200001bd

08000780 <__sinit>:
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
 8000784:	f7ff fff0 	bl	8000768 <__sfp_lock_acquire>
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	b11b      	cbz	r3, 8000794 <__sinit+0x14>
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f7ff bff0 	b.w	8000774 <__sfp_lock_release>
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <__sinit+0x28>)
 8000796:	6223      	str	r3, [r4, #32]
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <__sinit+0x2c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1f5      	bne.n	800078c <__sinit+0xc>
 80007a0:	f7ff ffc4 	bl	800072c <global_stdio_init.part.0>
 80007a4:	e7f2      	b.n	800078c <__sinit+0xc>
 80007a6:	bf00      	nop
 80007a8:	080006ed 	.word	0x080006ed
 80007ac:	200001b4 	.word	0x200001b4

080007b0 <_fwalk_sglue>:
 80007b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b4:	4607      	mov	r7, r0
 80007b6:	4688      	mov	r8, r1
 80007b8:	4614      	mov	r4, r2
 80007ba:	2600      	movs	r6, #0
 80007bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007c0:	f1b9 0901 	subs.w	r9, r9, #1
 80007c4:	d505      	bpl.n	80007d2 <_fwalk_sglue+0x22>
 80007c6:	6824      	ldr	r4, [r4, #0]
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d1f7      	bne.n	80007bc <_fwalk_sglue+0xc>
 80007cc:	4630      	mov	r0, r6
 80007ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d2:	89ab      	ldrh	r3, [r5, #12]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d907      	bls.n	80007e8 <_fwalk_sglue+0x38>
 80007d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	d003      	beq.n	80007e8 <_fwalk_sglue+0x38>
 80007e0:	4629      	mov	r1, r5
 80007e2:	4638      	mov	r0, r7
 80007e4:	47c0      	blx	r8
 80007e6:	4306      	orrs	r6, r0
 80007e8:	3568      	adds	r5, #104	@ 0x68
 80007ea:	e7e9      	b.n	80007c0 <_fwalk_sglue+0x10>

080007ec <_puts_r>:
 80007ec:	6a03      	ldr	r3, [r0, #32]
 80007ee:	b570      	push	{r4, r5, r6, lr}
 80007f0:	6884      	ldr	r4, [r0, #8]
 80007f2:	4605      	mov	r5, r0
 80007f4:	460e      	mov	r6, r1
 80007f6:	b90b      	cbnz	r3, 80007fc <_puts_r+0x10>
 80007f8:	f7ff ffc2 	bl	8000780 <__sinit>
 80007fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007fe:	07db      	lsls	r3, r3, #31
 8000800:	d405      	bmi.n	800080e <_puts_r+0x22>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	0598      	lsls	r0, r3, #22
 8000806:	d402      	bmi.n	800080e <_puts_r+0x22>
 8000808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800080a:	f000 f99e 	bl	8000b4a <__retarget_lock_acquire_recursive>
 800080e:	89a3      	ldrh	r3, [r4, #12]
 8000810:	0719      	lsls	r1, r3, #28
 8000812:	d502      	bpl.n	800081a <_puts_r+0x2e>
 8000814:	6923      	ldr	r3, [r4, #16]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d135      	bne.n	8000886 <_puts_r+0x9a>
 800081a:	4621      	mov	r1, r4
 800081c:	4628      	mov	r0, r5
 800081e:	f000 f8c5 	bl	80009ac <__swsetup_r>
 8000822:	b380      	cbz	r0, 8000886 <_puts_r+0x9a>
 8000824:	f04f 35ff 	mov.w	r5, #4294967295
 8000828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800082a:	07da      	lsls	r2, r3, #31
 800082c:	d405      	bmi.n	800083a <_puts_r+0x4e>
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	059b      	lsls	r3, r3, #22
 8000832:	d402      	bmi.n	800083a <_puts_r+0x4e>
 8000834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000836:	f000 f989 	bl	8000b4c <__retarget_lock_release_recursive>
 800083a:	4628      	mov	r0, r5
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	2b00      	cmp	r3, #0
 8000840:	da04      	bge.n	800084c <_puts_r+0x60>
 8000842:	69a2      	ldr	r2, [r4, #24]
 8000844:	429a      	cmp	r2, r3
 8000846:	dc17      	bgt.n	8000878 <_puts_r+0x8c>
 8000848:	290a      	cmp	r1, #10
 800084a:	d015      	beq.n	8000878 <_puts_r+0x8c>
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	6022      	str	r2, [r4, #0]
 8000852:	7019      	strb	r1, [r3, #0]
 8000854:	68a3      	ldr	r3, [r4, #8]
 8000856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800085a:	3b01      	subs	r3, #1
 800085c:	60a3      	str	r3, [r4, #8]
 800085e:	2900      	cmp	r1, #0
 8000860:	d1ed      	bne.n	800083e <_puts_r+0x52>
 8000862:	2b00      	cmp	r3, #0
 8000864:	da11      	bge.n	800088a <_puts_r+0x9e>
 8000866:	4622      	mov	r2, r4
 8000868:	210a      	movs	r1, #10
 800086a:	4628      	mov	r0, r5
 800086c:	f000 f85f 	bl	800092e <__swbuf_r>
 8000870:	3001      	adds	r0, #1
 8000872:	d0d7      	beq.n	8000824 <_puts_r+0x38>
 8000874:	250a      	movs	r5, #10
 8000876:	e7d7      	b.n	8000828 <_puts_r+0x3c>
 8000878:	4622      	mov	r2, r4
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f857 	bl	800092e <__swbuf_r>
 8000880:	3001      	adds	r0, #1
 8000882:	d1e7      	bne.n	8000854 <_puts_r+0x68>
 8000884:	e7ce      	b.n	8000824 <_puts_r+0x38>
 8000886:	3e01      	subs	r6, #1
 8000888:	e7e4      	b.n	8000854 <_puts_r+0x68>
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	6022      	str	r2, [r4, #0]
 8000890:	220a      	movs	r2, #10
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	e7ee      	b.n	8000874 <_puts_r+0x88>
	...

08000898 <puts>:
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <puts+0xc>)
 800089a:	4601      	mov	r1, r0
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f7ff bfa5 	b.w	80007ec <_puts_r>
 80008a2:	bf00      	nop
 80008a4:	2000000c 	.word	0x2000000c

080008a8 <__sread>:
 80008a8:	b510      	push	{r4, lr}
 80008aa:	460c      	mov	r4, r1
 80008ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b0:	f000 f8fc 	bl	8000aac <_read_r>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	bfab      	itete	ge
 80008b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ba:	89a3      	ldrhlt	r3, [r4, #12]
 80008bc:	181b      	addge	r3, r3, r0
 80008be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008c2:	bfac      	ite	ge
 80008c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008c6:	81a3      	strhlt	r3, [r4, #12]
 80008c8:	bd10      	pop	{r4, pc}

080008ca <__swrite>:
 80008ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ce:	461f      	mov	r7, r3
 80008d0:	898b      	ldrh	r3, [r1, #12]
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	4605      	mov	r5, r0
 80008d6:	460c      	mov	r4, r1
 80008d8:	4616      	mov	r6, r2
 80008da:	d505      	bpl.n	80008e8 <__swrite+0x1e>
 80008dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e0:	2302      	movs	r3, #2
 80008e2:	2200      	movs	r2, #0
 80008e4:	f000 f8d0 	bl	8000a88 <_lseek_r>
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008f2:	81a3      	strh	r3, [r4, #12]
 80008f4:	4632      	mov	r2, r6
 80008f6:	463b      	mov	r3, r7
 80008f8:	4628      	mov	r0, r5
 80008fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008fe:	f000 b8e7 	b.w	8000ad0 <_write_r>

08000902 <__sseek>:
 8000902:	b510      	push	{r4, lr}
 8000904:	460c      	mov	r4, r1
 8000906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090a:	f000 f8bd 	bl	8000a88 <_lseek_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	bf15      	itete	ne
 8000914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800091a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800091e:	81a3      	strheq	r3, [r4, #12]
 8000920:	bf18      	it	ne
 8000922:	81a3      	strhne	r3, [r4, #12]
 8000924:	bd10      	pop	{r4, pc}

08000926 <__sclose>:
 8000926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800092a:	f000 b89d 	b.w	8000a68 <_close_r>

0800092e <__swbuf_r>:
 800092e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000930:	460e      	mov	r6, r1
 8000932:	4614      	mov	r4, r2
 8000934:	4605      	mov	r5, r0
 8000936:	b118      	cbz	r0, 8000940 <__swbuf_r+0x12>
 8000938:	6a03      	ldr	r3, [r0, #32]
 800093a:	b90b      	cbnz	r3, 8000940 <__swbuf_r+0x12>
 800093c:	f7ff ff20 	bl	8000780 <__sinit>
 8000940:	69a3      	ldr	r3, [r4, #24]
 8000942:	60a3      	str	r3, [r4, #8]
 8000944:	89a3      	ldrh	r3, [r4, #12]
 8000946:	071a      	lsls	r2, r3, #28
 8000948:	d501      	bpl.n	800094e <__swbuf_r+0x20>
 800094a:	6923      	ldr	r3, [r4, #16]
 800094c:	b943      	cbnz	r3, 8000960 <__swbuf_r+0x32>
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 f82b 	bl	80009ac <__swsetup_r>
 8000956:	b118      	cbz	r0, 8000960 <__swbuf_r+0x32>
 8000958:	f04f 37ff 	mov.w	r7, #4294967295
 800095c:	4638      	mov	r0, r7
 800095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	6922      	ldr	r2, [r4, #16]
 8000964:	1a98      	subs	r0, r3, r2
 8000966:	6963      	ldr	r3, [r4, #20]
 8000968:	b2f6      	uxtb	r6, r6
 800096a:	4283      	cmp	r3, r0
 800096c:	4637      	mov	r7, r6
 800096e:	dc05      	bgt.n	800097c <__swbuf_r+0x4e>
 8000970:	4621      	mov	r1, r4
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fa68 	bl	8000e48 <_fflush_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	d1ed      	bne.n	8000958 <__swbuf_r+0x2a>
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	3b01      	subs	r3, #1
 8000980:	60a3      	str	r3, [r4, #8]
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	6022      	str	r2, [r4, #0]
 8000988:	701e      	strb	r6, [r3, #0]
 800098a:	6962      	ldr	r2, [r4, #20]
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	429a      	cmp	r2, r3
 8000990:	d004      	beq.n	800099c <__swbuf_r+0x6e>
 8000992:	89a3      	ldrh	r3, [r4, #12]
 8000994:	07db      	lsls	r3, r3, #31
 8000996:	d5e1      	bpl.n	800095c <__swbuf_r+0x2e>
 8000998:	2e0a      	cmp	r6, #10
 800099a:	d1df      	bne.n	800095c <__swbuf_r+0x2e>
 800099c:	4621      	mov	r1, r4
 800099e:	4628      	mov	r0, r5
 80009a0:	f000 fa52 	bl	8000e48 <_fflush_r>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d0d9      	beq.n	800095c <__swbuf_r+0x2e>
 80009a8:	e7d6      	b.n	8000958 <__swbuf_r+0x2a>
	...

080009ac <__swsetup_r>:
 80009ac:	b538      	push	{r3, r4, r5, lr}
 80009ae:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <__swsetup_r+0xa8>)
 80009b0:	4605      	mov	r5, r0
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	460c      	mov	r4, r1
 80009b6:	b118      	cbz	r0, 80009c0 <__swsetup_r+0x14>
 80009b8:	6a03      	ldr	r3, [r0, #32]
 80009ba:	b90b      	cbnz	r3, 80009c0 <__swsetup_r+0x14>
 80009bc:	f7ff fee0 	bl	8000780 <__sinit>
 80009c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009c4:	0719      	lsls	r1, r3, #28
 80009c6:	d422      	bmi.n	8000a0e <__swsetup_r+0x62>
 80009c8:	06da      	lsls	r2, r3, #27
 80009ca:	d407      	bmi.n	80009dc <__swsetup_r+0x30>
 80009cc:	2209      	movs	r2, #9
 80009ce:	602a      	str	r2, [r5, #0]
 80009d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	f04f 30ff 	mov.w	r0, #4294967295
 80009da:	e033      	b.n	8000a44 <__swsetup_r+0x98>
 80009dc:	0758      	lsls	r0, r3, #29
 80009de:	d512      	bpl.n	8000a06 <__swsetup_r+0x5a>
 80009e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009e2:	b141      	cbz	r1, 80009f6 <__swsetup_r+0x4a>
 80009e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009e8:	4299      	cmp	r1, r3
 80009ea:	d002      	beq.n	80009f2 <__swsetup_r+0x46>
 80009ec:	4628      	mov	r0, r5
 80009ee:	f000 f8af 	bl	8000b50 <_free_r>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009fc:	81a3      	strh	r3, [r4, #12]
 80009fe:	2300      	movs	r3, #0
 8000a00:	6063      	str	r3, [r4, #4]
 8000a02:	6923      	ldr	r3, [r4, #16]
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	81a3      	strh	r3, [r4, #12]
 8000a0e:	6923      	ldr	r3, [r4, #16]
 8000a10:	b94b      	cbnz	r3, 8000a26 <__swsetup_r+0x7a>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a1c:	d003      	beq.n	8000a26 <__swsetup_r+0x7a>
 8000a1e:	4621      	mov	r1, r4
 8000a20:	4628      	mov	r0, r5
 8000a22:	f000 fa5f 	bl	8000ee4 <__smakebuf_r>
 8000a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a2a:	f013 0201 	ands.w	r2, r3, #1
 8000a2e:	d00a      	beq.n	8000a46 <__swsetup_r+0x9a>
 8000a30:	2200      	movs	r2, #0
 8000a32:	60a2      	str	r2, [r4, #8]
 8000a34:	6962      	ldr	r2, [r4, #20]
 8000a36:	4252      	negs	r2, r2
 8000a38:	61a2      	str	r2, [r4, #24]
 8000a3a:	6922      	ldr	r2, [r4, #16]
 8000a3c:	b942      	cbnz	r2, 8000a50 <__swsetup_r+0xa4>
 8000a3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a42:	d1c5      	bne.n	80009d0 <__swsetup_r+0x24>
 8000a44:	bd38      	pop	{r3, r4, r5, pc}
 8000a46:	0799      	lsls	r1, r3, #30
 8000a48:	bf58      	it	pl
 8000a4a:	6962      	ldrpl	r2, [r4, #20]
 8000a4c:	60a2      	str	r2, [r4, #8]
 8000a4e:	e7f4      	b.n	8000a3a <__swsetup_r+0x8e>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e7f7      	b.n	8000a44 <__swsetup_r+0x98>
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <memset>:
 8000a58:	4402      	add	r2, r0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d100      	bne.n	8000a62 <memset+0xa>
 8000a60:	4770      	bx	lr
 8000a62:	f803 1b01 	strb.w	r1, [r3], #1
 8000a66:	e7f9      	b.n	8000a5c <memset+0x4>

08000a68 <_close_r>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	4d06      	ldr	r5, [pc, #24]	@ (8000a84 <_close_r+0x1c>)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	602b      	str	r3, [r5, #0]
 8000a74:	f7ff fd63 	bl	800053e <_close>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_close_r+0x1a>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_close_r+0x1a>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001b8 	.word	0x200001b8

08000a88 <_lseek_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	4d07      	ldr	r5, [pc, #28]	@ (8000aa8 <_lseek_r+0x20>)
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	602a      	str	r2, [r5, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fd78 	bl	800058c <_lseek>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_lseek_r+0x1e>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_lseek_r+0x1e>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <_read_r>:
 8000aac:	b538      	push	{r3, r4, r5, lr}
 8000aae:	4d07      	ldr	r5, [pc, #28]	@ (8000acc <_read_r+0x20>)
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	602a      	str	r2, [r5, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	f7ff fd06 	bl	80004cc <_read>
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	d102      	bne.n	8000aca <_read_r+0x1e>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b103      	cbz	r3, 8000aca <_read_r+0x1e>
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001b8 	.word	0x200001b8

08000ad0 <_write_r>:
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4d07      	ldr	r5, [pc, #28]	@ (8000af0 <_write_r+0x20>)
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	602a      	str	r2, [r5, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f7ff fd11 	bl	8000506 <_write>
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	d102      	bne.n	8000aee <_write_r+0x1e>
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	b103      	cbz	r3, 8000aee <_write_r+0x1e>
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	200001b8 	.word	0x200001b8

08000af4 <__errno>:
 8000af4:	4b01      	ldr	r3, [pc, #4]	@ (8000afc <__errno+0x8>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <__libc_init_array>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	4d0d      	ldr	r5, [pc, #52]	@ (8000b38 <__libc_init_array+0x38>)
 8000b04:	4c0d      	ldr	r4, [pc, #52]	@ (8000b3c <__libc_init_array+0x3c>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	2600      	movs	r6, #0
 8000b0c:	42a6      	cmp	r6, r4
 8000b0e:	d109      	bne.n	8000b24 <__libc_init_array+0x24>
 8000b10:	4d0b      	ldr	r5, [pc, #44]	@ (8000b40 <__libc_init_array+0x40>)
 8000b12:	4c0c      	ldr	r4, [pc, #48]	@ (8000b44 <__libc_init_array+0x44>)
 8000b14:	f000 fa54 	bl	8000fc0 <_init>
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	10a4      	asrs	r4, r4, #2
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	42a6      	cmp	r6, r4
 8000b20:	d105      	bne.n	8000b2e <__libc_init_array+0x2e>
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b28:	4798      	blx	r3
 8000b2a:	3601      	adds	r6, #1
 8000b2c:	e7ee      	b.n	8000b0c <__libc_init_array+0xc>
 8000b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b32:	4798      	blx	r3
 8000b34:	3601      	adds	r6, #1
 8000b36:	e7f2      	b.n	8000b1e <__libc_init_array+0x1e>
 8000b38:	08001018 	.word	0x08001018
 8000b3c:	08001018 	.word	0x08001018
 8000b40:	08001018 	.word	0x08001018
 8000b44:	0800101c 	.word	0x0800101c

08000b48 <__retarget_lock_init_recursive>:
 8000b48:	4770      	bx	lr

08000b4a <__retarget_lock_acquire_recursive>:
 8000b4a:	4770      	bx	lr

08000b4c <__retarget_lock_release_recursive>:
 8000b4c:	4770      	bx	lr
	...

08000b50 <_free_r>:
 8000b50:	b538      	push	{r3, r4, r5, lr}
 8000b52:	4605      	mov	r5, r0
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d041      	beq.n	8000bdc <_free_r+0x8c>
 8000b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b5c:	1f0c      	subs	r4, r1, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bfb8      	it	lt
 8000b62:	18e4      	addlt	r4, r4, r3
 8000b64:	f000 f8e0 	bl	8000d28 <__malloc_lock>
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <_free_r+0x90>)
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	b933      	cbnz	r3, 8000b7c <_free_r+0x2c>
 8000b6e:	6063      	str	r3, [r4, #4]
 8000b70:	6014      	str	r4, [r2, #0]
 8000b72:	4628      	mov	r0, r5
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b78:	f000 b8dc 	b.w	8000d34 <__malloc_unlock>
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <_free_r+0x42>
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	1821      	adds	r1, r4, r0
 8000b84:	428b      	cmp	r3, r1
 8000b86:	bf01      	itttt	eq
 8000b88:	6819      	ldreq	r1, [r3, #0]
 8000b8a:	685b      	ldreq	r3, [r3, #4]
 8000b8c:	1809      	addeq	r1, r1, r0
 8000b8e:	6021      	streq	r1, [r4, #0]
 8000b90:	e7ed      	b.n	8000b6e <_free_r+0x1e>
 8000b92:	461a      	mov	r2, r3
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b10b      	cbz	r3, 8000b9c <_free_r+0x4c>
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	d9fa      	bls.n	8000b92 <_free_r+0x42>
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	1850      	adds	r0, r2, r1
 8000ba0:	42a0      	cmp	r0, r4
 8000ba2:	d10b      	bne.n	8000bbc <_free_r+0x6c>
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	4401      	add	r1, r0
 8000ba8:	1850      	adds	r0, r2, r1
 8000baa:	4283      	cmp	r3, r0
 8000bac:	6011      	str	r1, [r2, #0]
 8000bae:	d1e0      	bne.n	8000b72 <_free_r+0x22>
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	6053      	str	r3, [r2, #4]
 8000bb6:	4408      	add	r0, r1
 8000bb8:	6010      	str	r0, [r2, #0]
 8000bba:	e7da      	b.n	8000b72 <_free_r+0x22>
 8000bbc:	d902      	bls.n	8000bc4 <_free_r+0x74>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	602b      	str	r3, [r5, #0]
 8000bc2:	e7d6      	b.n	8000b72 <_free_r+0x22>
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	1821      	adds	r1, r4, r0
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	bf04      	itt	eq
 8000bcc:	6819      	ldreq	r1, [r3, #0]
 8000bce:	685b      	ldreq	r3, [r3, #4]
 8000bd0:	6063      	str	r3, [r4, #4]
 8000bd2:	bf04      	itt	eq
 8000bd4:	1809      	addeq	r1, r1, r0
 8000bd6:	6021      	streq	r1, [r4, #0]
 8000bd8:	6054      	str	r4, [r2, #4]
 8000bda:	e7ca      	b.n	8000b72 <_free_r+0x22>
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	200001c4 	.word	0x200001c4

08000be4 <sbrk_aligned>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4e0f      	ldr	r6, [pc, #60]	@ (8000c24 <sbrk_aligned+0x40>)
 8000be8:	460c      	mov	r4, r1
 8000bea:	6831      	ldr	r1, [r6, #0]
 8000bec:	4605      	mov	r5, r0
 8000bee:	b911      	cbnz	r1, 8000bf6 <sbrk_aligned+0x12>
 8000bf0:	f000 f9d6 	bl	8000fa0 <_sbrk_r>
 8000bf4:	6030      	str	r0, [r6, #0]
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f000 f9d1 	bl	8000fa0 <_sbrk_r>
 8000bfe:	1c43      	adds	r3, r0, #1
 8000c00:	d103      	bne.n	8000c0a <sbrk_aligned+0x26>
 8000c02:	f04f 34ff 	mov.w	r4, #4294967295
 8000c06:	4620      	mov	r0, r4
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
 8000c0a:	1cc4      	adds	r4, r0, #3
 8000c0c:	f024 0403 	bic.w	r4, r4, #3
 8000c10:	42a0      	cmp	r0, r4
 8000c12:	d0f8      	beq.n	8000c06 <sbrk_aligned+0x22>
 8000c14:	1a21      	subs	r1, r4, r0
 8000c16:	4628      	mov	r0, r5
 8000c18:	f000 f9c2 	bl	8000fa0 <_sbrk_r>
 8000c1c:	3001      	adds	r0, #1
 8000c1e:	d1f2      	bne.n	8000c06 <sbrk_aligned+0x22>
 8000c20:	e7ef      	b.n	8000c02 <sbrk_aligned+0x1e>
 8000c22:	bf00      	nop
 8000c24:	200001c0 	.word	0x200001c0

08000c28 <_malloc_r>:
 8000c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c2c:	1ccd      	adds	r5, r1, #3
 8000c2e:	f025 0503 	bic.w	r5, r5, #3
 8000c32:	3508      	adds	r5, #8
 8000c34:	2d0c      	cmp	r5, #12
 8000c36:	bf38      	it	cc
 8000c38:	250c      	movcc	r5, #12
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	db01      	blt.n	8000c44 <_malloc_r+0x1c>
 8000c40:	42a9      	cmp	r1, r5
 8000c42:	d904      	bls.n	8000c4e <_malloc_r+0x26>
 8000c44:	230c      	movs	r3, #12
 8000c46:	6033      	str	r3, [r6, #0]
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d24 <_malloc_r+0xfc>
 8000c52:	f000 f869 	bl	8000d28 <__malloc_lock>
 8000c56:	f8d8 3000 	ldr.w	r3, [r8]
 8000c5a:	461c      	mov	r4, r3
 8000c5c:	bb44      	cbnz	r4, 8000cb0 <_malloc_r+0x88>
 8000c5e:	4629      	mov	r1, r5
 8000c60:	4630      	mov	r0, r6
 8000c62:	f7ff ffbf 	bl	8000be4 <sbrk_aligned>
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	4604      	mov	r4, r0
 8000c6a:	d158      	bne.n	8000d1e <_malloc_r+0xf6>
 8000c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c70:	4627      	mov	r7, r4
 8000c72:	2f00      	cmp	r7, #0
 8000c74:	d143      	bne.n	8000cfe <_malloc_r+0xd6>
 8000c76:	2c00      	cmp	r4, #0
 8000c78:	d04b      	beq.n	8000d12 <_malloc_r+0xea>
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	4630      	mov	r0, r6
 8000c80:	eb04 0903 	add.w	r9, r4, r3
 8000c84:	f000 f98c 	bl	8000fa0 <_sbrk_r>
 8000c88:	4581      	cmp	r9, r0
 8000c8a:	d142      	bne.n	8000d12 <_malloc_r+0xea>
 8000c8c:	6821      	ldr	r1, [r4, #0]
 8000c8e:	1a6d      	subs	r5, r5, r1
 8000c90:	4629      	mov	r1, r5
 8000c92:	4630      	mov	r0, r6
 8000c94:	f7ff ffa6 	bl	8000be4 <sbrk_aligned>
 8000c98:	3001      	adds	r0, #1
 8000c9a:	d03a      	beq.n	8000d12 <_malloc_r+0xea>
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	442b      	add	r3, r5
 8000ca0:	6023      	str	r3, [r4, #0]
 8000ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	bb62      	cbnz	r2, 8000d04 <_malloc_r+0xdc>
 8000caa:	f8c8 7000 	str.w	r7, [r8]
 8000cae:	e00f      	b.n	8000cd0 <_malloc_r+0xa8>
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	1b52      	subs	r2, r2, r5
 8000cb4:	d420      	bmi.n	8000cf8 <_malloc_r+0xd0>
 8000cb6:	2a0b      	cmp	r2, #11
 8000cb8:	d917      	bls.n	8000cea <_malloc_r+0xc2>
 8000cba:	1961      	adds	r1, r4, r5
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	6025      	str	r5, [r4, #0]
 8000cc0:	bf18      	it	ne
 8000cc2:	6059      	strne	r1, [r3, #4]
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	bf08      	it	eq
 8000cc8:	f8c8 1000 	streq.w	r1, [r8]
 8000ccc:	5162      	str	r2, [r4, r5]
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	f000 f82f 	bl	8000d34 <__malloc_unlock>
 8000cd6:	f104 000b 	add.w	r0, r4, #11
 8000cda:	1d23      	adds	r3, r4, #4
 8000cdc:	f020 0007 	bic.w	r0, r0, #7
 8000ce0:	1ac2      	subs	r2, r0, r3
 8000ce2:	bf1c      	itt	ne
 8000ce4:	1a1b      	subne	r3, r3, r0
 8000ce6:	50a3      	strne	r3, [r4, r2]
 8000ce8:	e7af      	b.n	8000c4a <_malloc_r+0x22>
 8000cea:	6862      	ldr	r2, [r4, #4]
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	bf0c      	ite	eq
 8000cf0:	f8c8 2000 	streq.w	r2, [r8]
 8000cf4:	605a      	strne	r2, [r3, #4]
 8000cf6:	e7eb      	b.n	8000cd0 <_malloc_r+0xa8>
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	6864      	ldr	r4, [r4, #4]
 8000cfc:	e7ae      	b.n	8000c5c <_malloc_r+0x34>
 8000cfe:	463c      	mov	r4, r7
 8000d00:	687f      	ldr	r7, [r7, #4]
 8000d02:	e7b6      	b.n	8000c72 <_malloc_r+0x4a>
 8000d04:	461a      	mov	r2, r3
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	d1fb      	bne.n	8000d04 <_malloc_r+0xdc>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6053      	str	r3, [r2, #4]
 8000d10:	e7de      	b.n	8000cd0 <_malloc_r+0xa8>
 8000d12:	230c      	movs	r3, #12
 8000d14:	6033      	str	r3, [r6, #0]
 8000d16:	4630      	mov	r0, r6
 8000d18:	f000 f80c 	bl	8000d34 <__malloc_unlock>
 8000d1c:	e794      	b.n	8000c48 <_malloc_r+0x20>
 8000d1e:	6005      	str	r5, [r0, #0]
 8000d20:	e7d6      	b.n	8000cd0 <_malloc_r+0xa8>
 8000d22:	bf00      	nop
 8000d24:	200001c4 	.word	0x200001c4

08000d28 <__malloc_lock>:
 8000d28:	4801      	ldr	r0, [pc, #4]	@ (8000d30 <__malloc_lock+0x8>)
 8000d2a:	f7ff bf0e 	b.w	8000b4a <__retarget_lock_acquire_recursive>
 8000d2e:	bf00      	nop
 8000d30:	200001bc 	.word	0x200001bc

08000d34 <__malloc_unlock>:
 8000d34:	4801      	ldr	r0, [pc, #4]	@ (8000d3c <__malloc_unlock+0x8>)
 8000d36:	f7ff bf09 	b.w	8000b4c <__retarget_lock_release_recursive>
 8000d3a:	bf00      	nop
 8000d3c:	200001bc 	.word	0x200001bc

08000d40 <__sflush_r>:
 8000d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d48:	0716      	lsls	r6, r2, #28
 8000d4a:	4605      	mov	r5, r0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	d454      	bmi.n	8000dfa <__sflush_r+0xba>
 8000d50:	684b      	ldr	r3, [r1, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dc02      	bgt.n	8000d5c <__sflush_r+0x1c>
 8000d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dd48      	ble.n	8000dee <__sflush_r+0xae>
 8000d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d045      	beq.n	8000dee <__sflush_r+0xae>
 8000d62:	2300      	movs	r3, #0
 8000d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d68:	682f      	ldr	r7, [r5, #0]
 8000d6a:	6a21      	ldr	r1, [r4, #32]
 8000d6c:	602b      	str	r3, [r5, #0]
 8000d6e:	d030      	beq.n	8000dd2 <__sflush_r+0x92>
 8000d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d72:	89a3      	ldrh	r3, [r4, #12]
 8000d74:	0759      	lsls	r1, r3, #29
 8000d76:	d505      	bpl.n	8000d84 <__sflush_r+0x44>
 8000d78:	6863      	ldr	r3, [r4, #4]
 8000d7a:	1ad2      	subs	r2, r2, r3
 8000d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d7e:	b10b      	cbz	r3, 8000d84 <__sflush_r+0x44>
 8000d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d82:	1ad2      	subs	r2, r2, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d88:	6a21      	ldr	r1, [r4, #32]
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	47b0      	blx	r6
 8000d8e:	1c43      	adds	r3, r0, #1
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	d106      	bne.n	8000da2 <__sflush_r+0x62>
 8000d94:	6829      	ldr	r1, [r5, #0]
 8000d96:	291d      	cmp	r1, #29
 8000d98:	d82b      	bhi.n	8000df2 <__sflush_r+0xb2>
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e44 <__sflush_r+0x104>)
 8000d9c:	410a      	asrs	r2, r1
 8000d9e:	07d6      	lsls	r6, r2, #31
 8000da0:	d427      	bmi.n	8000df2 <__sflush_r+0xb2>
 8000da2:	2200      	movs	r2, #0
 8000da4:	6062      	str	r2, [r4, #4]
 8000da6:	04d9      	lsls	r1, r3, #19
 8000da8:	6922      	ldr	r2, [r4, #16]
 8000daa:	6022      	str	r2, [r4, #0]
 8000dac:	d504      	bpl.n	8000db8 <__sflush_r+0x78>
 8000dae:	1c42      	adds	r2, r0, #1
 8000db0:	d101      	bne.n	8000db6 <__sflush_r+0x76>
 8000db2:	682b      	ldr	r3, [r5, #0]
 8000db4:	b903      	cbnz	r3, 8000db8 <__sflush_r+0x78>
 8000db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8000db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000dba:	602f      	str	r7, [r5, #0]
 8000dbc:	b1b9      	cbz	r1, 8000dee <__sflush_r+0xae>
 8000dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d002      	beq.n	8000dcc <__sflush_r+0x8c>
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f7ff fec2 	bl	8000b50 <_free_r>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8000dd0:	e00d      	b.n	8000dee <__sflush_r+0xae>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	47b0      	blx	r6
 8000dd8:	4602      	mov	r2, r0
 8000dda:	1c50      	adds	r0, r2, #1
 8000ddc:	d1c9      	bne.n	8000d72 <__sflush_r+0x32>
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0c6      	beq.n	8000d72 <__sflush_r+0x32>
 8000de4:	2b1d      	cmp	r3, #29
 8000de6:	d001      	beq.n	8000dec <__sflush_r+0xac>
 8000de8:	2b16      	cmp	r3, #22
 8000dea:	d11e      	bne.n	8000e2a <__sflush_r+0xea>
 8000dec:	602f      	str	r7, [r5, #0]
 8000dee:	2000      	movs	r0, #0
 8000df0:	e022      	b.n	8000e38 <__sflush_r+0xf8>
 8000df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	e01b      	b.n	8000e32 <__sflush_r+0xf2>
 8000dfa:	690f      	ldr	r7, [r1, #16]
 8000dfc:	2f00      	cmp	r7, #0
 8000dfe:	d0f6      	beq.n	8000dee <__sflush_r+0xae>
 8000e00:	0793      	lsls	r3, r2, #30
 8000e02:	680e      	ldr	r6, [r1, #0]
 8000e04:	bf08      	it	eq
 8000e06:	694b      	ldreq	r3, [r1, #20]
 8000e08:	600f      	str	r7, [r1, #0]
 8000e0a:	bf18      	it	ne
 8000e0c:	2300      	movne	r3, #0
 8000e0e:	eba6 0807 	sub.w	r8, r6, r7
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	f1b8 0f00 	cmp.w	r8, #0
 8000e18:	dde9      	ble.n	8000dee <__sflush_r+0xae>
 8000e1a:	6a21      	ldr	r1, [r4, #32]
 8000e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000e1e:	4643      	mov	r3, r8
 8000e20:	463a      	mov	r2, r7
 8000e22:	4628      	mov	r0, r5
 8000e24:	47b0      	blx	r6
 8000e26:	2800      	cmp	r0, #0
 8000e28:	dc08      	bgt.n	8000e3c <__sflush_r+0xfc>
 8000e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e32:	81a3      	strh	r3, [r4, #12]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e3c:	4407      	add	r7, r0
 8000e3e:	eba8 0800 	sub.w	r8, r8, r0
 8000e42:	e7e7      	b.n	8000e14 <__sflush_r+0xd4>
 8000e44:	dfbffffe 	.word	0xdfbffffe

08000e48 <_fflush_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	690b      	ldr	r3, [r1, #16]
 8000e4c:	4605      	mov	r5, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	b913      	cbnz	r3, 8000e58 <_fflush_r+0x10>
 8000e52:	2500      	movs	r5, #0
 8000e54:	4628      	mov	r0, r5
 8000e56:	bd38      	pop	{r3, r4, r5, pc}
 8000e58:	b118      	cbz	r0, 8000e62 <_fflush_r+0x1a>
 8000e5a:	6a03      	ldr	r3, [r0, #32]
 8000e5c:	b90b      	cbnz	r3, 8000e62 <_fflush_r+0x1a>
 8000e5e:	f7ff fc8f 	bl	8000780 <__sinit>
 8000e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f3      	beq.n	8000e52 <_fflush_r+0xa>
 8000e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e6c:	07d0      	lsls	r0, r2, #31
 8000e6e:	d404      	bmi.n	8000e7a <_fflush_r+0x32>
 8000e70:	0599      	lsls	r1, r3, #22
 8000e72:	d402      	bmi.n	8000e7a <_fflush_r+0x32>
 8000e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e76:	f7ff fe68 	bl	8000b4a <__retarget_lock_acquire_recursive>
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff ff5f 	bl	8000d40 <__sflush_r>
 8000e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e84:	07da      	lsls	r2, r3, #31
 8000e86:	4605      	mov	r5, r0
 8000e88:	d4e4      	bmi.n	8000e54 <_fflush_r+0xc>
 8000e8a:	89a3      	ldrh	r3, [r4, #12]
 8000e8c:	059b      	lsls	r3, r3, #22
 8000e8e:	d4e1      	bmi.n	8000e54 <_fflush_r+0xc>
 8000e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e92:	f7ff fe5b 	bl	8000b4c <__retarget_lock_release_recursive>
 8000e96:	e7dd      	b.n	8000e54 <_fflush_r+0xc>

08000e98 <__swhatbuf_r>:
 8000e98:	b570      	push	{r4, r5, r6, lr}
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	b096      	sub	sp, #88	@ 0x58
 8000ea4:	4615      	mov	r5, r2
 8000ea6:	461e      	mov	r6, r3
 8000ea8:	da0d      	bge.n	8000ec6 <__swhatbuf_r+0x2e>
 8000eaa:	89a3      	ldrh	r3, [r4, #12]
 8000eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000eb0:	f04f 0100 	mov.w	r1, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2340      	movne	r3, #64	@ 0x40
 8000eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	6031      	str	r1, [r6, #0]
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	b016      	add	sp, #88	@ 0x58
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
 8000ec6:	466a      	mov	r2, sp
 8000ec8:	f000 f848 	bl	8000f5c <_fstat_r>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	dbec      	blt.n	8000eaa <__swhatbuf_r+0x12>
 8000ed0:	9901      	ldr	r1, [sp, #4]
 8000ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000eda:	4259      	negs	r1, r3
 8000edc:	4159      	adcs	r1, r3
 8000ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee2:	e7eb      	b.n	8000ebc <__swhatbuf_r+0x24>

08000ee4 <__smakebuf_r>:
 8000ee4:	898b      	ldrh	r3, [r1, #12]
 8000ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ee8:	079d      	lsls	r5, r3, #30
 8000eea:	4606      	mov	r6, r0
 8000eec:	460c      	mov	r4, r1
 8000eee:	d507      	bpl.n	8000f00 <__smakebuf_r+0x1c>
 8000ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	6123      	str	r3, [r4, #16]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6163      	str	r3, [r4, #20]
 8000efc:	b003      	add	sp, #12
 8000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f00:	ab01      	add	r3, sp, #4
 8000f02:	466a      	mov	r2, sp
 8000f04:	f7ff ffc8 	bl	8000e98 <__swhatbuf_r>
 8000f08:	9f00      	ldr	r7, [sp, #0]
 8000f0a:	4605      	mov	r5, r0
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff fe8a 	bl	8000c28 <_malloc_r>
 8000f14:	b948      	cbnz	r0, 8000f2a <__smakebuf_r+0x46>
 8000f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f1a:	059a      	lsls	r2, r3, #22
 8000f1c:	d4ee      	bmi.n	8000efc <__smakebuf_r+0x18>
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	81a3      	strh	r3, [r4, #12]
 8000f28:	e7e2      	b.n	8000ef0 <__smakebuf_r+0xc>
 8000f2a:	89a3      	ldrh	r3, [r4, #12]
 8000f2c:	6020      	str	r0, [r4, #0]
 8000f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f32:	81a3      	strh	r3, [r4, #12]
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f3a:	b15b      	cbz	r3, 8000f54 <__smakebuf_r+0x70>
 8000f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f40:	4630      	mov	r0, r6
 8000f42:	f000 f81d 	bl	8000f80 <_isatty_r>
 8000f46:	b128      	cbz	r0, 8000f54 <__smakebuf_r+0x70>
 8000f48:	89a3      	ldrh	r3, [r4, #12]
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	81a3      	strh	r3, [r4, #12]
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	431d      	orrs	r5, r3
 8000f58:	81a5      	strh	r5, [r4, #12]
 8000f5a:	e7cf      	b.n	8000efc <__smakebuf_r+0x18>

08000f5c <_fstat_r>:
 8000f5c:	b538      	push	{r3, r4, r5, lr}
 8000f5e:	4d07      	ldr	r5, [pc, #28]	@ (8000f7c <_fstat_r+0x20>)
 8000f60:	2300      	movs	r3, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	f7ff faf4 	bl	8000556 <_fstat>
 8000f6e:	1c43      	adds	r3, r0, #1
 8000f70:	d102      	bne.n	8000f78 <_fstat_r+0x1c>
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	b103      	cbz	r3, 8000f78 <_fstat_r+0x1c>
 8000f76:	6023      	str	r3, [r4, #0]
 8000f78:	bd38      	pop	{r3, r4, r5, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b8 	.word	0x200001b8

08000f80 <_isatty_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4d06      	ldr	r5, [pc, #24]	@ (8000f9c <_isatty_r+0x1c>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	602b      	str	r3, [r5, #0]
 8000f8c:	f7ff faf3 	bl	8000576 <_isatty>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_isatty_r+0x1a>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_isatty_r+0x1a>
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	200001b8 	.word	0x200001b8

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4d06      	ldr	r5, [pc, #24]	@ (8000fbc <_sbrk_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff fafc 	bl	80005a8 <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	200001b8 	.word	0x200001b8

08000fc0 <_init>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr

08000fcc <_fini>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr
