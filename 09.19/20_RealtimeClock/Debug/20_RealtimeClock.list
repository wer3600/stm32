
20_RealtimeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003814  08003814  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00004814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800381c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003884  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003884  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f61  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001841  00000000  00000000  0000dff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0000f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068c  00000000  00000000  000100e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd7  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b047  00000000  00000000  00027443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e397  00000000  00000000  0003248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000c0864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c34bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003768 	.word	0x08003768

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003768 	.word	0x08003768

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f915 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f000 f806 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f917 	bl	8000816 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f8ed 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	@ (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000084 	.word	0x20000084

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	@ (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	@ 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	@ 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff8e 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff47 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff5c 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff8e 	bl	800071c <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5d 	bl	80006c8 <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb0 	bl	8000784 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	@ 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e159      	b.n	8000b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8148 	bne.w	8000afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 0303 	and.w	r3, r3, #3
 8000872:	2b01      	cmp	r3, #1
 8000874:	d005      	beq.n	8000882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800087e:	2b02      	cmp	r3, #2
 8000880:	d130      	bne.n	80008e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4013      	ands	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b8:	2201      	movs	r2, #1
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4013      	ands	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	f003 0201 	and.w	r2, r3, #1
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4313      	orrs	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d017      	beq.n	8000920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4313      	orrs	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	69b9      	ldr	r1, [r7, #24]
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0203 	and.w	r2, r3, #3
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a2 	beq.w	8000afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b57      	ldr	r3, [pc, #348]	@ (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a56      	ldr	r2, [pc, #344]	@ (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b54      	ldr	r3, [pc, #336]	@ (8000b18 <HAL_GPIO_Init+0x2e8>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d2:	4a52      	ldr	r2, [pc, #328]	@ (8000b1c <HAL_GPIO_Init+0x2ec>)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a49      	ldr	r2, [pc, #292]	@ (8000b20 <HAL_GPIO_Init+0x2f0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0x202>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a48      	ldr	r2, [pc, #288]	@ (8000b24 <HAL_GPIO_Init+0x2f4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0x1fe>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a47      	ldr	r2, [pc, #284]	@ (8000b28 <HAL_GPIO_Init+0x2f8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00d      	beq.n	8000a2a <HAL_GPIO_Init+0x1fa>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a46      	ldr	r2, [pc, #280]	@ (8000b2c <HAL_GPIO_Init+0x2fc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d007      	beq.n	8000a26 <HAL_GPIO_Init+0x1f6>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a45      	ldr	r2, [pc, #276]	@ (8000b30 <HAL_GPIO_Init+0x300>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_GPIO_Init+0x1f2>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e008      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a26:	2303      	movs	r3, #3
 8000a28:	e004      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x204>
 8000a32:	2300      	movs	r3, #0
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	f002 0203 	and.w	r2, r2, #3
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a44:	4935      	ldr	r1, [pc, #212]	@ (8000b1c <HAL_GPIO_Init+0x2ec>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a52:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a76:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa0:	4a24      	ldr	r2, [pc, #144]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aca:	4a1a      	ldr	r2, [pc, #104]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000af4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_GPIO_Init+0x304>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	f67f aea2 	bls.w	800084c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40013c00 	.word	0x40013c00

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e267      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d075      	beq.n	8000c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b56:	4b88      	ldr	r3, [pc, #544]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d00c      	beq.n	8000b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b62:	4b85      	ldr	r3, [pc, #532]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d112      	bne.n	8000b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b6e:	4b82      	ldr	r3, [pc, #520]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b7a:	d10b      	bne.n	8000b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d05b      	beq.n	8000c40 <HAL_RCC_OscConfig+0x108>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d157      	bne.n	8000c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e242      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b9c:	d106      	bne.n	8000bac <HAL_RCC_OscConfig+0x74>
 8000b9e:	4b76      	ldr	r3, [pc, #472]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a75      	ldr	r2, [pc, #468]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e01d      	b.n	8000be8 <HAL_RCC_OscConfig+0xb0>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x98>
 8000bb6:	4b70      	ldr	r3, [pc, #448]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a6f      	ldr	r2, [pc, #444]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e00b      	b.n	8000be8 <HAL_RCC_OscConfig+0xb0>
 8000bd0:	4b69      	ldr	r3, [pc, #420]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a68      	ldr	r2, [pc, #416]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b66      	ldr	r3, [pc, #408]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a65      	ldr	r2, [pc, #404]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fd2c 	bl	800064c <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fd28 	bl	800064c <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	@ 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e207      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0xc0>
 8000c16:	e014      	b.n	8000c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fd18 	bl	800064c <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fd14 	bl	800064c <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b64      	cmp	r3, #100	@ 0x64
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e1f3      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	4b51      	ldr	r3, [pc, #324]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0xe8>
 8000c3e:	e000      	b.n	8000c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d063      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c5a:	4b47      	ldr	r3, [pc, #284]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d11c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c66:	4b44      	ldr	r3, [pc, #272]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d116      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	4b41      	ldr	r3, [pc, #260]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <HAL_RCC_OscConfig+0x152>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d001      	beq.n	8000c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e1c7      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4937      	ldr	r1, [pc, #220]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	e03a      	b.n	8000d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d020      	beq.n	8000cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca8:	4b34      	ldr	r3, [pc, #208]	@ (8000d7c <HAL_RCC_OscConfig+0x244>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cae:	f7ff fccd 	bl	800064c <HAL_GetTick>
 8000cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	e008      	b.n	8000cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb6:	f7ff fcc9 	bl	800064c <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e1a8      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f0      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4925      	ldr	r1, [pc, #148]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]
 8000ce8:	e015      	b.n	8000d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <HAL_RCC_OscConfig+0x244>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fcac 	bl	800064c <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fca8 	bl	800064c <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e187      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f0      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d036      	beq.n	8000d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d016      	beq.n	8000d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_RCC_OscConfig+0x248>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d30:	f7ff fc8c 	bl	800064c <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc88 	bl	800064c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e167      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f0      	beq.n	8000d38 <HAL_RCC_OscConfig+0x200>
 8000d56:	e01b      	b.n	8000d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_RCC_OscConfig+0x248>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fc75 	bl	800064c <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	e00e      	b.n	8000d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d66:	f7ff fc71 	bl	800064c <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d907      	bls.n	8000d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e150      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	42470000 	.word	0x42470000
 8000d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	4b88      	ldr	r3, [pc, #544]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1ea      	bne.n	8000d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8097 	beq.w	8000ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da2:	4b81      	ldr	r3, [pc, #516]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a7c      	ldr	r2, [pc, #496]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dce:	4b77      	ldr	r3, [pc, #476]	@ (8000fac <HAL_RCC_OscConfig+0x474>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d118      	bne.n	8000e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dda:	4b74      	ldr	r3, [pc, #464]	@ (8000fac <HAL_RCC_OscConfig+0x474>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a73      	ldr	r2, [pc, #460]	@ (8000fac <HAL_RCC_OscConfig+0x474>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de6:	f7ff fc31 	bl	800064c <HAL_GetTick>
 8000dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dee:	f7ff fc2d 	bl	800064c <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e10c      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e00:	4b6a      	ldr	r3, [pc, #424]	@ (8000fac <HAL_RCC_OscConfig+0x474>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d106      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2ea>
 8000e14:	4b64      	ldr	r3, [pc, #400]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e18:	4a63      	ldr	r2, [pc, #396]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e20:	e01c      	b.n	8000e5c <HAL_RCC_OscConfig+0x324>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d10c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x30c>
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e36:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e42:	e00b      	b.n	8000e5c <HAL_RCC_OscConfig+0x324>
 8000e44:	4b58      	ldr	r3, [pc, #352]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e48:	4a57      	ldr	r2, [pc, #348]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e50:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e54:	4a54      	ldr	r2, [pc, #336]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e56:	f023 0304 	bic.w	r3, r3, #4
 8000e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d015      	beq.n	8000e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	f7ff fbf2 	bl	800064c <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6a:	e00a      	b.n	8000e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fbee 	bl	800064c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e0cb      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e82:	4b49      	ldr	r3, [pc, #292]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0ee      	beq.n	8000e6c <HAL_RCC_OscConfig+0x334>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fbdc 	bl	800064c <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e96:	e00a      	b.n	8000eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f7ff fbd8 	bl	800064c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e0b5      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eae:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ee      	bne.n	8000e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d105      	bne.n	8000ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec0:	4b39      	ldr	r3, [pc, #228]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a38      	ldr	r2, [pc, #224]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a1 	beq.w	8001018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ed6:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d05c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d141      	bne.n	8000f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fbac 	bl	800064c <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef8:	f7ff fba8 	bl	800064c <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e087      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0a:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	491b      	ldr	r1, [pc, #108]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb81 	bl	800064c <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb7d 	bl	800064c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e05c      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x416>
 8000f6c:	e054      	b.n	8001018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb6a 	bl	800064c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fb66 	bl	800064c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e045      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x444>
 8000f9a:	e03d      	b.n	8001018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e038      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_RCC_OscConfig+0x4ec>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d028      	beq.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d121      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d11a      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d111      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001000:	429a      	cmp	r2, r3
 8001002:	d107      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001010:	429a      	cmp	r2, r3
 8001012:	d001      	beq.n	8001018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_RCC_GetHCLKFreq+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001044:	f7ff fff0 	bl	8001028 <HAL_RCC_GetHCLKFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0a9b      	lsrs	r3, r3, #10
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	4903      	ldr	r1, [pc, #12]	@ (8001064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	080037d0 	.word	0x080037d0

08001068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800106c:	f7ff ffdc 	bl	8001028 <HAL_RCC_GetHCLKFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	0b5b      	lsrs	r3, r3, #13
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	4903      	ldr	r1, [pc, #12]	@ (800108c <HAL_RCC_GetPCLK2Freq+0x24>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	080037d0 	.word	0x080037d0

08001090 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d035      	beq.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80010b8:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80010be:	f7ff fac5 	bl	800064c <HAL_GetTick>
 80010c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80010c6:	f7ff fac1 	bl	800064c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0ba      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80010d8:	4b60      	ldr	r3, [pc, #384]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f0      	bne.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	019a      	lsls	r2, r3, #6
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	071b      	lsls	r3, r3, #28
 80010f0:	495a      	ldr	r1, [pc, #360]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80010fe:	f7ff faa5 	bl	800064c <HAL_GetTick>
 8001102:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001106:	f7ff faa1 	bl	800064c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e09a      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001118:	4b50      	ldr	r3, [pc, #320]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8083 	beq.w	8001238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b49      	ldr	r3, [pc, #292]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a48      	ldr	r2, [pc, #288]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b46      	ldr	r3, [pc, #280]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a43      	ldr	r2, [pc, #268]	@ (8001260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001158:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800115a:	f7ff fa77 	bl	800064c <HAL_GetTick>
 800115e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001162:	f7ff fa73 	bl	800064c <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e06c      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001174:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001180:	4b36      	ldr	r3, [pc, #216]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001188:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02f      	beq.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	429a      	cmp	r2, r3
 800119c:	d028      	beq.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800119e:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80011a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80011b4:	4a29      	ldr	r2, [pc, #164]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80011ba:	4b28      	ldr	r3, [pc, #160]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d114      	bne.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa41 	bl	800064c <HAL_GetTick>
 80011ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fa3d 	bl	800064c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e034      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ee      	beq.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011fc:	d10d      	bne.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800120e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001212:	4912      	ldr	r1, [pc, #72]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
 8001218:	e005      	b.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001220:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001224:	6093      	str	r3, [r2, #8]
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001228:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001232:	490a      	ldr	r1, [pc, #40]	@ (800125c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001234:	4313      	orrs	r3, r2
 8001236:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7c1a      	ldrb	r2, [r3, #16]
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800124a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	42470068 	.word	0x42470068
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000
 8001264:	42470e40 	.word	0x42470e40
 8001268:	424711e0 	.word	0x424711e0

0800126c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e073      	b.n	800136a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7f5b      	ldrb	r3, [r3, #29]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f86d 	bl	8001372 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d055      	beq.n	8001358 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	22ca      	movs	r2, #202	@ 0xca
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2253      	movs	r2, #83	@ 0x53
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fa53 	bl	8001768 <RTC_EnterInitMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d12c      	bne.n	8001326 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80012da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012de:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6899      	ldr	r1, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fa5a 	bl	80017d6 <RTC_ExitInitMode>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d110      	bne.n	800134e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800133a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	22ff      	movs	r2, #255	@ 0xff
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
 8001356:	e001      	b.n	800135c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001386:	b590      	push	{r4, r7, lr}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7f1b      	ldrb	r3, [r3, #28]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_RTC_SetTime+0x1c>
 800139e:	2302      	movs	r3, #2
 80013a0:	e087      	b.n	80014b2 <HAL_RTC_SetTime+0x12c>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2202      	movs	r2, #2
 80013ac:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d126      	bne.n	8001402 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2200      	movs	r2, #0
 80013c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fa27 	bl	8001820 <RTC_ByteToBcd2>
 80013d2:	4603      	mov	r3, r0
 80013d4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fa20 	bl	8001820 <RTC_ByteToBcd2>
 80013e0:	4603      	mov	r3, r0
 80013e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80013e4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fa18 	bl	8001820 <RTC_ByteToBcd2>
 80013f0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80013f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e018      	b.n	8001434 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2200      	movs	r2, #0
 8001414:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001422:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001428:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	78db      	ldrb	r3, [r3, #3]
 800142e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001430:	4313      	orrs	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	22ca      	movs	r2, #202	@ 0xca
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2253      	movs	r2, #83	@ 0x53
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f98f 	bl	8001768 <RTC_EnterInitMode>
 800144a:	4603      	mov	r3, r0
 800144c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800144e:	7cfb      	ldrb	r3, [r7, #19]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d120      	bne.n	8001496 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800145e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001462:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001472:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6899      	ldr	r1, [r3, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f9a2 	bl	80017d6 <RTC_ExitInitMode>
 8001492:	4603      	mov	r3, r0
 8001494:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	22ff      	movs	r2, #255	@ 0xff
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	771a      	strb	r2, [r3, #28]

  return status;
 80014b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}

080014ba <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80014ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80014f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	0d9b      	lsrs	r3, r3, #22
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11a      	bne.n	800156c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f98e 	bl	800185c <RTC_Bcd2ToByte>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f985 	bl	800185c <RTC_Bcd2ToByte>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	789b      	ldrb	r3, [r3, #2]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f97c 	bl	800185c <RTC_Bcd2ToByte>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001576:	b590      	push	{r4, r7, lr}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	7f1b      	ldrb	r3, [r3, #28]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_RTC_SetDate+0x1c>
 800158e:	2302      	movs	r3, #2
 8001590:	e071      	b.n	8001676 <HAL_RTC_SetDate+0x100>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2202      	movs	r2, #2
 800159c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10e      	bne.n	80015c2 <HAL_RTC_SetDate+0x4c>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	f023 0310 	bic.w	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	330a      	adds	r3, #10
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11c      	bne.n	8001602 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f927 	bl	8001820 <RTC_ByteToBcd2>
 80015d2:	4603      	mov	r3, r0
 80015d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f920 	bl	8001820 <RTC_ByteToBcd2>
 80015e0:	4603      	mov	r3, r0
 80015e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80015e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f918 	bl	8001820 <RTC_ByteToBcd2>
 80015f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80015f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00e      	b.n	8001620 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800160e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001614:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22ca      	movs	r2, #202	@ 0xca
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2253      	movs	r2, #83	@ 0x53
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f899 	bl	8001768 <RTC_EnterInitMode>
 8001636:	4603      	mov	r3, r0
 8001638:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10c      	bne.n	800165a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800164a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800164e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f8c0 	bl	80017d6 <RTC_ExitInitMode>
 8001656:	4603      	mov	r3, r0
 8001658:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800165a:	7cfb      	ldrb	r3, [r7, #19]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	22ff      	movs	r2, #255	@ 0xff
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]

  return status;
 8001674:	7cfb      	ldrb	r3, [r7, #19]
}
 8001676:	4618      	mov	r0, r3
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}

0800167e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001698:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800169c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	0b5b      	lsrs	r3, r3, #13
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d11a      	bne.n	8001712 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8bb 	bl	800185c <RTC_Bcd2ToByte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f8b2 	bl	800185c <RTC_Bcd2ToByte>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8a9 	bl	800185c <RTC_Bcd2ToByte>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <HAL_RTC_WaitForSynchro+0x48>)
 800172e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001730:	f7fe ff8c 	bl	800064c <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001736:	e009      	b.n	800174c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001738:	f7fe ff88 	bl	800064c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001746:	d901      	bls.n	800174c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e007      	b.n	800175c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ee      	beq.n	8001738 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	00013f5f 	.word	0x00013f5f

08001768 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d122      	bne.n	80017cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001794:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001796:	f7fe ff59 	bl	800064c <HAL_GetTick>
 800179a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800179c:	e00c      	b.n	80017b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800179e:	f7fe ff55 	bl	800064c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ac:	d904      	bls.n	80017b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <RTC_EnterInitMode+0x64>
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1e8      	bne.n	800179e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10a      	bne.n	8001816 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff8b 	bl	800171c <HAL_RTC_WaitForSynchro>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800182e:	e005      	b.n	800183c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b0a      	subs	r3, #10
 800183a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b09      	cmp	r3, #9
 8001840:	d8f6      	bhi.n	8001830 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	b2da      	uxtb	r2, r3
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4313      	orrs	r3, r2
 800184e:	b2db      	uxtb	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3350      	adds	r3, #80	@ 0x50
 80018ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3350      	adds	r3, #80	@ 0x50
 80018e0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e042      	b.n	8001994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f83a 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800193e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f97d 	bl	8001c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d175      	bne.n	8001abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_UART_Transmit+0x2c>
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e06e      	b.n	8001abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2221      	movs	r2, #33	@ 0x21
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ee:	f7fe fe2d 	bl	800064c <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	88fa      	ldrh	r2, [r7, #6]
 80019fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a08:	d108      	bne.n	8001a1c <HAL_UART_Transmit+0x6c>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e003      	b.n	8001a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a24:	e02e      	b.n	8001a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2180      	movs	r1, #128	@ 0x80
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f848 	bl	8001ac6 <UART_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e03a      	b.n	8001abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10b      	bne.n	8001a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	3302      	adds	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	e007      	b.n	8001a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1cb      	bne.n	8001a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2140      	movs	r1, #64	@ 0x40
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f814 	bl	8001ac6 <UART_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e006      	b.n	8001abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad6:	e03b      	b.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	d037      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7fe fdb4 	bl	800064c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	6a3a      	ldr	r2, [r7, #32]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e03a      	b.n	8001b70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b80      	cmp	r3, #128	@ 0x80
 8001b0c:	d020      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b40      	cmp	r3, #64	@ 0x40
 8001b12:	d01d      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d116      	bne.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f81d 	bl	8001b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2208      	movs	r2, #8
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e00f      	b.n	8001b70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d0b4      	beq.n	8001ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b095      	sub	sp, #84	@ 0x54
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b8a:	e853 3f00 	ldrex	r3, [r3]
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ba0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ba8:	e841 2300 	strex	r3, r2, [r1]
 8001bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e5      	bne.n	8001b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3314      	adds	r3, #20
 8001bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	e853 3f00 	ldrex	r3, [r3]
 8001bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bdc:	e841 2300 	strex	r3, r2, [r1]
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e5      	bne.n	8001bb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d119      	bne.n	8001c24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	e853 3f00 	ldrex	r3, [r3]
 8001bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f023 0310 	bic.w	r3, r3, #16
 8001c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c10:	61ba      	str	r2, [r7, #24]
 8001c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	e841 2300 	strex	r3, r2, [r1]
 8001c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e5      	bne.n	8001bf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c32:	bf00      	nop
 8001c34:	3754      	adds	r7, #84	@ 0x54
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b0c0      	sub	sp, #256	@ 0x100
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	ea40 0301 	orr.w	r3, r0, r1
 8001c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c98:	f021 010c 	bic.w	r1, r1, #12
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cba:	6999      	ldr	r1, [r3, #24]
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	ea40 0301 	orr.w	r3, r0, r1
 8001cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b8f      	ldr	r3, [pc, #572]	@ (8001f0c <UART_SetConfig+0x2cc>)
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d005      	beq.n	8001ce0 <UART_SetConfig+0xa0>
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b8d      	ldr	r3, [pc, #564]	@ (8001f10 <UART_SetConfig+0x2d0>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d104      	bne.n	8001cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ce0:	f7ff f9c2 	bl	8001068 <HAL_RCC_GetPCLK2Freq>
 8001ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ce8:	e003      	b.n	8001cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cea:	f7ff f9a9 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 8001cee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cfc:	f040 810c 	bne.w	8001f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d04:	2200      	movs	r2, #0
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d12:	4622      	mov	r2, r4
 8001d14:	462b      	mov	r3, r5
 8001d16:	1891      	adds	r1, r2, r2
 8001d18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d1a:	415b      	adcs	r3, r3
 8001d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d22:	4621      	mov	r1, r4
 8001d24:	eb12 0801 	adds.w	r8, r2, r1
 8001d28:	4629      	mov	r1, r5
 8001d2a:	eb43 0901 	adc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d50:	462b      	mov	r3, r5
 8001d52:	eb49 0303 	adc.w	r3, r9, r3
 8001d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d6e:	460b      	mov	r3, r1
 8001d70:	18db      	adds	r3, r3, r3
 8001d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d74:	4613      	mov	r3, r2
 8001d76:	eb42 0303 	adc.w	r3, r2, r3
 8001d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d84:	f7fe fa7c 	bl	8000280 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	011c      	lsls	r4, r3, #4
 8001d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001da0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	1891      	adds	r1, r2, r2
 8001dae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001db0:	415b      	adcs	r3, r3
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001db8:	4641      	mov	r1, r8
 8001dba:	eb12 0a01 	adds.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dd8:	4692      	mov	sl, r2
 8001dda:	469b      	mov	fp, r3
 8001ddc:	4643      	mov	r3, r8
 8001dde:	eb1a 0303 	adds.w	r3, sl, r3
 8001de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001de6:	464b      	mov	r3, r9
 8001de8:	eb4b 0303 	adc.w	r3, fp, r3
 8001dec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e04:	460b      	mov	r3, r1
 8001e06:	18db      	adds	r3, r3, r3
 8001e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	eb42 0303 	adc.w	r3, r2, r3
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e1a:	f7fe fa31 	bl	8000280 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001e26:	fba3 2301 	umull	r2, r3, r3, r1
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2264      	movs	r2, #100	@ 0x64
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e3a:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e48:	441c      	add	r4, r3
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1891      	adds	r1, r2, r2
 8001e62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e64:	415b      	adcs	r3, r3
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	1851      	adds	r1, r2, r1
 8001e70:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e72:	4649      	mov	r1, r9
 8001e74:	414b      	adcs	r3, r1
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e84:	4659      	mov	r1, fp
 8001e86:	00cb      	lsls	r3, r1, #3
 8001e88:	4651      	mov	r1, sl
 8001e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e8e:	4651      	mov	r1, sl
 8001e90:	00ca      	lsls	r2, r1, #3
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	4642      	mov	r2, r8
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	eb42 0303 	adc.w	r3, r2, r3
 8001ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	18db      	adds	r3, r3, r3
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001ed6:	f7fe f9d3 	bl	8000280 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	2164      	movs	r1, #100	@ 0x64
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	3332      	adds	r3, #50	@ 0x32
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <UART_SetConfig+0x2d4>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4422      	add	r2, r4
 8001f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f08:	e106      	b.n	8002118 <UART_SetConfig+0x4d8>
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	1891      	adds	r1, r2, r2
 8001f30:	6239      	str	r1, [r7, #32]
 8001f32:	415b      	adcs	r3, r3
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	1854      	adds	r4, r2, r1
 8001f3e:	4649      	mov	r1, r9
 8001f40:	eb43 0501 	adc.w	r5, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f60:	464b      	mov	r3, r9
 8001f62:	eb45 0303 	adc.w	r3, r5, r3
 8001f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f86:	4629      	mov	r1, r5
 8001f88:	008b      	lsls	r3, r1, #2
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f90:	4621      	mov	r1, r4
 8001f92:	008a      	lsls	r2, r1, #2
 8001f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f98:	f7fe f972 	bl	8000280 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4b60      	ldr	r3, [pc, #384]	@ (8002124 <UART_SetConfig+0x4e4>)
 8001fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	011c      	lsls	r4, r3, #4
 8001faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	1891      	adds	r1, r2, r2
 8001fc2:	61b9      	str	r1, [r7, #24]
 8001fc4:	415b      	adcs	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	4641      	mov	r1, r8
 8001fce:	1851      	adds	r1, r2, r1
 8001fd0:	6139      	str	r1, [r7, #16]
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	414b      	adcs	r3, r1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	00cb      	lsls	r3, r1, #3
 8001fe8:	4651      	mov	r1, sl
 8001fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fee:	4651      	mov	r1, sl
 8001ff0:	00ca      	lsls	r2, r1, #3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	189b      	adds	r3, r3, r2
 8001ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002000:	464b      	mov	r3, r9
 8002002:	460a      	mov	r2, r1
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002024:	4649      	mov	r1, r9
 8002026:	008b      	lsls	r3, r1, #2
 8002028:	4641      	mov	r1, r8
 800202a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800202e:	4641      	mov	r1, r8
 8002030:	008a      	lsls	r2, r1, #2
 8002032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002036:	f7fe f923 	bl	8000280 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4611      	mov	r1, r2
 8002040:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002042:	fba3 2301 	umull	r2, r3, r3, r1
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2264      	movs	r2, #100	@ 0x64
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	1acb      	subs	r3, r1, r3
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	3332      	adds	r3, #50	@ 0x32
 8002054:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002060:	441c      	add	r4, r3
 8002062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002066:	2200      	movs	r2, #0
 8002068:	673b      	str	r3, [r7, #112]	@ 0x70
 800206a:	677a      	str	r2, [r7, #116]	@ 0x74
 800206c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002070:	4642      	mov	r2, r8
 8002072:	464b      	mov	r3, r9
 8002074:	1891      	adds	r1, r2, r2
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	415b      	adcs	r3, r3
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002080:	4641      	mov	r1, r8
 8002082:	1851      	adds	r1, r2, r1
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	4649      	mov	r1, r9
 8002088:	414b      	adcs	r3, r1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002098:	4659      	mov	r1, fp
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	4651      	mov	r1, sl
 800209e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a2:	4651      	mov	r1, sl
 80020a4:	00ca      	lsls	r2, r1, #3
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	4642      	mov	r2, r8
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020b2:	464b      	mov	r3, r9
 80020b4:	460a      	mov	r2, r1
 80020b6:	eb42 0303 	adc.w	r3, r2, r3
 80020ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80020c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80020d4:	4649      	mov	r1, r9
 80020d6:	008b      	lsls	r3, r1, #2
 80020d8:	4641      	mov	r1, r8
 80020da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020de:	4641      	mov	r1, r8
 80020e0:	008a      	lsls	r2, r1, #2
 80020e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020e6:	f7fe f8cb 	bl	8000280 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <UART_SetConfig+0x4e4>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2164      	movs	r1, #100	@ 0x64
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	3332      	adds	r3, #50	@ 0x32
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <UART_SetConfig+0x4e4>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	f003 020f 	and.w	r2, r3, #15
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4422      	add	r2, r4
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800211e:	46bd      	mov	sp, r7
 8002120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002124:	51eb851f 	.word	0x51eb851f

08002128 <__io_putchar>:


RTC_HandleTypeDef RtcHandle;

int __io_putchar(int ch)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10) ;
 8002130:	1d39      	adds	r1, r7, #4
 8002132:	230a      	movs	r3, #10
 8002134:	2201      	movs	r2, #1
 8002136:	4804      	ldr	r0, [pc, #16]	@ (8002148 <__io_putchar+0x20>)
 8002138:	f7ff fc3a 	bl	80019b0 <HAL_UART_Transmit>
	return ch ;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000088 	.word	0x20000088

0800214c <main>:
void rtc_init(void);
void rtc_calendar_config(void);
void rtc_calendar_show(uint8_t *showtime, uint8_t *showdate);

int main()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

	HAL_Init() ;
 8002150:	f7fe fa0e 	bl	8000570 <HAL_Init>
	uart_init() ;
 8002154:	f000 f8d4 	bl	8002300 <uart_init>

	__HAL_RTC_RESET_HANDLE_STATE(&RtcHandle);
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <main+0x38>)
 800215a:	2200      	movs	r2, #0
 800215c:	775a      	strb	r2, [r3, #29]

	rtc_init();
 800215e:	f000 f817 	bl	8002190 <rtc_init>

	if(HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0) != BK_FLAG)
 8002162:	2100      	movs	r1, #0
 8002164:	4807      	ldr	r0, [pc, #28]	@ (8002184 <main+0x38>)
 8002166:	f7ff fbb1 	bl	80018cc <HAL_RTCEx_BKUPRead>
 800216a:	4603      	mov	r3, r0
 800216c:	f648 0288 	movw	r2, #34952	@ 0x8888
 8002170:	4293      	cmp	r3, r2
 8002172:	d001      	beq.n	8002178 <main+0x2c>
	{
		rtc_calendar_config();
 8002174:	f000 f842 	bl	80021fc <rtc_calendar_config>



	while(1)
	{
		rtc_calendar_show(time, date);
 8002178:	4903      	ldr	r1, [pc, #12]	@ (8002188 <main+0x3c>)
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <main+0x40>)
 800217c:	f000 f86e 	bl	800225c <rtc_calendar_show>
 8002180:	e7fa      	b.n	8002178 <main+0x2c>
 8002182:	bf00      	nop
 8002184:	200000d0 	.word	0x200000d0
 8002188:	20000100 	.word	0x20000100
 800218c:	200000f0 	.word	0x200000f0

08002190 <rtc_init>:
}



void rtc_init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	@ 0x48
 8002194:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef			RCC_OscInitStruct;
	RCC_PeriphCLKInitTypeDef	PeriphClkInitStruct;

	//Turn off LSE and turn on LSI
	RCC_OscInitStruct.OscillatorType	= RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8002196:	230c      	movs	r3, #12
 8002198:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSEState			= RCC_LSE_OFF;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState			= RCC_LSI_ON;
 800219e:	2301      	movs	r3, #1
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fcc6 	bl	8000b38 <HAL_RCC_OscConfig>

	//Set RTC clock src to LSI
	PeriphClkInitStruct.PeriphClockSelection	= RCC_PERIPHCLK_RTC;
 80021ac:	2302      	movs	r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.RTCClockSelection		= RCC_RTCCLKSOURCE_LSI;
 80021b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b4:	613b      	str	r3, [r7, #16]

	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ff69 	bl	8001090 <HAL_RCCEx_PeriphCLKConfig>

	//Enable RTC clock
	__HAL_RCC_RTC_ENABLE();
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <rtc_init+0x60>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

	//Configure calendar

	RtcHandle.Instance			= RTC;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <rtc_init+0x64>)
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <rtc_init+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
	RtcHandle.Init.HourFormat	= RTC_HOURFORMAT_24;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <rtc_init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
	RtcHandle.Init.AsynchPrediv	= RTC_ASYNCH_PREDIV;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <rtc_init+0x64>)
 80021d2:	227f      	movs	r2, #127	@ 0x7f
 80021d4:	609a      	str	r2, [r3, #8]
	RtcHandle.Init.SynchPrediv	= RTC_SYNCH_PREDIV;
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <rtc_init+0x64>)
 80021d8:	22f9      	movs	r2, #249	@ 0xf9
 80021da:	60da      	str	r2, [r3, #12]
	RtcHandle.Init.OutPut		= RTC_OUTPUT_DISABLE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <rtc_init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]

	HAL_RTC_Init(&RtcHandle);
 80021e2:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <rtc_init+0x64>)
 80021e4:	f7ff f842 	bl	800126c <HAL_RTC_Init>




}
 80021e8:	bf00      	nop
 80021ea:	3748      	adds	r7, #72	@ 0x48
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	42470e3c 	.word	0x42470e3c
 80021f4:	200000d0 	.word	0x200000d0
 80021f8:	40002800 	.word	0x40002800

080021fc <rtc_calendar_config>:


void rtc_calendar_config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
	RTC_DateTypeDef sdatestructure;
	RTC_TimeTypeDef stimestructure;

	//Set Date: Sunday JULY 14th 2019
	sdatestructure.Year		= 0x19;
 8002202:	2319      	movs	r3, #25
 8002204:	75fb      	strb	r3, [r7, #23]
	sdatestructure.Month	= RTC_MONTH_JULY;
 8002206:	2307      	movs	r3, #7
 8002208:	757b      	strb	r3, [r7, #21]
	sdatestructure.Date		= 0x14;
 800220a:	2314      	movs	r3, #20
 800220c:	75bb      	strb	r3, [r7, #22]
	sdatestructure.WeekDay	= RTC_WEEKDAY_SUNDAY;
 800220e:	2307      	movs	r3, #7
 8002210:	753b      	strb	r3, [r7, #20]

	HAL_RTC_SetDate(&RtcHandle, &sdatestructure, RTC_FORMAT_BCD);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	2201      	movs	r2, #1
 8002218:	4619      	mov	r1, r3
 800221a:	480f      	ldr	r0, [pc, #60]	@ (8002258 <rtc_calendar_config+0x5c>)
 800221c:	f7ff f9ab 	bl	8001576 <HAL_RTC_SetDate>

	stimestructure.Hours 			= 0x03;
 8002220:	2303      	movs	r3, #3
 8002222:	703b      	strb	r3, [r7, #0]
	stimestructure.Minutes 			= 0x00;
 8002224:	2300      	movs	r3, #0
 8002226:	707b      	strb	r3, [r7, #1]
	stimestructure.Seconds 			= 0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	70bb      	strb	r3, [r7, #2]
	stimestructure.TimeFormat 		= RTC_HOURFORMAT12_AM;
 800222c:	2300      	movs	r3, #0
 800222e:	70fb      	strb	r3, [r7, #3]
	stimestructure.DayLightSaving 	= RTC_DAYLIGHTSAVING_NONE;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
	stimestructure.StoreOperation	= RTC_STOREOPERATION_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]

	HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BCD);
 8002238:	463b      	mov	r3, r7
 800223a:	2201      	movs	r2, #1
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	@ (8002258 <rtc_calendar_config+0x5c>)
 8002240:	f7ff f8a1 	bl	8001386 <HAL_RTC_SetTime>

	//write to backup register
	HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, BK_FLAG);
 8002244:	f648 0288 	movw	r2, #34952	@ 0x8888
 8002248:	2100      	movs	r1, #0
 800224a:	4803      	ldr	r0, [pc, #12]	@ (8002258 <rtc_calendar_config+0x5c>)
 800224c:	f7ff fb24 	bl	8001898 <HAL_RTCEx_BKUPWrite>


}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200000d0 	.word	0x200000d0

0800225c <rtc_calendar_show>:


void rtc_calendar_show(uint8_t *showtime, uint8_t *showdate)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	2200      	movs	r2, #0
 800226c:	4619      	mov	r1, r3
 800226e:	481c      	ldr	r0, [pc, #112]	@ (80022e0 <rtc_calendar_show+0x84>)
 8002270:	f7ff f923 	bl	80014ba <HAL_RTC_GetTime>

	HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	4818      	ldr	r0, [pc, #96]	@ (80022e0 <rtc_calendar_show+0x84>)
 800227e:	f7ff f9fe 	bl	800167e <HAL_RTC_GetDate>

	sprintf((char*)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8002282:	7a3b      	ldrb	r3, [r7, #8]
 8002284:	461a      	mov	r2, r3
 8002286:	7a7b      	ldrb	r3, [r7, #9]
 8002288:	4619      	mov	r1, r3
 800228a:	7abb      	ldrb	r3, [r7, #10]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	4914      	ldr	r1, [pc, #80]	@ (80022e4 <rtc_calendar_show+0x88>)
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fa36 	bl	8002704 <siprintf>

	sprintf((char*)showtime, "%02d-%02d-%02d", sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 8002298:	7f7b      	ldrb	r3, [r7, #29]
 800229a:	461a      	mov	r2, r3
 800229c:	7fbb      	ldrb	r3, [r7, #30]
 800229e:	4619      	mov	r1, r3
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	490f      	ldr	r1, [pc, #60]	@ (80022e8 <rtc_calendar_show+0x8c>)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa29 	bl	8002704 <siprintf>

	printf(" Time : %02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80022b2:	7a3b      	ldrb	r3, [r7, #8]
 80022b4:	4619      	mov	r1, r3
 80022b6:	7a7b      	ldrb	r3, [r7, #9]
 80022b8:	461a      	mov	r2, r3
 80022ba:	7abb      	ldrb	r3, [r7, #10]
 80022bc:	480b      	ldr	r0, [pc, #44]	@ (80022ec <rtc_calendar_show+0x90>)
 80022be:	f000 fa0f 	bl	80026e0 <iprintf>
	printf(" Date : %02d-%02d-%02d", sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 80022c2:	7f7b      	ldrb	r3, [r7, #29]
 80022c4:	4619      	mov	r1, r3
 80022c6:	7fbb      	ldrb	r3, [r7, #30]
 80022c8:	461a      	mov	r2, r3
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
 80022cc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <rtc_calendar_show+0x94>)
 80022d2:	f000 fa05 	bl	80026e0 <iprintf>

}
 80022d6:	bf00      	nop
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200000d0 	.word	0x200000d0
 80022e4:	08003780 	.word	0x08003780
 80022e8:	08003790 	.word	0x08003790
 80022ec:	080037a0 	.word	0x080037a0
 80022f0:	080037b8 	.word	0x080037b8

080022f4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HAL_IncTick() ;
 80022f8:	f7fe f994 	bl	8000624 <HAL_IncTick>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <uart_init>:


void uart_init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0} ;
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

	//Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <uart_init+0xb0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a24      	ldr	r2, [pc, #144]	@ (80023b0 <uart_init+0xb0>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <uart_init+0xb0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE() ;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <uart_init+0xb0>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <uart_init+0xb0>)
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <uart_init+0xb0>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

	GPIO_InitStruct.Pin 		= GPIO_PIN_2 | GPIO_PIN_3 ;
 800234e:	230c      	movs	r3, #12
 8002350:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP ;
 8002352:	2302      	movs	r3, #2
 8002354:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2 ;
 8002356:	2307      	movs	r3, #7
 8002358:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull		= GPIO_NOPULL ;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_VERY_HIGH ;
 800235e:	2303      	movs	r3, #3
 8002360:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct) ;
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	4619      	mov	r1, r3
 8002368:	4812      	ldr	r0, [pc, #72]	@ (80023b4 <uart_init+0xb4>)
 800236a:	f7fe fa61 	bl	8000830 <HAL_GPIO_Init>

	//Configure UART
	huart2.Instance 		 = USART2 ;
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <uart_init+0xb8>)
 8002370:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <uart_init+0xbc>)
 8002372:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate	 = 115200 ;
 8002374:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <uart_init+0xb8>)
 8002376:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800237a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength	 = UART_WORDLENGTH_8B ;
 800237c:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <uart_init+0xb8>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits	 = UART_STOPBITS_1 ;
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <uart_init+0xb8>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity		 = UART_PARITY_NONE ;
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <uart_init+0xb8>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode		 = UART_MODE_TX ;
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <uart_init+0xb8>)
 8002390:	2208      	movs	r2, #8
 8002392:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl 	 = UART_HWCONTROL_NONE ;
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <uart_init+0xb8>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16 ;
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <uart_init+0xb8>)
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2) ;
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <uart_init+0xb8>)
 80023a2:	f7ff faab 	bl	80018fc <HAL_UART_Init>




}
 80023a6:	bf00      	nop
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	20000088 	.word	0x20000088
 80023bc:	40004400 	.word	0x40004400

080023c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e00a      	b.n	80023e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023d2:	f3af 8000 	nop.w
 80023d6:	4601      	mov	r1, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	60ba      	str	r2, [r7, #8]
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dbf0      	blt.n	80023d2 <_read+0x12>
  }

  return len;
 80023f0:	687b      	ldr	r3, [r7, #4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e009      	b.n	8002420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe87 	bl	8002128 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	dbf1      	blt.n	800240c <_write+0x12>
  }
  return len;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_close>:

int _close(int file)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800245a:	605a      	str	r2, [r3, #4]
  return 0;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_isatty>:

int _isatty(int file)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <_sbrk+0x5c>)
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <_sbrk+0x60>)
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <_sbrk+0x64>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <_sbrk+0x68>)
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d207      	bcs.n	80024dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024cc:	f000 f9cc 	bl	8002868 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	220c      	movs	r2, #12
 80024d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e009      	b.n	80024f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	4a05      	ldr	r2, [pc, #20]	@ (8002500 <_sbrk+0x64>)
 80024ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20018000 	.word	0x20018000
 80024fc:	00000400 	.word	0x00000400
 8002500:	20000110 	.word	0x20000110
 8002504:	20000260 	.word	0x20000260

08002508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002508:	480d      	ldr	r0, [pc, #52]	@ (8002540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800250a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800250c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopForever+0x6>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopForever+0xe>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopForever+0x16>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002536:	f000 f99d 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800253a:	f7ff fe07 	bl	800214c <main>

0800253e <LoopForever>:

LoopForever:
  b LoopForever
 800253e:	e7fe      	b.n	800253e <LoopForever>
  ldr   r0, =_estack
 8002540:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800254c:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8002550:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002554:	20000260 	.word	0x20000260

08002558 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <std>:
 800255c:	2300      	movs	r3, #0
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
 8002562:	e9c0 3300 	strd	r3, r3, [r0]
 8002566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800256a:	6083      	str	r3, [r0, #8]
 800256c:	8181      	strh	r1, [r0, #12]
 800256e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002570:	81c2      	strh	r2, [r0, #14]
 8002572:	6183      	str	r3, [r0, #24]
 8002574:	4619      	mov	r1, r3
 8002576:	2208      	movs	r2, #8
 8002578:	305c      	adds	r0, #92	@ 0x5c
 800257a:	f000 f926 	bl	80027ca <memset>
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <std+0x58>)
 8002580:	6263      	str	r3, [r4, #36]	@ 0x24
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <std+0x5c>)
 8002584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <std+0x60>)
 8002588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <std+0x64>)
 800258c:	6323      	str	r3, [r4, #48]	@ 0x30
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <std+0x68>)
 8002590:	6224      	str	r4, [r4, #32]
 8002592:	429c      	cmp	r4, r3
 8002594:	d006      	beq.n	80025a4 <std+0x48>
 8002596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800259a:	4294      	cmp	r4, r2
 800259c:	d002      	beq.n	80025a4 <std+0x48>
 800259e:	33d0      	adds	r3, #208	@ 0xd0
 80025a0:	429c      	cmp	r4, r3
 80025a2:	d105      	bne.n	80025b0 <std+0x54>
 80025a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ac:	f000 b986 	b.w	80028bc <__retarget_lock_init_recursive>
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	bf00      	nop
 80025b4:	08002745 	.word	0x08002745
 80025b8:	08002767 	.word	0x08002767
 80025bc:	0800279f 	.word	0x0800279f
 80025c0:	080027c3 	.word	0x080027c3
 80025c4:	20000114 	.word	0x20000114

080025c8 <stdio_exit_handler>:
 80025c8:	4a02      	ldr	r2, [pc, #8]	@ (80025d4 <stdio_exit_handler+0xc>)
 80025ca:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <stdio_exit_handler+0x10>)
 80025cc:	4803      	ldr	r0, [pc, #12]	@ (80025dc <stdio_exit_handler+0x14>)
 80025ce:	f000 b869 	b.w	80026a4 <_fwalk_sglue>
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	0800340d 	.word	0x0800340d
 80025dc:	2000001c 	.word	0x2000001c

080025e0 <cleanup_stdio>:
 80025e0:	6841      	ldr	r1, [r0, #4]
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <cleanup_stdio+0x34>)
 80025e4:	4299      	cmp	r1, r3
 80025e6:	b510      	push	{r4, lr}
 80025e8:	4604      	mov	r4, r0
 80025ea:	d001      	beq.n	80025f0 <cleanup_stdio+0x10>
 80025ec:	f000 ff0e 	bl	800340c <_fflush_r>
 80025f0:	68a1      	ldr	r1, [r4, #8]
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <cleanup_stdio+0x38>)
 80025f4:	4299      	cmp	r1, r3
 80025f6:	d002      	beq.n	80025fe <cleanup_stdio+0x1e>
 80025f8:	4620      	mov	r0, r4
 80025fa:	f000 ff07 	bl	800340c <_fflush_r>
 80025fe:	68e1      	ldr	r1, [r4, #12]
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <cleanup_stdio+0x3c>)
 8002602:	4299      	cmp	r1, r3
 8002604:	d004      	beq.n	8002610 <cleanup_stdio+0x30>
 8002606:	4620      	mov	r0, r4
 8002608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800260c:	f000 befe 	b.w	800340c <_fflush_r>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	20000114 	.word	0x20000114
 8002618:	2000017c 	.word	0x2000017c
 800261c:	200001e4 	.word	0x200001e4

08002620 <global_stdio_init.part.0>:
 8002620:	b510      	push	{r4, lr}
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <global_stdio_init.part.0+0x30>)
 8002624:	4c0b      	ldr	r4, [pc, #44]	@ (8002654 <global_stdio_init.part.0+0x34>)
 8002626:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <global_stdio_init.part.0+0x38>)
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4620      	mov	r0, r4
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	f7ff ff94 	bl	800255c <std>
 8002634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002638:	2201      	movs	r2, #1
 800263a:	2109      	movs	r1, #9
 800263c:	f7ff ff8e 	bl	800255c <std>
 8002640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002644:	2202      	movs	r2, #2
 8002646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264a:	2112      	movs	r1, #18
 800264c:	f7ff bf86 	b.w	800255c <std>
 8002650:	2000024c 	.word	0x2000024c
 8002654:	20000114 	.word	0x20000114
 8002658:	080025c9 	.word	0x080025c9

0800265c <__sfp_lock_acquire>:
 800265c:	4801      	ldr	r0, [pc, #4]	@ (8002664 <__sfp_lock_acquire+0x8>)
 800265e:	f000 b92e 	b.w	80028be <__retarget_lock_acquire_recursive>
 8002662:	bf00      	nop
 8002664:	20000255 	.word	0x20000255

08002668 <__sfp_lock_release>:
 8002668:	4801      	ldr	r0, [pc, #4]	@ (8002670 <__sfp_lock_release+0x8>)
 800266a:	f000 b929 	b.w	80028c0 <__retarget_lock_release_recursive>
 800266e:	bf00      	nop
 8002670:	20000255 	.word	0x20000255

08002674 <__sinit>:
 8002674:	b510      	push	{r4, lr}
 8002676:	4604      	mov	r4, r0
 8002678:	f7ff fff0 	bl	800265c <__sfp_lock_acquire>
 800267c:	6a23      	ldr	r3, [r4, #32]
 800267e:	b11b      	cbz	r3, 8002688 <__sinit+0x14>
 8002680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002684:	f7ff bff0 	b.w	8002668 <__sfp_lock_release>
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <__sinit+0x28>)
 800268a:	6223      	str	r3, [r4, #32]
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <__sinit+0x2c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f5      	bne.n	8002680 <__sinit+0xc>
 8002694:	f7ff ffc4 	bl	8002620 <global_stdio_init.part.0>
 8002698:	e7f2      	b.n	8002680 <__sinit+0xc>
 800269a:	bf00      	nop
 800269c:	080025e1 	.word	0x080025e1
 80026a0:	2000024c 	.word	0x2000024c

080026a4 <_fwalk_sglue>:
 80026a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026a8:	4607      	mov	r7, r0
 80026aa:	4688      	mov	r8, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	2600      	movs	r6, #0
 80026b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026b4:	f1b9 0901 	subs.w	r9, r9, #1
 80026b8:	d505      	bpl.n	80026c6 <_fwalk_sglue+0x22>
 80026ba:	6824      	ldr	r4, [r4, #0]
 80026bc:	2c00      	cmp	r4, #0
 80026be:	d1f7      	bne.n	80026b0 <_fwalk_sglue+0xc>
 80026c0:	4630      	mov	r0, r6
 80026c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026c6:	89ab      	ldrh	r3, [r5, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d907      	bls.n	80026dc <_fwalk_sglue+0x38>
 80026cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026d0:	3301      	adds	r3, #1
 80026d2:	d003      	beq.n	80026dc <_fwalk_sglue+0x38>
 80026d4:	4629      	mov	r1, r5
 80026d6:	4638      	mov	r0, r7
 80026d8:	47c0      	blx	r8
 80026da:	4306      	orrs	r6, r0
 80026dc:	3568      	adds	r5, #104	@ 0x68
 80026de:	e7e9      	b.n	80026b4 <_fwalk_sglue+0x10>

080026e0 <iprintf>:
 80026e0:	b40f      	push	{r0, r1, r2, r3}
 80026e2:	b507      	push	{r0, r1, r2, lr}
 80026e4:	4906      	ldr	r1, [pc, #24]	@ (8002700 <iprintf+0x20>)
 80026e6:	ab04      	add	r3, sp, #16
 80026e8:	6808      	ldr	r0, [r1, #0]
 80026ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80026ee:	6881      	ldr	r1, [r0, #8]
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	f000 fb61 	bl	8002db8 <_vfiprintf_r>
 80026f6:	b003      	add	sp, #12
 80026f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026fc:	b004      	add	sp, #16
 80026fe:	4770      	bx	lr
 8002700:	20000018 	.word	0x20000018

08002704 <siprintf>:
 8002704:	b40e      	push	{r1, r2, r3}
 8002706:	b500      	push	{lr}
 8002708:	b09c      	sub	sp, #112	@ 0x70
 800270a:	ab1d      	add	r3, sp, #116	@ 0x74
 800270c:	9002      	str	r0, [sp, #8]
 800270e:	9006      	str	r0, [sp, #24]
 8002710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002714:	4809      	ldr	r0, [pc, #36]	@ (800273c <siprintf+0x38>)
 8002716:	9107      	str	r1, [sp, #28]
 8002718:	9104      	str	r1, [sp, #16]
 800271a:	4909      	ldr	r1, [pc, #36]	@ (8002740 <siprintf+0x3c>)
 800271c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002720:	9105      	str	r1, [sp, #20]
 8002722:	6800      	ldr	r0, [r0, #0]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	a902      	add	r1, sp, #8
 8002728:	f000 fa20 	bl	8002b6c <_svfiprintf_r>
 800272c:	9b02      	ldr	r3, [sp, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	b01c      	add	sp, #112	@ 0x70
 8002734:	f85d eb04 	ldr.w	lr, [sp], #4
 8002738:	b003      	add	sp, #12
 800273a:	4770      	bx	lr
 800273c:	20000018 	.word	0x20000018
 8002740:	ffff0208 	.word	0xffff0208

08002744 <__sread>:
 8002744:	b510      	push	{r4, lr}
 8002746:	460c      	mov	r4, r1
 8002748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274c:	f000 f868 	bl	8002820 <_read_r>
 8002750:	2800      	cmp	r0, #0
 8002752:	bfab      	itete	ge
 8002754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002756:	89a3      	ldrhlt	r3, [r4, #12]
 8002758:	181b      	addge	r3, r3, r0
 800275a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800275e:	bfac      	ite	ge
 8002760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002762:	81a3      	strhlt	r3, [r4, #12]
 8002764:	bd10      	pop	{r4, pc}

08002766 <__swrite>:
 8002766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276a:	461f      	mov	r7, r3
 800276c:	898b      	ldrh	r3, [r1, #12]
 800276e:	05db      	lsls	r3, r3, #23
 8002770:	4605      	mov	r5, r0
 8002772:	460c      	mov	r4, r1
 8002774:	4616      	mov	r6, r2
 8002776:	d505      	bpl.n	8002784 <__swrite+0x1e>
 8002778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800277c:	2302      	movs	r3, #2
 800277e:	2200      	movs	r2, #0
 8002780:	f000 f83c 	bl	80027fc <_lseek_r>
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800278a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	4632      	mov	r2, r6
 8002792:	463b      	mov	r3, r7
 8002794:	4628      	mov	r0, r5
 8002796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800279a:	f000 b853 	b.w	8002844 <_write_r>

0800279e <__sseek>:
 800279e:	b510      	push	{r4, lr}
 80027a0:	460c      	mov	r4, r1
 80027a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a6:	f000 f829 	bl	80027fc <_lseek_r>
 80027aa:	1c43      	adds	r3, r0, #1
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	bf15      	itete	ne
 80027b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80027b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027ba:	81a3      	strheq	r3, [r4, #12]
 80027bc:	bf18      	it	ne
 80027be:	81a3      	strhne	r3, [r4, #12]
 80027c0:	bd10      	pop	{r4, pc}

080027c2 <__sclose>:
 80027c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c6:	f000 b809 	b.w	80027dc <_close_r>

080027ca <memset>:
 80027ca:	4402      	add	r2, r0
 80027cc:	4603      	mov	r3, r0
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d100      	bne.n	80027d4 <memset+0xa>
 80027d2:	4770      	bx	lr
 80027d4:	f803 1b01 	strb.w	r1, [r3], #1
 80027d8:	e7f9      	b.n	80027ce <memset+0x4>
	...

080027dc <_close_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4d06      	ldr	r5, [pc, #24]	@ (80027f8 <_close_r+0x1c>)
 80027e0:	2300      	movs	r3, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	602b      	str	r3, [r5, #0]
 80027e8:	f7ff fe23 	bl	8002432 <_close>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d102      	bne.n	80027f6 <_close_r+0x1a>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	b103      	cbz	r3, 80027f6 <_close_r+0x1a>
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	bd38      	pop	{r3, r4, r5, pc}
 80027f8:	20000250 	.word	0x20000250

080027fc <_lseek_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	4d07      	ldr	r5, [pc, #28]	@ (800281c <_lseek_r+0x20>)
 8002800:	4604      	mov	r4, r0
 8002802:	4608      	mov	r0, r1
 8002804:	4611      	mov	r1, r2
 8002806:	2200      	movs	r2, #0
 8002808:	602a      	str	r2, [r5, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff fe38 	bl	8002480 <_lseek>
 8002810:	1c43      	adds	r3, r0, #1
 8002812:	d102      	bne.n	800281a <_lseek_r+0x1e>
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	b103      	cbz	r3, 800281a <_lseek_r+0x1e>
 8002818:	6023      	str	r3, [r4, #0]
 800281a:	bd38      	pop	{r3, r4, r5, pc}
 800281c:	20000250 	.word	0x20000250

08002820 <_read_r>:
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4d07      	ldr	r5, [pc, #28]	@ (8002840 <_read_r+0x20>)
 8002824:	4604      	mov	r4, r0
 8002826:	4608      	mov	r0, r1
 8002828:	4611      	mov	r1, r2
 800282a:	2200      	movs	r2, #0
 800282c:	602a      	str	r2, [r5, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	f7ff fdc6 	bl	80023c0 <_read>
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d102      	bne.n	800283e <_read_r+0x1e>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	b103      	cbz	r3, 800283e <_read_r+0x1e>
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	20000250 	.word	0x20000250

08002844 <_write_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d07      	ldr	r5, [pc, #28]	@ (8002864 <_write_r+0x20>)
 8002848:	4604      	mov	r4, r0
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	2200      	movs	r2, #0
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7ff fdd1 	bl	80023fa <_write>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_write_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_write_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	20000250 	.word	0x20000250

08002868 <__errno>:
 8002868:	4b01      	ldr	r3, [pc, #4]	@ (8002870 <__errno+0x8>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000018 	.word	0x20000018

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4d0d      	ldr	r5, [pc, #52]	@ (80028ac <__libc_init_array+0x38>)
 8002878:	4c0d      	ldr	r4, [pc, #52]	@ (80028b0 <__libc_init_array+0x3c>)
 800287a:	1b64      	subs	r4, r4, r5
 800287c:	10a4      	asrs	r4, r4, #2
 800287e:	2600      	movs	r6, #0
 8002880:	42a6      	cmp	r6, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	4d0b      	ldr	r5, [pc, #44]	@ (80028b4 <__libc_init_array+0x40>)
 8002886:	4c0c      	ldr	r4, [pc, #48]	@ (80028b8 <__libc_init_array+0x44>)
 8002888:	f000 ff6e 	bl	8003768 <_init>
 800288c:	1b64      	subs	r4, r4, r5
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	2600      	movs	r6, #0
 8002892:	42a6      	cmp	r6, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	f855 3b04 	ldr.w	r3, [r5], #4
 800289c:	4798      	blx	r3
 800289e:	3601      	adds	r6, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a6:	4798      	blx	r3
 80028a8:	3601      	adds	r6, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	08003814 	.word	0x08003814
 80028b0:	08003814 	.word	0x08003814
 80028b4:	08003814 	.word	0x08003814
 80028b8:	08003818 	.word	0x08003818

080028bc <__retarget_lock_init_recursive>:
 80028bc:	4770      	bx	lr

080028be <__retarget_lock_acquire_recursive>:
 80028be:	4770      	bx	lr

080028c0 <__retarget_lock_release_recursive>:
 80028c0:	4770      	bx	lr
	...

080028c4 <_free_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4605      	mov	r5, r0
 80028c8:	2900      	cmp	r1, #0
 80028ca:	d041      	beq.n	8002950 <_free_r+0x8c>
 80028cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028d0:	1f0c      	subs	r4, r1, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfb8      	it	lt
 80028d6:	18e4      	addlt	r4, r4, r3
 80028d8:	f000 f8e0 	bl	8002a9c <__malloc_lock>
 80028dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <_free_r+0x90>)
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	b933      	cbnz	r3, 80028f0 <_free_r+0x2c>
 80028e2:	6063      	str	r3, [r4, #4]
 80028e4:	6014      	str	r4, [r2, #0]
 80028e6:	4628      	mov	r0, r5
 80028e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028ec:	f000 b8dc 	b.w	8002aa8 <__malloc_unlock>
 80028f0:	42a3      	cmp	r3, r4
 80028f2:	d908      	bls.n	8002906 <_free_r+0x42>
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	1821      	adds	r1, r4, r0
 80028f8:	428b      	cmp	r3, r1
 80028fa:	bf01      	itttt	eq
 80028fc:	6819      	ldreq	r1, [r3, #0]
 80028fe:	685b      	ldreq	r3, [r3, #4]
 8002900:	1809      	addeq	r1, r1, r0
 8002902:	6021      	streq	r1, [r4, #0]
 8002904:	e7ed      	b.n	80028e2 <_free_r+0x1e>
 8002906:	461a      	mov	r2, r3
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	b10b      	cbz	r3, 8002910 <_free_r+0x4c>
 800290c:	42a3      	cmp	r3, r4
 800290e:	d9fa      	bls.n	8002906 <_free_r+0x42>
 8002910:	6811      	ldr	r1, [r2, #0]
 8002912:	1850      	adds	r0, r2, r1
 8002914:	42a0      	cmp	r0, r4
 8002916:	d10b      	bne.n	8002930 <_free_r+0x6c>
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	4401      	add	r1, r0
 800291c:	1850      	adds	r0, r2, r1
 800291e:	4283      	cmp	r3, r0
 8002920:	6011      	str	r1, [r2, #0]
 8002922:	d1e0      	bne.n	80028e6 <_free_r+0x22>
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	6053      	str	r3, [r2, #4]
 800292a:	4408      	add	r0, r1
 800292c:	6010      	str	r0, [r2, #0]
 800292e:	e7da      	b.n	80028e6 <_free_r+0x22>
 8002930:	d902      	bls.n	8002938 <_free_r+0x74>
 8002932:	230c      	movs	r3, #12
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	e7d6      	b.n	80028e6 <_free_r+0x22>
 8002938:	6820      	ldr	r0, [r4, #0]
 800293a:	1821      	adds	r1, r4, r0
 800293c:	428b      	cmp	r3, r1
 800293e:	bf04      	itt	eq
 8002940:	6819      	ldreq	r1, [r3, #0]
 8002942:	685b      	ldreq	r3, [r3, #4]
 8002944:	6063      	str	r3, [r4, #4]
 8002946:	bf04      	itt	eq
 8002948:	1809      	addeq	r1, r1, r0
 800294a:	6021      	streq	r1, [r4, #0]
 800294c:	6054      	str	r4, [r2, #4]
 800294e:	e7ca      	b.n	80028e6 <_free_r+0x22>
 8002950:	bd38      	pop	{r3, r4, r5, pc}
 8002952:	bf00      	nop
 8002954:	2000025c 	.word	0x2000025c

08002958 <sbrk_aligned>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4e0f      	ldr	r6, [pc, #60]	@ (8002998 <sbrk_aligned+0x40>)
 800295c:	460c      	mov	r4, r1
 800295e:	6831      	ldr	r1, [r6, #0]
 8002960:	4605      	mov	r5, r0
 8002962:	b911      	cbnz	r1, 800296a <sbrk_aligned+0x12>
 8002964:	f000 fe28 	bl	80035b8 <_sbrk_r>
 8002968:	6030      	str	r0, [r6, #0]
 800296a:	4621      	mov	r1, r4
 800296c:	4628      	mov	r0, r5
 800296e:	f000 fe23 	bl	80035b8 <_sbrk_r>
 8002972:	1c43      	adds	r3, r0, #1
 8002974:	d103      	bne.n	800297e <sbrk_aligned+0x26>
 8002976:	f04f 34ff 	mov.w	r4, #4294967295
 800297a:	4620      	mov	r0, r4
 800297c:	bd70      	pop	{r4, r5, r6, pc}
 800297e:	1cc4      	adds	r4, r0, #3
 8002980:	f024 0403 	bic.w	r4, r4, #3
 8002984:	42a0      	cmp	r0, r4
 8002986:	d0f8      	beq.n	800297a <sbrk_aligned+0x22>
 8002988:	1a21      	subs	r1, r4, r0
 800298a:	4628      	mov	r0, r5
 800298c:	f000 fe14 	bl	80035b8 <_sbrk_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d1f2      	bne.n	800297a <sbrk_aligned+0x22>
 8002994:	e7ef      	b.n	8002976 <sbrk_aligned+0x1e>
 8002996:	bf00      	nop
 8002998:	20000258 	.word	0x20000258

0800299c <_malloc_r>:
 800299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029a0:	1ccd      	adds	r5, r1, #3
 80029a2:	f025 0503 	bic.w	r5, r5, #3
 80029a6:	3508      	adds	r5, #8
 80029a8:	2d0c      	cmp	r5, #12
 80029aa:	bf38      	it	cc
 80029ac:	250c      	movcc	r5, #12
 80029ae:	2d00      	cmp	r5, #0
 80029b0:	4606      	mov	r6, r0
 80029b2:	db01      	blt.n	80029b8 <_malloc_r+0x1c>
 80029b4:	42a9      	cmp	r1, r5
 80029b6:	d904      	bls.n	80029c2 <_malloc_r+0x26>
 80029b8:	230c      	movs	r3, #12
 80029ba:	6033      	str	r3, [r6, #0]
 80029bc:	2000      	movs	r0, #0
 80029be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a98 <_malloc_r+0xfc>
 80029c6:	f000 f869 	bl	8002a9c <__malloc_lock>
 80029ca:	f8d8 3000 	ldr.w	r3, [r8]
 80029ce:	461c      	mov	r4, r3
 80029d0:	bb44      	cbnz	r4, 8002a24 <_malloc_r+0x88>
 80029d2:	4629      	mov	r1, r5
 80029d4:	4630      	mov	r0, r6
 80029d6:	f7ff ffbf 	bl	8002958 <sbrk_aligned>
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	4604      	mov	r4, r0
 80029de:	d158      	bne.n	8002a92 <_malloc_r+0xf6>
 80029e0:	f8d8 4000 	ldr.w	r4, [r8]
 80029e4:	4627      	mov	r7, r4
 80029e6:	2f00      	cmp	r7, #0
 80029e8:	d143      	bne.n	8002a72 <_malloc_r+0xd6>
 80029ea:	2c00      	cmp	r4, #0
 80029ec:	d04b      	beq.n	8002a86 <_malloc_r+0xea>
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	4639      	mov	r1, r7
 80029f2:	4630      	mov	r0, r6
 80029f4:	eb04 0903 	add.w	r9, r4, r3
 80029f8:	f000 fdde 	bl	80035b8 <_sbrk_r>
 80029fc:	4581      	cmp	r9, r0
 80029fe:	d142      	bne.n	8002a86 <_malloc_r+0xea>
 8002a00:	6821      	ldr	r1, [r4, #0]
 8002a02:	1a6d      	subs	r5, r5, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	4630      	mov	r0, r6
 8002a08:	f7ff ffa6 	bl	8002958 <sbrk_aligned>
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d03a      	beq.n	8002a86 <_malloc_r+0xea>
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	442b      	add	r3, r5
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	f8d8 3000 	ldr.w	r3, [r8]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	bb62      	cbnz	r2, 8002a78 <_malloc_r+0xdc>
 8002a1e:	f8c8 7000 	str.w	r7, [r8]
 8002a22:	e00f      	b.n	8002a44 <_malloc_r+0xa8>
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	1b52      	subs	r2, r2, r5
 8002a28:	d420      	bmi.n	8002a6c <_malloc_r+0xd0>
 8002a2a:	2a0b      	cmp	r2, #11
 8002a2c:	d917      	bls.n	8002a5e <_malloc_r+0xc2>
 8002a2e:	1961      	adds	r1, r4, r5
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	6025      	str	r5, [r4, #0]
 8002a34:	bf18      	it	ne
 8002a36:	6059      	strne	r1, [r3, #4]
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	bf08      	it	eq
 8002a3c:	f8c8 1000 	streq.w	r1, [r8]
 8002a40:	5162      	str	r2, [r4, r5]
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	4630      	mov	r0, r6
 8002a46:	f000 f82f 	bl	8002aa8 <__malloc_unlock>
 8002a4a:	f104 000b 	add.w	r0, r4, #11
 8002a4e:	1d23      	adds	r3, r4, #4
 8002a50:	f020 0007 	bic.w	r0, r0, #7
 8002a54:	1ac2      	subs	r2, r0, r3
 8002a56:	bf1c      	itt	ne
 8002a58:	1a1b      	subne	r3, r3, r0
 8002a5a:	50a3      	strne	r3, [r4, r2]
 8002a5c:	e7af      	b.n	80029be <_malloc_r+0x22>
 8002a5e:	6862      	ldr	r2, [r4, #4]
 8002a60:	42a3      	cmp	r3, r4
 8002a62:	bf0c      	ite	eq
 8002a64:	f8c8 2000 	streq.w	r2, [r8]
 8002a68:	605a      	strne	r2, [r3, #4]
 8002a6a:	e7eb      	b.n	8002a44 <_malloc_r+0xa8>
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	6864      	ldr	r4, [r4, #4]
 8002a70:	e7ae      	b.n	80029d0 <_malloc_r+0x34>
 8002a72:	463c      	mov	r4, r7
 8002a74:	687f      	ldr	r7, [r7, #4]
 8002a76:	e7b6      	b.n	80029e6 <_malloc_r+0x4a>
 8002a78:	461a      	mov	r2, r3
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	d1fb      	bne.n	8002a78 <_malloc_r+0xdc>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6053      	str	r3, [r2, #4]
 8002a84:	e7de      	b.n	8002a44 <_malloc_r+0xa8>
 8002a86:	230c      	movs	r3, #12
 8002a88:	6033      	str	r3, [r6, #0]
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f000 f80c 	bl	8002aa8 <__malloc_unlock>
 8002a90:	e794      	b.n	80029bc <_malloc_r+0x20>
 8002a92:	6005      	str	r5, [r0, #0]
 8002a94:	e7d6      	b.n	8002a44 <_malloc_r+0xa8>
 8002a96:	bf00      	nop
 8002a98:	2000025c 	.word	0x2000025c

08002a9c <__malloc_lock>:
 8002a9c:	4801      	ldr	r0, [pc, #4]	@ (8002aa4 <__malloc_lock+0x8>)
 8002a9e:	f7ff bf0e 	b.w	80028be <__retarget_lock_acquire_recursive>
 8002aa2:	bf00      	nop
 8002aa4:	20000254 	.word	0x20000254

08002aa8 <__malloc_unlock>:
 8002aa8:	4801      	ldr	r0, [pc, #4]	@ (8002ab0 <__malloc_unlock+0x8>)
 8002aaa:	f7ff bf09 	b.w	80028c0 <__retarget_lock_release_recursive>
 8002aae:	bf00      	nop
 8002ab0:	20000254 	.word	0x20000254

08002ab4 <__ssputs_r>:
 8002ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab8:	688e      	ldr	r6, [r1, #8]
 8002aba:	461f      	mov	r7, r3
 8002abc:	42be      	cmp	r6, r7
 8002abe:	680b      	ldr	r3, [r1, #0]
 8002ac0:	4682      	mov	sl, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	4690      	mov	r8, r2
 8002ac6:	d82d      	bhi.n	8002b24 <__ssputs_r+0x70>
 8002ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002acc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ad0:	d026      	beq.n	8002b20 <__ssputs_r+0x6c>
 8002ad2:	6965      	ldr	r5, [r4, #20]
 8002ad4:	6909      	ldr	r1, [r1, #16]
 8002ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ada:	eba3 0901 	sub.w	r9, r3, r1
 8002ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ae2:	1c7b      	adds	r3, r7, #1
 8002ae4:	444b      	add	r3, r9
 8002ae6:	106d      	asrs	r5, r5, #1
 8002ae8:	429d      	cmp	r5, r3
 8002aea:	bf38      	it	cc
 8002aec:	461d      	movcc	r5, r3
 8002aee:	0553      	lsls	r3, r2, #21
 8002af0:	d527      	bpl.n	8002b42 <__ssputs_r+0x8e>
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7ff ff52 	bl	800299c <_malloc_r>
 8002af8:	4606      	mov	r6, r0
 8002afa:	b360      	cbz	r0, 8002b56 <__ssputs_r+0xa2>
 8002afc:	6921      	ldr	r1, [r4, #16]
 8002afe:	464a      	mov	r2, r9
 8002b00:	f000 fd6a 	bl	80035d8 <memcpy>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0e:	81a3      	strh	r3, [r4, #12]
 8002b10:	6126      	str	r6, [r4, #16]
 8002b12:	6165      	str	r5, [r4, #20]
 8002b14:	444e      	add	r6, r9
 8002b16:	eba5 0509 	sub.w	r5, r5, r9
 8002b1a:	6026      	str	r6, [r4, #0]
 8002b1c:	60a5      	str	r5, [r4, #8]
 8002b1e:	463e      	mov	r6, r7
 8002b20:	42be      	cmp	r6, r7
 8002b22:	d900      	bls.n	8002b26 <__ssputs_r+0x72>
 8002b24:	463e      	mov	r6, r7
 8002b26:	6820      	ldr	r0, [r4, #0]
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	f000 fd2a 	bl	8003584 <memmove>
 8002b30:	68a3      	ldr	r3, [r4, #8]
 8002b32:	1b9b      	subs	r3, r3, r6
 8002b34:	60a3      	str	r3, [r4, #8]
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	4433      	add	r3, r6
 8002b3a:	6023      	str	r3, [r4, #0]
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b42:	462a      	mov	r2, r5
 8002b44:	f000 fd56 	bl	80035f4 <_realloc_r>
 8002b48:	4606      	mov	r6, r0
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d1e0      	bne.n	8002b10 <__ssputs_r+0x5c>
 8002b4e:	6921      	ldr	r1, [r4, #16]
 8002b50:	4650      	mov	r0, sl
 8002b52:	f7ff feb7 	bl	80028c4 <_free_r>
 8002b56:	230c      	movs	r3, #12
 8002b58:	f8ca 3000 	str.w	r3, [sl]
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	e7e9      	b.n	8002b3e <__ssputs_r+0x8a>
	...

08002b6c <_svfiprintf_r>:
 8002b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b70:	4698      	mov	r8, r3
 8002b72:	898b      	ldrh	r3, [r1, #12]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	b09d      	sub	sp, #116	@ 0x74
 8002b78:	4607      	mov	r7, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	d510      	bpl.n	8002ba2 <_svfiprintf_r+0x36>
 8002b80:	690b      	ldr	r3, [r1, #16]
 8002b82:	b973      	cbnz	r3, 8002ba2 <_svfiprintf_r+0x36>
 8002b84:	2140      	movs	r1, #64	@ 0x40
 8002b86:	f7ff ff09 	bl	800299c <_malloc_r>
 8002b8a:	6028      	str	r0, [r5, #0]
 8002b8c:	6128      	str	r0, [r5, #16]
 8002b8e:	b930      	cbnz	r0, 8002b9e <_svfiprintf_r+0x32>
 8002b90:	230c      	movs	r3, #12
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	b01d      	add	sp, #116	@ 0x74
 8002b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9e:	2340      	movs	r3, #64	@ 0x40
 8002ba0:	616b      	str	r3, [r5, #20]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bb0:	2330      	movs	r3, #48	@ 0x30
 8002bb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002d50 <_svfiprintf_r+0x1e4>
 8002bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002bba:	f04f 0901 	mov.w	r9, #1
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bc6:	b10a      	cbz	r2, 8002bcc <_svfiprintf_r+0x60>
 8002bc8:	2a25      	cmp	r2, #37	@ 0x25
 8002bca:	d1f9      	bne.n	8002bc0 <_svfiprintf_r+0x54>
 8002bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8002bd0:	d00b      	beq.n	8002bea <_svfiprintf_r+0x7e>
 8002bd2:	465b      	mov	r3, fp
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f7ff ff6b 	bl	8002ab4 <__ssputs_r>
 8002bde:	3001      	adds	r0, #1
 8002be0:	f000 80a7 	beq.w	8002d32 <_svfiprintf_r+0x1c6>
 8002be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002be6:	445a      	add	r2, fp
 8002be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002bea:	f89a 3000 	ldrb.w	r3, [sl]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 809f 	beq.w	8002d32 <_svfiprintf_r+0x1c6>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bfe:	f10a 0a01 	add.w	sl, sl, #1
 8002c02:	9304      	str	r3, [sp, #16]
 8002c04:	9307      	str	r3, [sp, #28]
 8002c06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c0c:	4654      	mov	r4, sl
 8002c0e:	2205      	movs	r2, #5
 8002c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c14:	484e      	ldr	r0, [pc, #312]	@ (8002d50 <_svfiprintf_r+0x1e4>)
 8002c16:	f7fd fae3 	bl	80001e0 <memchr>
 8002c1a:	9a04      	ldr	r2, [sp, #16]
 8002c1c:	b9d8      	cbnz	r0, 8002c56 <_svfiprintf_r+0xea>
 8002c1e:	06d0      	lsls	r0, r2, #27
 8002c20:	bf44      	itt	mi
 8002c22:	2320      	movmi	r3, #32
 8002c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c28:	0711      	lsls	r1, r2, #28
 8002c2a:	bf44      	itt	mi
 8002c2c:	232b      	movmi	r3, #43	@ 0x2b
 8002c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c32:	f89a 3000 	ldrb.w	r3, [sl]
 8002c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c38:	d015      	beq.n	8002c66 <_svfiprintf_r+0xfa>
 8002c3a:	9a07      	ldr	r2, [sp, #28]
 8002c3c:	4654      	mov	r4, sl
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f04f 0c0a 	mov.w	ip, #10
 8002c44:	4621      	mov	r1, r4
 8002c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c4a:	3b30      	subs	r3, #48	@ 0x30
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d94b      	bls.n	8002ce8 <_svfiprintf_r+0x17c>
 8002c50:	b1b0      	cbz	r0, 8002c80 <_svfiprintf_r+0x114>
 8002c52:	9207      	str	r2, [sp, #28]
 8002c54:	e014      	b.n	8002c80 <_svfiprintf_r+0x114>
 8002c56:	eba0 0308 	sub.w	r3, r0, r8
 8002c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	9304      	str	r3, [sp, #16]
 8002c62:	46a2      	mov	sl, r4
 8002c64:	e7d2      	b.n	8002c0c <_svfiprintf_r+0xa0>
 8002c66:	9b03      	ldr	r3, [sp, #12]
 8002c68:	1d19      	adds	r1, r3, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	9103      	str	r1, [sp, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bfbb      	ittet	lt
 8002c72:	425b      	neglt	r3, r3
 8002c74:	f042 0202 	orrlt.w	r2, r2, #2
 8002c78:	9307      	strge	r3, [sp, #28]
 8002c7a:	9307      	strlt	r3, [sp, #28]
 8002c7c:	bfb8      	it	lt
 8002c7e:	9204      	strlt	r2, [sp, #16]
 8002c80:	7823      	ldrb	r3, [r4, #0]
 8002c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c84:	d10a      	bne.n	8002c9c <_svfiprintf_r+0x130>
 8002c86:	7863      	ldrb	r3, [r4, #1]
 8002c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c8a:	d132      	bne.n	8002cf2 <_svfiprintf_r+0x186>
 8002c8c:	9b03      	ldr	r3, [sp, #12]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c98:	3402      	adds	r4, #2
 8002c9a:	9305      	str	r3, [sp, #20]
 8002c9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002d60 <_svfiprintf_r+0x1f4>
 8002ca0:	7821      	ldrb	r1, [r4, #0]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4650      	mov	r0, sl
 8002ca6:	f7fd fa9b 	bl	80001e0 <memchr>
 8002caa:	b138      	cbz	r0, 8002cbc <_svfiprintf_r+0x150>
 8002cac:	9b04      	ldr	r3, [sp, #16]
 8002cae:	eba0 000a 	sub.w	r0, r0, sl
 8002cb2:	2240      	movs	r2, #64	@ 0x40
 8002cb4:	4082      	lsls	r2, r0
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	3401      	adds	r4, #1
 8002cba:	9304      	str	r3, [sp, #16]
 8002cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cc0:	4824      	ldr	r0, [pc, #144]	@ (8002d54 <_svfiprintf_r+0x1e8>)
 8002cc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cc6:	2206      	movs	r2, #6
 8002cc8:	f7fd fa8a 	bl	80001e0 <memchr>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d036      	beq.n	8002d3e <_svfiprintf_r+0x1d2>
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <_svfiprintf_r+0x1ec>)
 8002cd2:	bb1b      	cbnz	r3, 8002d1c <_svfiprintf_r+0x1b0>
 8002cd4:	9b03      	ldr	r3, [sp, #12]
 8002cd6:	3307      	adds	r3, #7
 8002cd8:	f023 0307 	bic.w	r3, r3, #7
 8002cdc:	3308      	adds	r3, #8
 8002cde:	9303      	str	r3, [sp, #12]
 8002ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ce2:	4433      	add	r3, r6
 8002ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ce6:	e76a      	b.n	8002bbe <_svfiprintf_r+0x52>
 8002ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cec:	460c      	mov	r4, r1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	e7a8      	b.n	8002c44 <_svfiprintf_r+0xd8>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	3401      	adds	r4, #1
 8002cf6:	9305      	str	r3, [sp, #20]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 0c0a 	mov.w	ip, #10
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d04:	3a30      	subs	r2, #48	@ 0x30
 8002d06:	2a09      	cmp	r2, #9
 8002d08:	d903      	bls.n	8002d12 <_svfiprintf_r+0x1a6>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0c6      	beq.n	8002c9c <_svfiprintf_r+0x130>
 8002d0e:	9105      	str	r1, [sp, #20]
 8002d10:	e7c4      	b.n	8002c9c <_svfiprintf_r+0x130>
 8002d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d16:	4604      	mov	r4, r0
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e7f0      	b.n	8002cfe <_svfiprintf_r+0x192>
 8002d1c:	ab03      	add	r3, sp, #12
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	462a      	mov	r2, r5
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <_svfiprintf_r+0x1f0>)
 8002d24:	a904      	add	r1, sp, #16
 8002d26:	4638      	mov	r0, r7
 8002d28:	f3af 8000 	nop.w
 8002d2c:	1c42      	adds	r2, r0, #1
 8002d2e:	4606      	mov	r6, r0
 8002d30:	d1d6      	bne.n	8002ce0 <_svfiprintf_r+0x174>
 8002d32:	89ab      	ldrh	r3, [r5, #12]
 8002d34:	065b      	lsls	r3, r3, #25
 8002d36:	f53f af2d 	bmi.w	8002b94 <_svfiprintf_r+0x28>
 8002d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d3c:	e72c      	b.n	8002b98 <_svfiprintf_r+0x2c>
 8002d3e:	ab03      	add	r3, sp, #12
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	462a      	mov	r2, r5
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <_svfiprintf_r+0x1f0>)
 8002d46:	a904      	add	r1, sp, #16
 8002d48:	4638      	mov	r0, r7
 8002d4a:	f000 f9bb 	bl	80030c4 <_printf_i>
 8002d4e:	e7ed      	b.n	8002d2c <_svfiprintf_r+0x1c0>
 8002d50:	080037d8 	.word	0x080037d8
 8002d54:	080037e2 	.word	0x080037e2
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	08002ab5 	.word	0x08002ab5
 8002d60:	080037de 	.word	0x080037de

08002d64 <__sfputc_r>:
 8002d64:	6893      	ldr	r3, [r2, #8]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	b410      	push	{r4}
 8002d6c:	6093      	str	r3, [r2, #8]
 8002d6e:	da08      	bge.n	8002d82 <__sfputc_r+0x1e>
 8002d70:	6994      	ldr	r4, [r2, #24]
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	db01      	blt.n	8002d7a <__sfputc_r+0x16>
 8002d76:	290a      	cmp	r1, #10
 8002d78:	d103      	bne.n	8002d82 <__sfputc_r+0x1e>
 8002d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d7e:	f000 bb6d 	b.w	800345c <__swbuf_r>
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	1c58      	adds	r0, r3, #1
 8002d86:	6010      	str	r0, [r2, #0]
 8002d88:	7019      	strb	r1, [r3, #0]
 8002d8a:	4608      	mov	r0, r1
 8002d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <__sfputs_r>:
 8002d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d94:	4606      	mov	r6, r0
 8002d96:	460f      	mov	r7, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	18d5      	adds	r5, r2, r3
 8002d9c:	42ac      	cmp	r4, r5
 8002d9e:	d101      	bne.n	8002da4 <__sfputs_r+0x12>
 8002da0:	2000      	movs	r0, #0
 8002da2:	e007      	b.n	8002db4 <__sfputs_r+0x22>
 8002da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da8:	463a      	mov	r2, r7
 8002daa:	4630      	mov	r0, r6
 8002dac:	f7ff ffda 	bl	8002d64 <__sfputc_r>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d1f3      	bne.n	8002d9c <__sfputs_r+0xa>
 8002db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002db8 <_vfiprintf_r>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	b09d      	sub	sp, #116	@ 0x74
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	4698      	mov	r8, r3
 8002dc4:	4606      	mov	r6, r0
 8002dc6:	b118      	cbz	r0, 8002dd0 <_vfiprintf_r+0x18>
 8002dc8:	6a03      	ldr	r3, [r0, #32]
 8002dca:	b90b      	cbnz	r3, 8002dd0 <_vfiprintf_r+0x18>
 8002dcc:	f7ff fc52 	bl	8002674 <__sinit>
 8002dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002dd2:	07d9      	lsls	r1, r3, #31
 8002dd4:	d405      	bmi.n	8002de2 <_vfiprintf_r+0x2a>
 8002dd6:	89ab      	ldrh	r3, [r5, #12]
 8002dd8:	059a      	lsls	r2, r3, #22
 8002dda:	d402      	bmi.n	8002de2 <_vfiprintf_r+0x2a>
 8002ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002dde:	f7ff fd6e 	bl	80028be <__retarget_lock_acquire_recursive>
 8002de2:	89ab      	ldrh	r3, [r5, #12]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	d501      	bpl.n	8002dec <_vfiprintf_r+0x34>
 8002de8:	692b      	ldr	r3, [r5, #16]
 8002dea:	b99b      	cbnz	r3, 8002e14 <_vfiprintf_r+0x5c>
 8002dec:	4629      	mov	r1, r5
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 fb72 	bl	80034d8 <__swsetup_r>
 8002df4:	b170      	cbz	r0, 8002e14 <_vfiprintf_r+0x5c>
 8002df6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002df8:	07dc      	lsls	r4, r3, #31
 8002dfa:	d504      	bpl.n	8002e06 <_vfiprintf_r+0x4e>
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	b01d      	add	sp, #116	@ 0x74
 8002e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e06:	89ab      	ldrh	r3, [r5, #12]
 8002e08:	0598      	lsls	r0, r3, #22
 8002e0a:	d4f7      	bmi.n	8002dfc <_vfiprintf_r+0x44>
 8002e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e0e:	f7ff fd57 	bl	80028c0 <__retarget_lock_release_recursive>
 8002e12:	e7f3      	b.n	8002dfc <_vfiprintf_r+0x44>
 8002e14:	2300      	movs	r3, #0
 8002e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e22:	2330      	movs	r3, #48	@ 0x30
 8002e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002fd4 <_vfiprintf_r+0x21c>
 8002e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e2c:	f04f 0901 	mov.w	r9, #1
 8002e30:	4623      	mov	r3, r4
 8002e32:	469a      	mov	sl, r3
 8002e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e38:	b10a      	cbz	r2, 8002e3e <_vfiprintf_r+0x86>
 8002e3a:	2a25      	cmp	r2, #37	@ 0x25
 8002e3c:	d1f9      	bne.n	8002e32 <_vfiprintf_r+0x7a>
 8002e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8002e42:	d00b      	beq.n	8002e5c <_vfiprintf_r+0xa4>
 8002e44:	465b      	mov	r3, fp
 8002e46:	4622      	mov	r2, r4
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffa1 	bl	8002d92 <__sfputs_r>
 8002e50:	3001      	adds	r0, #1
 8002e52:	f000 80a7 	beq.w	8002fa4 <_vfiprintf_r+0x1ec>
 8002e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e58:	445a      	add	r2, fp
 8002e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809f 	beq.w	8002fa4 <_vfiprintf_r+0x1ec>
 8002e66:	2300      	movs	r3, #0
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e70:	f10a 0a01 	add.w	sl, sl, #1
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	9307      	str	r3, [sp, #28]
 8002e78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e7e:	4654      	mov	r4, sl
 8002e80:	2205      	movs	r2, #5
 8002e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e86:	4853      	ldr	r0, [pc, #332]	@ (8002fd4 <_vfiprintf_r+0x21c>)
 8002e88:	f7fd f9aa 	bl	80001e0 <memchr>
 8002e8c:	9a04      	ldr	r2, [sp, #16]
 8002e8e:	b9d8      	cbnz	r0, 8002ec8 <_vfiprintf_r+0x110>
 8002e90:	06d1      	lsls	r1, r2, #27
 8002e92:	bf44      	itt	mi
 8002e94:	2320      	movmi	r3, #32
 8002e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e9a:	0713      	lsls	r3, r2, #28
 8002e9c:	bf44      	itt	mi
 8002e9e:	232b      	movmi	r3, #43	@ 0x2b
 8002ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eaa:	d015      	beq.n	8002ed8 <_vfiprintf_r+0x120>
 8002eac:	9a07      	ldr	r2, [sp, #28]
 8002eae:	4654      	mov	r4, sl
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f04f 0c0a 	mov.w	ip, #10
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ebc:	3b30      	subs	r3, #48	@ 0x30
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	d94b      	bls.n	8002f5a <_vfiprintf_r+0x1a2>
 8002ec2:	b1b0      	cbz	r0, 8002ef2 <_vfiprintf_r+0x13a>
 8002ec4:	9207      	str	r2, [sp, #28]
 8002ec6:	e014      	b.n	8002ef2 <_vfiprintf_r+0x13a>
 8002ec8:	eba0 0308 	sub.w	r3, r0, r8
 8002ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	46a2      	mov	sl, r4
 8002ed6:	e7d2      	b.n	8002e7e <_vfiprintf_r+0xc6>
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	1d19      	adds	r1, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9103      	str	r1, [sp, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfbb      	ittet	lt
 8002ee4:	425b      	neglt	r3, r3
 8002ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8002eea:	9307      	strge	r3, [sp, #28]
 8002eec:	9307      	strlt	r3, [sp, #28]
 8002eee:	bfb8      	it	lt
 8002ef0:	9204      	strlt	r2, [sp, #16]
 8002ef2:	7823      	ldrb	r3, [r4, #0]
 8002ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ef6:	d10a      	bne.n	8002f0e <_vfiprintf_r+0x156>
 8002ef8:	7863      	ldrb	r3, [r4, #1]
 8002efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002efc:	d132      	bne.n	8002f64 <_vfiprintf_r+0x1ac>
 8002efe:	9b03      	ldr	r3, [sp, #12]
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	9203      	str	r2, [sp, #12]
 8002f06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f0a:	3402      	adds	r4, #2
 8002f0c:	9305      	str	r3, [sp, #20]
 8002f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002fe4 <_vfiprintf_r+0x22c>
 8002f12:	7821      	ldrb	r1, [r4, #0]
 8002f14:	2203      	movs	r2, #3
 8002f16:	4650      	mov	r0, sl
 8002f18:	f7fd f962 	bl	80001e0 <memchr>
 8002f1c:	b138      	cbz	r0, 8002f2e <_vfiprintf_r+0x176>
 8002f1e:	9b04      	ldr	r3, [sp, #16]
 8002f20:	eba0 000a 	sub.w	r0, r0, sl
 8002f24:	2240      	movs	r2, #64	@ 0x40
 8002f26:	4082      	lsls	r2, r0
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	3401      	adds	r4, #1
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f32:	4829      	ldr	r0, [pc, #164]	@ (8002fd8 <_vfiprintf_r+0x220>)
 8002f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f38:	2206      	movs	r2, #6
 8002f3a:	f7fd f951 	bl	80001e0 <memchr>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d03f      	beq.n	8002fc2 <_vfiprintf_r+0x20a>
 8002f42:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <_vfiprintf_r+0x224>)
 8002f44:	bb1b      	cbnz	r3, 8002f8e <_vfiprintf_r+0x1d6>
 8002f46:	9b03      	ldr	r3, [sp, #12]
 8002f48:	3307      	adds	r3, #7
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	3308      	adds	r3, #8
 8002f50:	9303      	str	r3, [sp, #12]
 8002f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f54:	443b      	add	r3, r7
 8002f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f58:	e76a      	b.n	8002e30 <_vfiprintf_r+0x78>
 8002f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f5e:	460c      	mov	r4, r1
 8002f60:	2001      	movs	r0, #1
 8002f62:	e7a8      	b.n	8002eb6 <_vfiprintf_r+0xfe>
 8002f64:	2300      	movs	r3, #0
 8002f66:	3401      	adds	r4, #1
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f04f 0c0a 	mov.w	ip, #10
 8002f70:	4620      	mov	r0, r4
 8002f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f76:	3a30      	subs	r2, #48	@ 0x30
 8002f78:	2a09      	cmp	r2, #9
 8002f7a:	d903      	bls.n	8002f84 <_vfiprintf_r+0x1cc>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0c6      	beq.n	8002f0e <_vfiprintf_r+0x156>
 8002f80:	9105      	str	r1, [sp, #20]
 8002f82:	e7c4      	b.n	8002f0e <_vfiprintf_r+0x156>
 8002f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f88:	4604      	mov	r4, r0
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e7f0      	b.n	8002f70 <_vfiprintf_r+0x1b8>
 8002f8e:	ab03      	add	r3, sp, #12
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	462a      	mov	r2, r5
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <_vfiprintf_r+0x228>)
 8002f96:	a904      	add	r1, sp, #16
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f3af 8000 	nop.w
 8002f9e:	4607      	mov	r7, r0
 8002fa0:	1c78      	adds	r0, r7, #1
 8002fa2:	d1d6      	bne.n	8002f52 <_vfiprintf_r+0x19a>
 8002fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa6:	07d9      	lsls	r1, r3, #31
 8002fa8:	d405      	bmi.n	8002fb6 <_vfiprintf_r+0x1fe>
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	059a      	lsls	r2, r3, #22
 8002fae:	d402      	bmi.n	8002fb6 <_vfiprintf_r+0x1fe>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fb2:	f7ff fc85 	bl	80028c0 <__retarget_lock_release_recursive>
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	065b      	lsls	r3, r3, #25
 8002fba:	f53f af1f 	bmi.w	8002dfc <_vfiprintf_r+0x44>
 8002fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fc0:	e71e      	b.n	8002e00 <_vfiprintf_r+0x48>
 8002fc2:	ab03      	add	r3, sp, #12
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462a      	mov	r2, r5
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <_vfiprintf_r+0x228>)
 8002fca:	a904      	add	r1, sp, #16
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 f879 	bl	80030c4 <_printf_i>
 8002fd2:	e7e4      	b.n	8002f9e <_vfiprintf_r+0x1e6>
 8002fd4:	080037d8 	.word	0x080037d8
 8002fd8:	080037e2 	.word	0x080037e2
 8002fdc:	00000000 	.word	0x00000000
 8002fe0:	08002d93 	.word	0x08002d93
 8002fe4:	080037de 	.word	0x080037de

08002fe8 <_printf_common>:
 8002fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fec:	4616      	mov	r6, r2
 8002fee:	4698      	mov	r8, r3
 8002ff0:	688a      	ldr	r2, [r1, #8]
 8002ff2:	690b      	ldr	r3, [r1, #16]
 8002ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfb8      	it	lt
 8002ffc:	4613      	movlt	r3, r2
 8002ffe:	6033      	str	r3, [r6, #0]
 8003000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003004:	4607      	mov	r7, r0
 8003006:	460c      	mov	r4, r1
 8003008:	b10a      	cbz	r2, 800300e <_printf_common+0x26>
 800300a:	3301      	adds	r3, #1
 800300c:	6033      	str	r3, [r6, #0]
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	0699      	lsls	r1, r3, #26
 8003012:	bf42      	ittt	mi
 8003014:	6833      	ldrmi	r3, [r6, #0]
 8003016:	3302      	addmi	r3, #2
 8003018:	6033      	strmi	r3, [r6, #0]
 800301a:	6825      	ldr	r5, [r4, #0]
 800301c:	f015 0506 	ands.w	r5, r5, #6
 8003020:	d106      	bne.n	8003030 <_printf_common+0x48>
 8003022:	f104 0a19 	add.w	sl, r4, #25
 8003026:	68e3      	ldr	r3, [r4, #12]
 8003028:	6832      	ldr	r2, [r6, #0]
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	42ab      	cmp	r3, r5
 800302e:	dc26      	bgt.n	800307e <_printf_common+0x96>
 8003030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	3b00      	subs	r3, #0
 8003038:	bf18      	it	ne
 800303a:	2301      	movne	r3, #1
 800303c:	0692      	lsls	r2, r2, #26
 800303e:	d42b      	bmi.n	8003098 <_printf_common+0xb0>
 8003040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003044:	4641      	mov	r1, r8
 8003046:	4638      	mov	r0, r7
 8003048:	47c8      	blx	r9
 800304a:	3001      	adds	r0, #1
 800304c:	d01e      	beq.n	800308c <_printf_common+0xa4>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf02      	ittt	eq
 800305a:	68e5      	ldreq	r5, [r4, #12]
 800305c:	6833      	ldreq	r3, [r6, #0]
 800305e:	1aed      	subeq	r5, r5, r3
 8003060:	68a3      	ldr	r3, [r4, #8]
 8003062:	bf0c      	ite	eq
 8003064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003068:	2500      	movne	r5, #0
 800306a:	4293      	cmp	r3, r2
 800306c:	bfc4      	itt	gt
 800306e:	1a9b      	subgt	r3, r3, r2
 8003070:	18ed      	addgt	r5, r5, r3
 8003072:	2600      	movs	r6, #0
 8003074:	341a      	adds	r4, #26
 8003076:	42b5      	cmp	r5, r6
 8003078:	d11a      	bne.n	80030b0 <_printf_common+0xc8>
 800307a:	2000      	movs	r0, #0
 800307c:	e008      	b.n	8003090 <_printf_common+0xa8>
 800307e:	2301      	movs	r3, #1
 8003080:	4652      	mov	r2, sl
 8003082:	4641      	mov	r1, r8
 8003084:	4638      	mov	r0, r7
 8003086:	47c8      	blx	r9
 8003088:	3001      	adds	r0, #1
 800308a:	d103      	bne.n	8003094 <_printf_common+0xac>
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	3501      	adds	r5, #1
 8003096:	e7c6      	b.n	8003026 <_printf_common+0x3e>
 8003098:	18e1      	adds	r1, r4, r3
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	2030      	movs	r0, #48	@ 0x30
 800309e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030a2:	4422      	add	r2, r4
 80030a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030ac:	3302      	adds	r3, #2
 80030ae:	e7c7      	b.n	8003040 <_printf_common+0x58>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4622      	mov	r2, r4
 80030b4:	4641      	mov	r1, r8
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c8      	blx	r9
 80030ba:	3001      	adds	r0, #1
 80030bc:	d0e6      	beq.n	800308c <_printf_common+0xa4>
 80030be:	3601      	adds	r6, #1
 80030c0:	e7d9      	b.n	8003076 <_printf_common+0x8e>
	...

080030c4 <_printf_i>:
 80030c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	7e0f      	ldrb	r7, [r1, #24]
 80030ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030cc:	2f78      	cmp	r7, #120	@ 0x78
 80030ce:	4691      	mov	r9, r2
 80030d0:	4680      	mov	r8, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	469a      	mov	sl, r3
 80030d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030da:	d807      	bhi.n	80030ec <_printf_i+0x28>
 80030dc:	2f62      	cmp	r7, #98	@ 0x62
 80030de:	d80a      	bhi.n	80030f6 <_printf_i+0x32>
 80030e0:	2f00      	cmp	r7, #0
 80030e2:	f000 80d2 	beq.w	800328a <_printf_i+0x1c6>
 80030e6:	2f58      	cmp	r7, #88	@ 0x58
 80030e8:	f000 80b9 	beq.w	800325e <_printf_i+0x19a>
 80030ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030f4:	e03a      	b.n	800316c <_printf_i+0xa8>
 80030f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030fa:	2b15      	cmp	r3, #21
 80030fc:	d8f6      	bhi.n	80030ec <_printf_i+0x28>
 80030fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003104 <_printf_i+0x40>)
 8003100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003104:	0800315d 	.word	0x0800315d
 8003108:	08003171 	.word	0x08003171
 800310c:	080030ed 	.word	0x080030ed
 8003110:	080030ed 	.word	0x080030ed
 8003114:	080030ed 	.word	0x080030ed
 8003118:	080030ed 	.word	0x080030ed
 800311c:	08003171 	.word	0x08003171
 8003120:	080030ed 	.word	0x080030ed
 8003124:	080030ed 	.word	0x080030ed
 8003128:	080030ed 	.word	0x080030ed
 800312c:	080030ed 	.word	0x080030ed
 8003130:	08003271 	.word	0x08003271
 8003134:	0800319b 	.word	0x0800319b
 8003138:	0800322b 	.word	0x0800322b
 800313c:	080030ed 	.word	0x080030ed
 8003140:	080030ed 	.word	0x080030ed
 8003144:	08003293 	.word	0x08003293
 8003148:	080030ed 	.word	0x080030ed
 800314c:	0800319b 	.word	0x0800319b
 8003150:	080030ed 	.word	0x080030ed
 8003154:	080030ed 	.word	0x080030ed
 8003158:	08003233 	.word	0x08003233
 800315c:	6833      	ldr	r3, [r6, #0]
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6032      	str	r2, [r6, #0]
 8003164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800316c:	2301      	movs	r3, #1
 800316e:	e09d      	b.n	80032ac <_printf_i+0x1e8>
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	1d19      	adds	r1, r3, #4
 8003176:	6031      	str	r1, [r6, #0]
 8003178:	0606      	lsls	r6, r0, #24
 800317a:	d501      	bpl.n	8003180 <_printf_i+0xbc>
 800317c:	681d      	ldr	r5, [r3, #0]
 800317e:	e003      	b.n	8003188 <_printf_i+0xc4>
 8003180:	0645      	lsls	r5, r0, #25
 8003182:	d5fb      	bpl.n	800317c <_printf_i+0xb8>
 8003184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003188:	2d00      	cmp	r5, #0
 800318a:	da03      	bge.n	8003194 <_printf_i+0xd0>
 800318c:	232d      	movs	r3, #45	@ 0x2d
 800318e:	426d      	negs	r5, r5
 8003190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003194:	4859      	ldr	r0, [pc, #356]	@ (80032fc <_printf_i+0x238>)
 8003196:	230a      	movs	r3, #10
 8003198:	e011      	b.n	80031be <_printf_i+0xfa>
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	0608      	lsls	r0, r1, #24
 80031a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80031a4:	d402      	bmi.n	80031ac <_printf_i+0xe8>
 80031a6:	0649      	lsls	r1, r1, #25
 80031a8:	bf48      	it	mi
 80031aa:	b2ad      	uxthmi	r5, r5
 80031ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ae:	4853      	ldr	r0, [pc, #332]	@ (80032fc <_printf_i+0x238>)
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	bf14      	ite	ne
 80031b4:	230a      	movne	r3, #10
 80031b6:	2308      	moveq	r3, #8
 80031b8:	2100      	movs	r1, #0
 80031ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031be:	6866      	ldr	r6, [r4, #4]
 80031c0:	60a6      	str	r6, [r4, #8]
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	bfa2      	ittt	ge
 80031c6:	6821      	ldrge	r1, [r4, #0]
 80031c8:	f021 0104 	bicge.w	r1, r1, #4
 80031cc:	6021      	strge	r1, [r4, #0]
 80031ce:	b90d      	cbnz	r5, 80031d4 <_printf_i+0x110>
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d04b      	beq.n	800326c <_printf_i+0x1a8>
 80031d4:	4616      	mov	r6, r2
 80031d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80031da:	fb03 5711 	mls	r7, r3, r1, r5
 80031de:	5dc7      	ldrb	r7, [r0, r7]
 80031e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031e4:	462f      	mov	r7, r5
 80031e6:	42bb      	cmp	r3, r7
 80031e8:	460d      	mov	r5, r1
 80031ea:	d9f4      	bls.n	80031d6 <_printf_i+0x112>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d10b      	bne.n	8003208 <_printf_i+0x144>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	07df      	lsls	r7, r3, #31
 80031f4:	d508      	bpl.n	8003208 <_printf_i+0x144>
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	6861      	ldr	r1, [r4, #4]
 80031fa:	4299      	cmp	r1, r3
 80031fc:	bfde      	ittt	le
 80031fe:	2330      	movle	r3, #48	@ 0x30
 8003200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003208:	1b92      	subs	r2, r2, r6
 800320a:	6122      	str	r2, [r4, #16]
 800320c:	f8cd a000 	str.w	sl, [sp]
 8003210:	464b      	mov	r3, r9
 8003212:	aa03      	add	r2, sp, #12
 8003214:	4621      	mov	r1, r4
 8003216:	4640      	mov	r0, r8
 8003218:	f7ff fee6 	bl	8002fe8 <_printf_common>
 800321c:	3001      	adds	r0, #1
 800321e:	d14a      	bne.n	80032b6 <_printf_i+0x1f2>
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	b004      	add	sp, #16
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	f043 0320 	orr.w	r3, r3, #32
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	4833      	ldr	r0, [pc, #204]	@ (8003300 <_printf_i+0x23c>)
 8003234:	2778      	movs	r7, #120	@ 0x78
 8003236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	6831      	ldr	r1, [r6, #0]
 800323e:	061f      	lsls	r7, r3, #24
 8003240:	f851 5b04 	ldr.w	r5, [r1], #4
 8003244:	d402      	bmi.n	800324c <_printf_i+0x188>
 8003246:	065f      	lsls	r7, r3, #25
 8003248:	bf48      	it	mi
 800324a:	b2ad      	uxthmi	r5, r5
 800324c:	6031      	str	r1, [r6, #0]
 800324e:	07d9      	lsls	r1, r3, #31
 8003250:	bf44      	itt	mi
 8003252:	f043 0320 	orrmi.w	r3, r3, #32
 8003256:	6023      	strmi	r3, [r4, #0]
 8003258:	b11d      	cbz	r5, 8003262 <_printf_i+0x19e>
 800325a:	2310      	movs	r3, #16
 800325c:	e7ac      	b.n	80031b8 <_printf_i+0xf4>
 800325e:	4827      	ldr	r0, [pc, #156]	@ (80032fc <_printf_i+0x238>)
 8003260:	e7e9      	b.n	8003236 <_printf_i+0x172>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f023 0320 	bic.w	r3, r3, #32
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	e7f6      	b.n	800325a <_printf_i+0x196>
 800326c:	4616      	mov	r6, r2
 800326e:	e7bd      	b.n	80031ec <_printf_i+0x128>
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	6825      	ldr	r5, [r4, #0]
 8003274:	6961      	ldr	r1, [r4, #20]
 8003276:	1d18      	adds	r0, r3, #4
 8003278:	6030      	str	r0, [r6, #0]
 800327a:	062e      	lsls	r6, r5, #24
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	d501      	bpl.n	8003284 <_printf_i+0x1c0>
 8003280:	6019      	str	r1, [r3, #0]
 8003282:	e002      	b.n	800328a <_printf_i+0x1c6>
 8003284:	0668      	lsls	r0, r5, #25
 8003286:	d5fb      	bpl.n	8003280 <_printf_i+0x1bc>
 8003288:	8019      	strh	r1, [r3, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	6123      	str	r3, [r4, #16]
 800328e:	4616      	mov	r6, r2
 8003290:	e7bc      	b.n	800320c <_printf_i+0x148>
 8003292:	6833      	ldr	r3, [r6, #0]
 8003294:	1d1a      	adds	r2, r3, #4
 8003296:	6032      	str	r2, [r6, #0]
 8003298:	681e      	ldr	r6, [r3, #0]
 800329a:	6862      	ldr	r2, [r4, #4]
 800329c:	2100      	movs	r1, #0
 800329e:	4630      	mov	r0, r6
 80032a0:	f7fc ff9e 	bl	80001e0 <memchr>
 80032a4:	b108      	cbz	r0, 80032aa <_printf_i+0x1e6>
 80032a6:	1b80      	subs	r0, r0, r6
 80032a8:	6060      	str	r0, [r4, #4]
 80032aa:	6863      	ldr	r3, [r4, #4]
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	2300      	movs	r3, #0
 80032b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032b4:	e7aa      	b.n	800320c <_printf_i+0x148>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	4632      	mov	r2, r6
 80032ba:	4649      	mov	r1, r9
 80032bc:	4640      	mov	r0, r8
 80032be:	47d0      	blx	sl
 80032c0:	3001      	adds	r0, #1
 80032c2:	d0ad      	beq.n	8003220 <_printf_i+0x15c>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	079b      	lsls	r3, r3, #30
 80032c8:	d413      	bmi.n	80032f2 <_printf_i+0x22e>
 80032ca:	68e0      	ldr	r0, [r4, #12]
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	4298      	cmp	r0, r3
 80032d0:	bfb8      	it	lt
 80032d2:	4618      	movlt	r0, r3
 80032d4:	e7a6      	b.n	8003224 <_printf_i+0x160>
 80032d6:	2301      	movs	r3, #1
 80032d8:	4632      	mov	r2, r6
 80032da:	4649      	mov	r1, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	47d0      	blx	sl
 80032e0:	3001      	adds	r0, #1
 80032e2:	d09d      	beq.n	8003220 <_printf_i+0x15c>
 80032e4:	3501      	adds	r5, #1
 80032e6:	68e3      	ldr	r3, [r4, #12]
 80032e8:	9903      	ldr	r1, [sp, #12]
 80032ea:	1a5b      	subs	r3, r3, r1
 80032ec:	42ab      	cmp	r3, r5
 80032ee:	dcf2      	bgt.n	80032d6 <_printf_i+0x212>
 80032f0:	e7eb      	b.n	80032ca <_printf_i+0x206>
 80032f2:	2500      	movs	r5, #0
 80032f4:	f104 0619 	add.w	r6, r4, #25
 80032f8:	e7f5      	b.n	80032e6 <_printf_i+0x222>
 80032fa:	bf00      	nop
 80032fc:	080037e9 	.word	0x080037e9
 8003300:	080037fa 	.word	0x080037fa

08003304 <__sflush_r>:
 8003304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	0716      	lsls	r6, r2, #28
 800330e:	4605      	mov	r5, r0
 8003310:	460c      	mov	r4, r1
 8003312:	d454      	bmi.n	80033be <__sflush_r+0xba>
 8003314:	684b      	ldr	r3, [r1, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dc02      	bgt.n	8003320 <__sflush_r+0x1c>
 800331a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	dd48      	ble.n	80033b2 <__sflush_r+0xae>
 8003320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003322:	2e00      	cmp	r6, #0
 8003324:	d045      	beq.n	80033b2 <__sflush_r+0xae>
 8003326:	2300      	movs	r3, #0
 8003328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800332c:	682f      	ldr	r7, [r5, #0]
 800332e:	6a21      	ldr	r1, [r4, #32]
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	d030      	beq.n	8003396 <__sflush_r+0x92>
 8003334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	0759      	lsls	r1, r3, #29
 800333a:	d505      	bpl.n	8003348 <__sflush_r+0x44>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003342:	b10b      	cbz	r3, 8003348 <__sflush_r+0x44>
 8003344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800334c:	6a21      	ldr	r1, [r4, #32]
 800334e:	4628      	mov	r0, r5
 8003350:	47b0      	blx	r6
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	d106      	bne.n	8003366 <__sflush_r+0x62>
 8003358:	6829      	ldr	r1, [r5, #0]
 800335a:	291d      	cmp	r1, #29
 800335c:	d82b      	bhi.n	80033b6 <__sflush_r+0xb2>
 800335e:	4a2a      	ldr	r2, [pc, #168]	@ (8003408 <__sflush_r+0x104>)
 8003360:	410a      	asrs	r2, r1
 8003362:	07d6      	lsls	r6, r2, #31
 8003364:	d427      	bmi.n	80033b6 <__sflush_r+0xb2>
 8003366:	2200      	movs	r2, #0
 8003368:	6062      	str	r2, [r4, #4]
 800336a:	04d9      	lsls	r1, r3, #19
 800336c:	6922      	ldr	r2, [r4, #16]
 800336e:	6022      	str	r2, [r4, #0]
 8003370:	d504      	bpl.n	800337c <__sflush_r+0x78>
 8003372:	1c42      	adds	r2, r0, #1
 8003374:	d101      	bne.n	800337a <__sflush_r+0x76>
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	b903      	cbnz	r3, 800337c <__sflush_r+0x78>
 800337a:	6560      	str	r0, [r4, #84]	@ 0x54
 800337c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800337e:	602f      	str	r7, [r5, #0]
 8003380:	b1b9      	cbz	r1, 80033b2 <__sflush_r+0xae>
 8003382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003386:	4299      	cmp	r1, r3
 8003388:	d002      	beq.n	8003390 <__sflush_r+0x8c>
 800338a:	4628      	mov	r0, r5
 800338c:	f7ff fa9a 	bl	80028c4 <_free_r>
 8003390:	2300      	movs	r3, #0
 8003392:	6363      	str	r3, [r4, #52]	@ 0x34
 8003394:	e00d      	b.n	80033b2 <__sflush_r+0xae>
 8003396:	2301      	movs	r3, #1
 8003398:	4628      	mov	r0, r5
 800339a:	47b0      	blx	r6
 800339c:	4602      	mov	r2, r0
 800339e:	1c50      	adds	r0, r2, #1
 80033a0:	d1c9      	bne.n	8003336 <__sflush_r+0x32>
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0c6      	beq.n	8003336 <__sflush_r+0x32>
 80033a8:	2b1d      	cmp	r3, #29
 80033aa:	d001      	beq.n	80033b0 <__sflush_r+0xac>
 80033ac:	2b16      	cmp	r3, #22
 80033ae:	d11e      	bne.n	80033ee <__sflush_r+0xea>
 80033b0:	602f      	str	r7, [r5, #0]
 80033b2:	2000      	movs	r0, #0
 80033b4:	e022      	b.n	80033fc <__sflush_r+0xf8>
 80033b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	e01b      	b.n	80033f6 <__sflush_r+0xf2>
 80033be:	690f      	ldr	r7, [r1, #16]
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	d0f6      	beq.n	80033b2 <__sflush_r+0xae>
 80033c4:	0793      	lsls	r3, r2, #30
 80033c6:	680e      	ldr	r6, [r1, #0]
 80033c8:	bf08      	it	eq
 80033ca:	694b      	ldreq	r3, [r1, #20]
 80033cc:	600f      	str	r7, [r1, #0]
 80033ce:	bf18      	it	ne
 80033d0:	2300      	movne	r3, #0
 80033d2:	eba6 0807 	sub.w	r8, r6, r7
 80033d6:	608b      	str	r3, [r1, #8]
 80033d8:	f1b8 0f00 	cmp.w	r8, #0
 80033dc:	dde9      	ble.n	80033b2 <__sflush_r+0xae>
 80033de:	6a21      	ldr	r1, [r4, #32]
 80033e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80033e2:	4643      	mov	r3, r8
 80033e4:	463a      	mov	r2, r7
 80033e6:	4628      	mov	r0, r5
 80033e8:	47b0      	blx	r6
 80033ea:	2800      	cmp	r0, #0
 80033ec:	dc08      	bgt.n	8003400 <__sflush_r+0xfc>
 80033ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f6:	81a3      	strh	r3, [r4, #12]
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003400:	4407      	add	r7, r0
 8003402:	eba8 0800 	sub.w	r8, r8, r0
 8003406:	e7e7      	b.n	80033d8 <__sflush_r+0xd4>
 8003408:	dfbffffe 	.word	0xdfbffffe

0800340c <_fflush_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	690b      	ldr	r3, [r1, #16]
 8003410:	4605      	mov	r5, r0
 8003412:	460c      	mov	r4, r1
 8003414:	b913      	cbnz	r3, 800341c <_fflush_r+0x10>
 8003416:	2500      	movs	r5, #0
 8003418:	4628      	mov	r0, r5
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	b118      	cbz	r0, 8003426 <_fflush_r+0x1a>
 800341e:	6a03      	ldr	r3, [r0, #32]
 8003420:	b90b      	cbnz	r3, 8003426 <_fflush_r+0x1a>
 8003422:	f7ff f927 	bl	8002674 <__sinit>
 8003426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f3      	beq.n	8003416 <_fflush_r+0xa>
 800342e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003430:	07d0      	lsls	r0, r2, #31
 8003432:	d404      	bmi.n	800343e <_fflush_r+0x32>
 8003434:	0599      	lsls	r1, r3, #22
 8003436:	d402      	bmi.n	800343e <_fflush_r+0x32>
 8003438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800343a:	f7ff fa40 	bl	80028be <__retarget_lock_acquire_recursive>
 800343e:	4628      	mov	r0, r5
 8003440:	4621      	mov	r1, r4
 8003442:	f7ff ff5f 	bl	8003304 <__sflush_r>
 8003446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003448:	07da      	lsls	r2, r3, #31
 800344a:	4605      	mov	r5, r0
 800344c:	d4e4      	bmi.n	8003418 <_fflush_r+0xc>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	059b      	lsls	r3, r3, #22
 8003452:	d4e1      	bmi.n	8003418 <_fflush_r+0xc>
 8003454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003456:	f7ff fa33 	bl	80028c0 <__retarget_lock_release_recursive>
 800345a:	e7dd      	b.n	8003418 <_fflush_r+0xc>

0800345c <__swbuf_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	460e      	mov	r6, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4605      	mov	r5, r0
 8003464:	b118      	cbz	r0, 800346e <__swbuf_r+0x12>
 8003466:	6a03      	ldr	r3, [r0, #32]
 8003468:	b90b      	cbnz	r3, 800346e <__swbuf_r+0x12>
 800346a:	f7ff f903 	bl	8002674 <__sinit>
 800346e:	69a3      	ldr	r3, [r4, #24]
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	071a      	lsls	r2, r3, #28
 8003476:	d501      	bpl.n	800347c <__swbuf_r+0x20>
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b943      	cbnz	r3, 800348e <__swbuf_r+0x32>
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f82a 	bl	80034d8 <__swsetup_r>
 8003484:	b118      	cbz	r0, 800348e <__swbuf_r+0x32>
 8003486:	f04f 37ff 	mov.w	r7, #4294967295
 800348a:	4638      	mov	r0, r7
 800348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	1a98      	subs	r0, r3, r2
 8003494:	6963      	ldr	r3, [r4, #20]
 8003496:	b2f6      	uxtb	r6, r6
 8003498:	4283      	cmp	r3, r0
 800349a:	4637      	mov	r7, r6
 800349c:	dc05      	bgt.n	80034aa <__swbuf_r+0x4e>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7ff ffb3 	bl	800340c <_fflush_r>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d1ed      	bne.n	8003486 <__swbuf_r+0x2a>
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	701e      	strb	r6, [r3, #0]
 80034b8:	6962      	ldr	r2, [r4, #20]
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	429a      	cmp	r2, r3
 80034be:	d004      	beq.n	80034ca <__swbuf_r+0x6e>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	07db      	lsls	r3, r3, #31
 80034c4:	d5e1      	bpl.n	800348a <__swbuf_r+0x2e>
 80034c6:	2e0a      	cmp	r6, #10
 80034c8:	d1df      	bne.n	800348a <__swbuf_r+0x2e>
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7ff ff9d 	bl	800340c <_fflush_r>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d0d9      	beq.n	800348a <__swbuf_r+0x2e>
 80034d6:	e7d6      	b.n	8003486 <__swbuf_r+0x2a>

080034d8 <__swsetup_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	4b29      	ldr	r3, [pc, #164]	@ (8003580 <__swsetup_r+0xa8>)
 80034dc:	4605      	mov	r5, r0
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	460c      	mov	r4, r1
 80034e2:	b118      	cbz	r0, 80034ec <__swsetup_r+0x14>
 80034e4:	6a03      	ldr	r3, [r0, #32]
 80034e6:	b90b      	cbnz	r3, 80034ec <__swsetup_r+0x14>
 80034e8:	f7ff f8c4 	bl	8002674 <__sinit>
 80034ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f0:	0719      	lsls	r1, r3, #28
 80034f2:	d422      	bmi.n	800353a <__swsetup_r+0x62>
 80034f4:	06da      	lsls	r2, r3, #27
 80034f6:	d407      	bmi.n	8003508 <__swsetup_r+0x30>
 80034f8:	2209      	movs	r2, #9
 80034fa:	602a      	str	r2, [r5, #0]
 80034fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e033      	b.n	8003570 <__swsetup_r+0x98>
 8003508:	0758      	lsls	r0, r3, #29
 800350a:	d512      	bpl.n	8003532 <__swsetup_r+0x5a>
 800350c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800350e:	b141      	cbz	r1, 8003522 <__swsetup_r+0x4a>
 8003510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003514:	4299      	cmp	r1, r3
 8003516:	d002      	beq.n	800351e <__swsetup_r+0x46>
 8003518:	4628      	mov	r0, r5
 800351a:	f7ff f9d3 	bl	80028c4 <_free_r>
 800351e:	2300      	movs	r3, #0
 8003520:	6363      	str	r3, [r4, #52]	@ 0x34
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003528:	81a3      	strh	r3, [r4, #12]
 800352a:	2300      	movs	r3, #0
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	b94b      	cbnz	r3, 8003552 <__swsetup_r+0x7a>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003548:	d003      	beq.n	8003552 <__swsetup_r+0x7a>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f8a5 	bl	800369c <__smakebuf_r>
 8003552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003556:	f013 0201 	ands.w	r2, r3, #1
 800355a:	d00a      	beq.n	8003572 <__swsetup_r+0x9a>
 800355c:	2200      	movs	r2, #0
 800355e:	60a2      	str	r2, [r4, #8]
 8003560:	6962      	ldr	r2, [r4, #20]
 8003562:	4252      	negs	r2, r2
 8003564:	61a2      	str	r2, [r4, #24]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	b942      	cbnz	r2, 800357c <__swsetup_r+0xa4>
 800356a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800356e:	d1c5      	bne.n	80034fc <__swsetup_r+0x24>
 8003570:	bd38      	pop	{r3, r4, r5, pc}
 8003572:	0799      	lsls	r1, r3, #30
 8003574:	bf58      	it	pl
 8003576:	6962      	ldrpl	r2, [r4, #20]
 8003578:	60a2      	str	r2, [r4, #8]
 800357a:	e7f4      	b.n	8003566 <__swsetup_r+0x8e>
 800357c:	2000      	movs	r0, #0
 800357e:	e7f7      	b.n	8003570 <__swsetup_r+0x98>
 8003580:	20000018 	.word	0x20000018

08003584 <memmove>:
 8003584:	4288      	cmp	r0, r1
 8003586:	b510      	push	{r4, lr}
 8003588:	eb01 0402 	add.w	r4, r1, r2
 800358c:	d902      	bls.n	8003594 <memmove+0x10>
 800358e:	4284      	cmp	r4, r0
 8003590:	4623      	mov	r3, r4
 8003592:	d807      	bhi.n	80035a4 <memmove+0x20>
 8003594:	1e43      	subs	r3, r0, #1
 8003596:	42a1      	cmp	r1, r4
 8003598:	d008      	beq.n	80035ac <memmove+0x28>
 800359a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800359e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035a2:	e7f8      	b.n	8003596 <memmove+0x12>
 80035a4:	4402      	add	r2, r0
 80035a6:	4601      	mov	r1, r0
 80035a8:	428a      	cmp	r2, r1
 80035aa:	d100      	bne.n	80035ae <memmove+0x2a>
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035b6:	e7f7      	b.n	80035a8 <memmove+0x24>

080035b8 <_sbrk_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4d06      	ldr	r5, [pc, #24]	@ (80035d4 <_sbrk_r+0x1c>)
 80035bc:	2300      	movs	r3, #0
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f7fe ff6a 	bl	800249c <_sbrk>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d102      	bne.n	80035d2 <_sbrk_r+0x1a>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	b103      	cbz	r3, 80035d2 <_sbrk_r+0x1a>
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	20000250 	.word	0x20000250

080035d8 <memcpy>:
 80035d8:	440a      	add	r2, r1
 80035da:	4291      	cmp	r1, r2
 80035dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80035e0:	d100      	bne.n	80035e4 <memcpy+0xc>
 80035e2:	4770      	bx	lr
 80035e4:	b510      	push	{r4, lr}
 80035e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ee:	4291      	cmp	r1, r2
 80035f0:	d1f9      	bne.n	80035e6 <memcpy+0xe>
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <_realloc_r>:
 80035f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f8:	4680      	mov	r8, r0
 80035fa:	4615      	mov	r5, r2
 80035fc:	460c      	mov	r4, r1
 80035fe:	b921      	cbnz	r1, 800360a <_realloc_r+0x16>
 8003600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	4611      	mov	r1, r2
 8003606:	f7ff b9c9 	b.w	800299c <_malloc_r>
 800360a:	b92a      	cbnz	r2, 8003618 <_realloc_r+0x24>
 800360c:	f7ff f95a 	bl	80028c4 <_free_r>
 8003610:	2400      	movs	r4, #0
 8003612:	4620      	mov	r0, r4
 8003614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003618:	f000 f89e 	bl	8003758 <_malloc_usable_size_r>
 800361c:	4285      	cmp	r5, r0
 800361e:	4606      	mov	r6, r0
 8003620:	d802      	bhi.n	8003628 <_realloc_r+0x34>
 8003622:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003626:	d8f4      	bhi.n	8003612 <_realloc_r+0x1e>
 8003628:	4629      	mov	r1, r5
 800362a:	4640      	mov	r0, r8
 800362c:	f7ff f9b6 	bl	800299c <_malloc_r>
 8003630:	4607      	mov	r7, r0
 8003632:	2800      	cmp	r0, #0
 8003634:	d0ec      	beq.n	8003610 <_realloc_r+0x1c>
 8003636:	42b5      	cmp	r5, r6
 8003638:	462a      	mov	r2, r5
 800363a:	4621      	mov	r1, r4
 800363c:	bf28      	it	cs
 800363e:	4632      	movcs	r2, r6
 8003640:	f7ff ffca 	bl	80035d8 <memcpy>
 8003644:	4621      	mov	r1, r4
 8003646:	4640      	mov	r0, r8
 8003648:	f7ff f93c 	bl	80028c4 <_free_r>
 800364c:	463c      	mov	r4, r7
 800364e:	e7e0      	b.n	8003612 <_realloc_r+0x1e>

08003650 <__swhatbuf_r>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	460c      	mov	r4, r1
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	2900      	cmp	r1, #0
 800365a:	b096      	sub	sp, #88	@ 0x58
 800365c:	4615      	mov	r5, r2
 800365e:	461e      	mov	r6, r3
 8003660:	da0d      	bge.n	800367e <__swhatbuf_r+0x2e>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	bf14      	ite	ne
 800366e:	2340      	movne	r3, #64	@ 0x40
 8003670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003674:	2000      	movs	r0, #0
 8003676:	6031      	str	r1, [r6, #0]
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	b016      	add	sp, #88	@ 0x58
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	466a      	mov	r2, sp
 8003680:	f000 f848 	bl	8003714 <_fstat_r>
 8003684:	2800      	cmp	r0, #0
 8003686:	dbec      	blt.n	8003662 <__swhatbuf_r+0x12>
 8003688:	9901      	ldr	r1, [sp, #4]
 800368a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800368e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003692:	4259      	negs	r1, r3
 8003694:	4159      	adcs	r1, r3
 8003696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800369a:	e7eb      	b.n	8003674 <__swhatbuf_r+0x24>

0800369c <__smakebuf_r>:
 800369c:	898b      	ldrh	r3, [r1, #12]
 800369e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a0:	079d      	lsls	r5, r3, #30
 80036a2:	4606      	mov	r6, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	d507      	bpl.n	80036b8 <__smakebuf_r+0x1c>
 80036a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	2301      	movs	r3, #1
 80036b2:	6163      	str	r3, [r4, #20]
 80036b4:	b003      	add	sp, #12
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b8:	ab01      	add	r3, sp, #4
 80036ba:	466a      	mov	r2, sp
 80036bc:	f7ff ffc8 	bl	8003650 <__swhatbuf_r>
 80036c0:	9f00      	ldr	r7, [sp, #0]
 80036c2:	4605      	mov	r5, r0
 80036c4:	4639      	mov	r1, r7
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff f968 	bl	800299c <_malloc_r>
 80036cc:	b948      	cbnz	r0, 80036e2 <__smakebuf_r+0x46>
 80036ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d2:	059a      	lsls	r2, r3, #22
 80036d4:	d4ee      	bmi.n	80036b4 <__smakebuf_r+0x18>
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	e7e2      	b.n	80036a8 <__smakebuf_r+0xc>
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	6020      	str	r0, [r4, #0]
 80036e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80036f2:	b15b      	cbz	r3, 800370c <__smakebuf_r+0x70>
 80036f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f81d 	bl	8003738 <_isatty_r>
 80036fe:	b128      	cbz	r0, 800370c <__smakebuf_r+0x70>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	431d      	orrs	r5, r3
 8003710:	81a5      	strh	r5, [r4, #12]
 8003712:	e7cf      	b.n	80036b4 <__smakebuf_r+0x18>

08003714 <_fstat_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4d07      	ldr	r5, [pc, #28]	@ (8003734 <_fstat_r+0x20>)
 8003718:	2300      	movs	r3, #0
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	f7fe fe92 	bl	800244a <_fstat>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	d102      	bne.n	8003730 <_fstat_r+0x1c>
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	b103      	cbz	r3, 8003730 <_fstat_r+0x1c>
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	bd38      	pop	{r3, r4, r5, pc}
 8003732:	bf00      	nop
 8003734:	20000250 	.word	0x20000250

08003738 <_isatty_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d06      	ldr	r5, [pc, #24]	@ (8003754 <_isatty_r+0x1c>)
 800373c:	2300      	movs	r3, #0
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7fe fe91 	bl	800246a <_isatty>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_isatty_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_isatty_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000250 	.word	0x20000250

08003758 <_malloc_usable_size_r>:
 8003758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375c:	1f18      	subs	r0, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbc      	itt	lt
 8003762:	580b      	ldrlt	r3, [r1, r0]
 8003764:	18c0      	addlt	r0, r0, r3
 8003766:	4770      	bx	lr

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
